(()=>{"use strict";var e={122:(e,t,r)=>{function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}r.d(t,{Z:()=>n})},827:(e,t,r)=>{r.d(t,{Z:()=>i});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};const i="object"===("undefined"==typeof window?"undefined":n(window))&&"object"===("undefined"==typeof document?"undefined":n(document))&&9===document.nodeType},942:(e,t,r)=>{r.r(t),r.d(t,{default:()=>u});var n=/[A-Z]/g,i=/^ms-/,o={};function s(e){return"-"+e.toLowerCase()}const l=function(e){if(o.hasOwnProperty(e))return o[e];var t=e.replace(n,s);return o[e]=i.test(t)?"-"+t:t};function a(e){var t={};for(var r in e)t[0===r.indexOf("--")?r:l(r)]=e[r];return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(a):t.fallbacks=a(e.fallbacks)),t}const u=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=a(e[t]);return e}return a(e)},onChangeValue:function(e,t,r){if(0===t.indexOf("--"))return e;var n=l(t);return t===n?e:(r.prop(n,e),null)}}}},642:(e,t,r)=>{function n(e,t){if(!t)return!0;if(Array.isArray(t)){for(var r=0;r<t.length;r++)if(!n(e,t[r]))return!1;return!0}if(t.indexOf(" ")>-1)return n(e,t.split(" "));var i=e.options.parent;if("$"===t[0]){var o=i.getRule(t.substr(1));return!!o&&o!==e&&(i.classes[e.key]+=" "+i.classes[o.key],!0)}return i.classes[e.key]+=" "+t,!0}r.r(t),r.d(t,{default:()=>i});const i=function(){return{onProcessStyle:function(e,t){return"composes"in e?(n(t,e.composes),delete e.composes,e):e}}}},961:(e,t,r)=>{r.r(t),r.d(t,{default:()=>d});var n=r(474),i=n.HZ&&CSS?CSS.px:"px",o=n.HZ&&CSS?CSS.ms:"ms",s=n.HZ&&CSS?CSS.percent:"%";function l(e){var t=/(-[a-z])/g,r=function(e){return e[1].toUpperCase()},n={};for(var i in e)n[i]=e[i],n[i.replace(t,r)]=e[i];return n}var a=l({"animation-delay":o,"animation-duration":o,"background-position":i,"background-position-x":i,"background-position-y":i,"background-size":i,border:i,"border-bottom":i,"border-bottom-left-radius":i,"border-bottom-right-radius":i,"border-bottom-width":i,"border-left":i,"border-left-width":i,"border-radius":i,"border-right":i,"border-right-width":i,"border-top":i,"border-top-left-radius":i,"border-top-right-radius":i,"border-top-width":i,"border-width":i,"border-block":i,"border-block-end":i,"border-block-end-width":i,"border-block-start":i,"border-block-start-width":i,"border-block-width":i,"border-inline":i,"border-inline-end":i,"border-inline-end-width":i,"border-inline-start":i,"border-inline-start-width":i,"border-inline-width":i,"border-start-start-radius":i,"border-start-end-radius":i,"border-end-start-radius":i,"border-end-end-radius":i,margin:i,"margin-bottom":i,"margin-left":i,"margin-right":i,"margin-top":i,"margin-block":i,"margin-block-end":i,"margin-block-start":i,"margin-inline":i,"margin-inline-end":i,"margin-inline-start":i,padding:i,"padding-bottom":i,"padding-left":i,"padding-right":i,"padding-top":i,"padding-block":i,"padding-block-end":i,"padding-block-start":i,"padding-inline":i,"padding-inline-end":i,"padding-inline-start":i,"mask-position-x":i,"mask-position-y":i,"mask-size":i,height:i,width:i,"min-height":i,"max-height":i,"min-width":i,"max-width":i,bottom:i,left:i,top:i,right:i,inset:i,"inset-block":i,"inset-block-end":i,"inset-block-start":i,"inset-inline":i,"inset-inline-end":i,"inset-inline-start":i,"box-shadow":i,"text-shadow":i,"column-gap":i,"column-rule":i,"column-rule-width":i,"column-width":i,"font-size":i,"font-size-delta":i,"letter-spacing":i,"text-decoration-thickness":i,"text-indent":i,"text-stroke":i,"text-stroke-width":i,"word-spacing":i,motion:i,"motion-offset":i,outline:i,"outline-offset":i,"outline-width":i,perspective:i,"perspective-origin-x":s,"perspective-origin-y":s,"transform-origin":s,"transform-origin-x":s,"transform-origin-y":s,"transform-origin-z":s,"transition-delay":o,"transition-duration":o,"vertical-align":i,"flex-basis":i,"shape-margin":i,size:i,gap:i,grid:i,"grid-gap":i,"row-gap":i,"grid-row-gap":i,"grid-column-gap":i,"grid-template-rows":i,"grid-template-columns":i,"grid-auto-rows":i,"grid-auto-columns":i,"box-shadow-x":i,"box-shadow-y":i,"box-shadow-blur":i,"box-shadow-spread":i,"font-line-height":i,"text-shadow-x":i,"text-shadow-y":i,"text-shadow-blur":i});function u(e,t,r){if(null==t)return t;if(Array.isArray(t))for(var n=0;n<t.length;n++)t[n]=u(e,t[n],r);else if("object"==typeof t)if("fallbacks"===e)for(var o in t)t[o]=u(o,t[o],r);else for(var s in t)t[s]=u(e+"-"+s,t[s],r);else if("number"==typeof t&&!1===isNaN(t)){var l=r[e]||a[e];return!l||0===t&&l===i?t.toString():"function"==typeof l?l(t).toString():""+t+l}return t}const d=function(e){void 0===e&&(e={});var t=l(e);return{onProcessStyle:function(e,r){if("style"!==r.type)return e;for(var n in e)e[n]=u(n,e[n],t);return e},onChangeValue:function(e,r){return u(r,e,t)}}}},38:(e,t,r)=>{r.r(t),r.d(t,{default:()=>d});var n={"background-size":!0,"background-position":!0,border:!0,"border-bottom":!0,"border-left":!0,"border-top":!0,"border-right":!0,"border-radius":!0,"border-image":!0,"border-width":!0,"border-style":!0,"border-color":!0,"box-shadow":!0,flex:!0,margin:!0,padding:!0,outline:!0,"transform-origin":!0,transform:!0,transition:!0},i={position:!0,size:!0},o={padding:{top:0,right:0,bottom:0,left:0},margin:{top:0,right:0,bottom:0,left:0},background:{attachment:null,color:null,image:null,position:null,repeat:null},border:{width:null,style:null,color:null},"border-top":{width:null,style:null,color:null},"border-right":{width:null,style:null,color:null},"border-bottom":{width:null,style:null,color:null},"border-left":{width:null,style:null,color:null},outline:{width:null,style:null,color:null},"list-style":{type:null,position:null,image:null},transition:{property:null,duration:null,"timing-function":null,timingFunction:null,delay:null},animation:{name:null,duration:null,"timing-function":null,timingFunction:null,delay:null,"iteration-count":null,iterationCount:null,direction:null,"fill-mode":null,fillMode:null,"play-state":null,playState:null},"box-shadow":{x:0,y:0,blur:0,spread:0,color:null,inset:null},"text-shadow":{x:0,y:0,blur:null,color:null}},s={border:{radius:"border-radius",image:"border-image",width:"border-width",style:"border-style",color:"border-color"},"border-bottom":{width:"border-bottom-width",style:"border-bottom-style",color:"border-bottom-color"},"border-top":{width:"border-top-width",style:"border-top-style",color:"border-top-color"},"border-left":{width:"border-left-width",style:"border-left-style",color:"border-left-color"},"border-right":{width:"border-right-width",style:"border-right-style",color:"border-right-color"},background:{size:"background-size",image:"background-image"},font:{style:"font-style",variant:"font-variant",weight:"font-weight",stretch:"font-stretch",size:"font-size",family:"font-family",lineHeight:"line-height","line-height":"line-height"},flex:{grow:"flex-grow",basis:"flex-basis",direction:"flex-direction",wrap:"flex-wrap",flow:"flex-flow",shrink:"flex-shrink"},align:{self:"align-self",items:"align-items",content:"align-content"},grid:{"template-columns":"grid-template-columns",templateColumns:"grid-template-columns","template-rows":"grid-template-rows",templateRows:"grid-template-rows","template-areas":"grid-template-areas",templateAreas:"grid-template-areas",template:"grid-template","auto-columns":"grid-auto-columns",autoColumns:"grid-auto-columns","auto-rows":"grid-auto-rows",autoRows:"grid-auto-rows","auto-flow":"grid-auto-flow",autoFlow:"grid-auto-flow",row:"grid-row",column:"grid-column","row-start":"grid-row-start",rowStart:"grid-row-start","row-end":"grid-row-end",rowEnd:"grid-row-end","column-start":"grid-column-start",columnStart:"grid-column-start","column-end":"grid-column-end",columnEnd:"grid-column-end",area:"grid-area",gap:"grid-gap","row-gap":"grid-row-gap",rowGap:"grid-row-gap","column-gap":"grid-column-gap",columnGap:"grid-column-gap"}};function l(e,t,r,n){return null==r[t]?e:0===e.length?[]:Array.isArray(e[0])?l(e[0],t,r,n):"object"==typeof e[0]?function(e,t,r){return e.map((function(e){return a(e,t,r,!1,!0)}))}(e,t,n):[e]}function a(e,t,r,n,l){if(!o[t]&&!s[t])return[];var a=[];if(s[t]&&(e=function(e,t,r,n){for(var i in r){var o=r[i];if(void 0!==e[i]&&(n||!t.prop(o))){var s,l=u((s={},s[o]=e[i],s),t)[o];n?t.style.fallbacks[o]=l:t.style[o]=l}delete e[i]}return e}(e,r,s[t],n)),Object.keys(e).length)for(var d in o[t])e[d]?Array.isArray(e[d])?a.push(null===i[d]?e[d]:e[d].join(" ")):a.push(e[d]):null!=o[t][d]&&a.push(o[t][d]);return!a.length||l?a:[a]}function u(e,t,r){for(var i in e){var o=e[i];if(Array.isArray(o)){if(!Array.isArray(o[0])){if("fallbacks"===i){for(var s=0;s<e.fallbacks.length;s++)e.fallbacks[s]=u(e.fallbacks[s],t,!0);continue}e[i]=l(o,i,n,t),e[i].length||delete e[i]}}else if("object"==typeof o){if("fallbacks"===i){e.fallbacks=u(e.fallbacks,t,!0);continue}e[i]=a(o,i,t,r),e[i].length||delete e[i]}else""===e[i]&&delete e[i]}return e}const d=function(){return{onProcessStyle:function(e,t){if(!e||"style"!==t.type)return e;if(Array.isArray(e)){for(var r=0;r<e.length;r++)e[r]=u(e[r],t);return e}return u(e,t)}}}},64:(e,t,r)=>{r.r(t),r.d(t,{default:()=>l});var n=r(122),i=function(e){return e&&"object"==typeof e&&!Array.isArray(e)},o="extendCurrValue"+Date.now();function s(e,t,r,o){return void 0===o&&(o={}),function(e,t,r,o){if("string"!=typeof e.extend)if(Array.isArray(e.extend))for(var l=0;l<e.extend.length;l++){var a=e.extend[l];s("string"==typeof a?(0,n.Z)({},e,{extend:a}):e.extend[l],t,r,o)}else for(var u in e.extend)"extend"!==u?i(e.extend[u])?(u in o||(o[u]={}),s(e.extend[u],t,r,o[u])):o[u]=e.extend[u]:s(e.extend.extend,t,r,o);else{if(!r)return;var d=r.getRule(e.extend);if(!d)return;if(d===t)return;var f=d.options.parent;f&&s(f.rules.raw[e.extend],t,r,o)}}(e,t,r,o),function(e,t,r,n){for(var o in e)"extend"!==o&&(i(n[o])&&i(e[o])?s(e[o],t,r,n[o]):i(e[o])?n[o]=s(e[o],t,r):n[o]=e[o])}(e,t,r,o),o}const l=function(){return{onProcessStyle:function(e,t,r){return"extend"in e?s(e,t,r):e},onChangeValue:function(e,t,r){if("extend"!==t)return e;if(null==e||!1===e){for(var n in r[o])r.prop(n,null);return r[o]=null,null}if("object"==typeof e){for(var i in e)r.prop(i,e[i]);r[o]=e}return null}}}},19:(e,t,r)=>{r.r(t),r.d(t,{default:()=>f});var n=r(122),i=r(474),o="@global",s="@global ",l=function(){function e(e,t,r){for(var s in this.type="global",this.at=o,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=r,this.rules=new i.RB((0,n.Z)({},r,{parent:this})),t)this.rules.add(s,t[s]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,r){var n=this.rules.add(e,t,r);return n&&this.options.jss.plugins.onProcessRule(n),n},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),a=function(){function e(e,t,r){this.type="global",this.at=o,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=r;var i=e.substr(s.length);this.rule=r.jss.createRule(i,t,(0,n.Z)({},r,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),u=/\s*,\s*/g;function d(e,t){for(var r=e.split(u),n="",i=0;i<r.length;i++)n+=t+" "+r[i].trim(),r[i+1]&&(n+=", ");return n}const f=function(){return{onCreateRule:function(e,t,r){if(!e)return null;if(e===o)return new l(e,t,r);if("@"===e[0]&&e.substr(0,s.length)===s)return new a(e,t,r);var n=r.parent;return n&&("global"===n.type||n.options.parent&&"global"===n.options.parent.type)&&(r.scoped=!1),!1===r.scoped&&(r.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var r=e.options,i=e.style,s=i?i[o]:null;if(s){for(var l in s)t.addRule(l,s[l],(0,n.Z)({},r,{selector:d(l,e.selector)}));delete i[o]}}(e,t),function(e,t){var r=e.options,i=e.style;for(var s in i)if("@"===s[0]&&s.substr(0,o.length)===o){var l=d(s.substr(o.length),e.selector);t.addRule(l,i[s],(0,n.Z)({},r,{selector:l})),delete i[s]}}(e,t))}}}},57:(e,t,r)=>{r.r(t),r.d(t,{default:()=>l});var n=r(122),i=/\s*,\s*/g,o=/&/g,s=/\$([\w-]+)/g;const l=function(){function e(e,t){return function(r,n){var i=e.getRule(n)||t&&t.getRule(n);return i?(i=i).selector:n}}function t(e,t){for(var r=t.split(i),n=e.split(i),s="",l=0;l<r.length;l++)for(var a=r[l],u=0;u<n.length;u++){var d=n[u];s&&(s+=", "),s+=-1!==d.indexOf("&")?d.replace(o,a):a+" "+d}return s}function r(e,t,r){if(r)return(0,n.Z)({},r,{index:r.index+1});var i=e.options.nestingLevel;i=void 0===i?1:i+1;var o=(0,n.Z)({},e.options,{nestingLevel:i,index:t.indexOf(e)+1});return delete o.name,o}return{onProcessStyle:function(i,o,l){if("style"!==o.type)return i;var a,u,d=o,f=d.options.parent;for(var c in i){var h=-1!==c.indexOf("&"),p="@"===c[0];if(h||p){if(a=r(d,f,a),h){var y=t(c,d.selector);u||(u=e(f,l)),y=y.replace(s,u),f.addRule(y,i[c],(0,n.Z)({},a,{selector:y}))}else p&&f.addRule(c,{},a).addRule(d.key,i[c],{selector:d.selector});delete i[c]}}return i}}}},895:(e,t,r)=>{r.r(t),r.d(t,{default:()=>n});const n=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,r){if("style"!==r.type)return t;for(var n={},i=Object.keys(t).sort(e),o=0;o<i.length;o++)n[i[o]]=t[i[o]];return n}}}},202:(e,t,r)=>{r.r(t),r.d(t,{default:()=>l});var n=r(474),i=Date.now(),o="fnValues"+i,s="fnStyle"+ ++i;const l=function(){return{onCreateRule:function(e,t,r){if("function"!=typeof t)return null;var i=(0,n.JH)(e,{},r);return i[s]=t,i},onProcessStyle:function(e,t){if(o in t||s in t)return e;var r={};for(var n in e){var i=e[n];"function"==typeof i&&(delete e[n],r[n]=i)}return t[o]=r,e},onUpdate:function(e,t,r,n){var i=t,l=i[s];l&&(i.style=l(e)||{});var a=i[o];if(a)for(var u in a)i.prop(u,a[u](e),n)}}}},17:(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var n=r(121),i=r(474),o=function(e){return e&&e[n.Z]&&e===e[n.Z]()};const s=function(e){return{onCreateRule:function(t,r,n){if(!o(r))return null;var s=r,l=(0,i.JH)(t,{},n);return s.subscribe((function(t){for(var r in t)l.prop(r,t[r],e)})),l},onProcessRule:function(t){if(!t||"style"===t.type){var r=t,n=r.style,i=function(t){var i=n[t];if(!o(i))return"continue";delete n[t],i.subscribe({next:function(n){r.prop(t,n,e)}})};for(var s in n)i(s)}}}}},228:(e,t,r)=>{r.r(t),r.d(t,{default:()=>o});var n=/;\n/,i=function(e){"string"==typeof e.style&&(e.style=function(e){for(var t={},r=e.split(n),i=0;i<r.length;i++){var o=(r[i]||"").trim();if(o){var s=o.indexOf(":");if(-1!==s){var l=o.substr(0,s).trim(),a=o.substr(s+1).trim();t[l]=a}}}return t}(e.style))};const o=function(){return{onProcessRule:i}}},220:(e,t,r)=>{r.r(t),r.d(t,{default:()=>re});var n=r(827);function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var o="",s="",l="",a="",u=n.Z&&"ontouchstart"in document.documentElement;if(n.Z){var d={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},f=document.createElement("p").style;for(var c in d)if(c+"Transform"in f){o=c,s=d[c];break}"Webkit"===o&&"msHyphens"in f&&(o="ms",s=d.ms,a="edge"),"Webkit"===o&&"-apple-trailing-word"in f&&(l="apple")}var h=o,p=s,y=l,g=a,v=u,m={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===h?"-webkit-"+e:p+e)}},b={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===h?p+"print-"+e:e)}},w=/[-\s]+(.)?/g;function x(e,t){return t?t.toUpperCase():""}function k(e){return e.replace(w,x)}function S(e){return k("-"+e)}var P,R={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===h){var r="mask-image";if(k(r)in t)return e;if(h+S(r)in t)return p+e}return e}},A={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==y||v?e:p+e)}},O={noPrefill:["transform"],supportedProperty:function(e,t,r){return"transform"===e&&(r.transform?e:p+e)}},j={noPrefill:["transition"],supportedProperty:function(e,t,r){return"transition"===e&&(r.transition?e:p+e)}},C={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===h||"ms"===h&&"edge"!==g?p+e:e)}},Z={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===h||"ms"===h||"apple"===y?p+e:e)}},I={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===h?"WebkitColumn"+S(e)in t&&p+"column-"+e:"Moz"===h&&"page"+S(e)in t&&"page-"+e)}},E={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===h)return e;var r=e.replace("-inline","");return h+S(r)in t&&p+r}},M={supportedProperty:function(e,t){return k(e)in t&&e}},T={supportedProperty:function(e,t){var r=S(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:h+r in t?p+e:"Webkit"!==h&&"Webkit"+r in t&&"-webkit-"+e}},z={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===h?""+p+e:e)}},N={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===h?p+"scroll-chaining":e)}},q={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},V={supportedProperty:function(e,t){var r=q[e];return!!r&&h+S(r)in t&&p+r}},U={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},W=Object.keys(U),H=function(e){return p+e},G=[m,b,R,A,O,j,C,Z,I,E,M,T,z,N,V,{supportedProperty:function(e,t,r){var n=r.multiple;if(W.indexOf(e)>-1){var i=U[e];if(!Array.isArray(i))return h+S(i)in t&&p+i;if(!n)return!1;for(var o=0;o<i.length;o++)if(!(h+S(i[0])in t))return!1;return i.map(H)}return!1}}],_=G.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),$=G.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,function(e){if(Array.isArray(e))return i(e)}(r=t.noPrefill)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,t){if(e){if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?i(e,t):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),e;var r}),[]),B={};if(n.Z){P=document.createElement("p");var F=window.getComputedStyle(document.documentElement,"");for(var J in F)isNaN(J)||(B[F[J]]=F[J]);$.forEach((function(e){return delete B[e]}))}function K(e,t){if(void 0===t&&(t={}),!P)return e;if(null!=B[e])return B[e];"transition"!==e&&"transform"!==e||(t[e]=e in P.style);for(var r=0;r<_.length&&(B[e]=_[r](e,P.style,t),!B[e]);r++);try{P.style[e]=""}catch(e){return!1}return B[e]}var L,D={},Q={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},X=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Y(e,t,r){return"var"===t?"var":"all"===t?"all":"all"===r?", all":(t?K(t):", "+K(r))||t||r}function ee(e,t){var r=t;if(!L||"content"===e)return t;if("string"!=typeof r||!isNaN(parseInt(r,10)))return r;var n=e+r;if(null!=D[n])return D[n];try{L.style[e]=r}catch(e){return D[n]=!1,!1}if(Q[e])r=r.replace(X,Y);else if(""===L.style[e]&&("-ms-flex"===(r=p+r)&&(L.style[e]="-ms-flexbox"),L.style[e]=r,""===L.style[e]))return D[n]=!1,!1;return L.style[e]="",D[n]=r,D[n]}n.Z&&(L=document.createElement("p"));var te=r(474);const re=function(){function e(t){for(var r in t){var n=t[r];if("fallbacks"===r&&Array.isArray(n))t[r]=n.map(e);else{var i=!1,o=K(r);o&&o!==r&&(i=!0);var s=!1,l=ee(o,(0,te.EK)(n));l&&l!==n&&(s=!0),(i||s)&&(i&&delete t[r],t[o||r]=l||n)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at=function(e){return"-"===e[1]||"ms"===h?e:"@"+p+"keyframes"+e.substr(10)}(t.at)}},onProcessStyle:function(t,r){return"style"!==r.type?t:e(t)},onChangeValue:function(e,t){return ee(t,(0,te.EK)(e))||e}}}},280:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(202),i=r(17),o=r(228),s=r(19),l=r(64),a=r(57),u=r(642),d=r(942),f=r(961),c=r(38),h=r(220),p=r(895);function y(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var g=y(n),v=y(i),m=y(o),b=y(s),w=y(l),x=y(a),k=y(u),S=y(d),P=y(f),R=y(c),A=y(h),O=y(p);t.default=function(e){return void 0===e&&(e={}),{plugins:[g.default(),v.default(e.observable),m.default(),b.default(),w.default(),x.default(),k.default(),S.default(),P.default(e.defaultUnit),R.default(),A.default(),O.default()]}}},474:(e,t,r)=>{r.d(t,{RB:()=>K,Ue:()=>ye,JH:()=>c,HZ:()=>pe,EK:()=>p});var n=r(122),i=r(827);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t&&o(e.prototype,t),r&&o(e,r),e}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,l(e,t)}function u(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var d={}.constructor;function f(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(f);if(e.constructor!==d)return e;var t={};for(var r in e)t[r]=f(e[r]);return t}function c(e,t,r){void 0===e&&(e="unnamed");var n=r.jss,i=f(t);return n.plugins.onCreateRule(e,i,r)||(e[0],null)}var h=function(e,t){for(var r="",n=0;n<e.length&&"!important"!==e[n];n++)r&&(r+=t),r+=e[n];return r},p=function(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var r="";if(Array.isArray(e[0]))for(var n=0;n<e.length&&"!important"!==e[n];n++)r&&(r+=", "),r+=h(e[n]," ");else r=h(e,", ");return t||"!important"!==e[e.length-1]||(r+=" !important"),r};function y(e,t){for(var r="",n=0;n<t;n++)r+="  ";return r+e}function g(e,t,r){void 0===r&&(r={});var n="";if(!t)return n;var i=r.indent,o=void 0===i?0:i,s=t.fallbacks;if(e&&o++,s)if(Array.isArray(s))for(var l=0;l<s.length;l++){var a=s[l];for(var u in a){var d=a[u];null!=d&&(n&&(n+="\n"),n+=y(u+": "+p(d)+";",o))}}else for(var f in s){var c=s[f];null!=c&&(n&&(n+="\n"),n+=y(f+": "+p(c)+";",o))}for(var h in t){var g=t[h];null!=g&&"fallbacks"!==h&&(n&&(n+="\n"),n+=y(h+": "+p(g)+";",o))}return(n||r.allowEmpty)&&e?(n&&(n="\n"+n+"\n"),y(e+" {"+n,--o)+y("}",o)):n}var v=/([[\].#*$><+~=|^:(),"'`\s])/g,m="undefined"!=typeof CSS&&CSS.escape,b=function(e){return m?m(e):e.replace(v,"\\$1")},w=function(){function e(e,t,r){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var n=r.sheet,i=r.Renderer;this.key=e,this.options=r,this.style=t,n?this.renderer=n.renderer:i&&(this.renderer=new i)}return e.prototype.prop=function(e,t,r){if(void 0===t)return this.style[e];var n=!!r&&r.force;if(!n&&this.style[e]===t)return this;var i=t;r&&!1===r.process||(i=this.options.jss.plugins.onChangeValue(t,e,this));var o=null==i||!1===i,s=e in this.style;if(o&&!s&&!n)return this;var l=o&&s;if(l?delete this.style[e]:this.style[e]=i,this.renderable&&this.renderer)return l?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,i),this;var a=this.options.sheet;return a&&a.attached,this},e}(),x=function(e){function t(t,r,n){var i;(i=e.call(this,t,r,n)||this).selectorText=void 0,i.id=void 0,i.renderable=void 0;var o=n.selector,s=n.scoped,l=n.sheet,a=n.generateId;return o?i.selectorText=o:!1!==s&&(i.id=a(u(u(i)),l),i.selectorText="."+b(i.id)),i}a(t,e);var r=t.prototype;return r.applyTo=function(e){var t=this.renderer;if(t){var r=this.toJSON();for(var n in r)t.setProperty(e,n,r[n])}return this},r.toJSON=function(){var e={};for(var t in this.style){var r=this.style[t];"object"!=typeof r?e[t]=r:Array.isArray(r)&&(e[t]=p(r))}return e},r.toString=function(e){var t=this.options.sheet,r=t&&t.options.link?(0,n.Z)({},e,{allowEmpty:!0}):e;return g(this.selectorText,this.style,r)},s(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,r=this.renderable;r&&t&&(t.setSelector(r,e)||t.replaceRule(r,this))}},get:function(){return this.selectorText}}]),t}(w),k={onCreateRule:function(e,t,r){return"@"===e[0]||r.parent&&"keyframes"===r.parent.type?null:new x(e,t,r)}},S={indent:1,children:!0},P=/@([\w-]+)/,R=function(){function e(e,t,r){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e;var i=e.match(P);for(var o in this.at=i?i[1]:"unknown",this.query=r.name||"@"+this.at,this.options=r,this.rules=new K((0,n.Z)({},r,{parent:this})),t)this.rules.add(o,t[o]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,r){var n=this.rules.add(e,t,r);return n?(this.options.jss.plugins.onProcessRule(n),n):null},t.toString=function(e){if(void 0===e&&(e=S),null==e.indent&&(e.indent=S.indent),null==e.children&&(e.children=S.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),A=/@media|@supports\s+/,O={onCreateRule:function(e,t,r){return A.test(e)?new R(e,t,r):null}},j={indent:1,children:!0},C=/@keyframes\s+([\w-]+)/,Z=function(){function e(e,t,r){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var i=e.match(C);i&&i[1]?this.name=i[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=r;var o=r.scoped,s=r.sheet,l=r.generateId;for(var a in this.id=!1===o?this.name:b(l(this,s)),this.rules=new K((0,n.Z)({},r,{parent:this})),t)this.rules.add(a,t[a],(0,n.Z)({},r,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=j),null==e.indent&&(e.indent=j.indent),null==e.children&&(e.children=j.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),I=/@keyframes\s+/,E=/\$([\w-]+)/g,M=function(e,t){return"string"==typeof e?e.replace(E,(function(e,r){return r in t?t[r]:e})):e},T=function(e,t,r){var n=e[t],i=M(n,r);i!==n&&(e[t]=i)},z={onCreateRule:function(e,t,r){return"string"==typeof e&&I.test(e)?new Z(e,t,r):null},onProcessStyle:function(e,t,r){return"style"===t.type&&r?("animation-name"in e&&T(e,"animation-name",r.keyframes),"animation"in e&&T(e,"animation",r.keyframes),e):e},onChangeValue:function(e,t,r){var n=r.options.sheet;if(!n)return e;switch(t){case"animation":case"animation-name":return M(e,n.keyframes);default:return e}}},N=function(e){function t(){for(var t,r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];return(t=e.call.apply(e,[this].concat(n))||this).renderable=void 0,t}return a(t,e),t.prototype.toString=function(e){var t=this.options.sheet,r=t&&t.options.link?(0,n.Z)({},e,{allowEmpty:!0}):e;return g(this.key,this.style,r)},t}(w),q={onCreateRule:function(e,t,r){return r.parent&&"keyframes"===r.parent.type?new N(e,t,r):null}},V=function(){function e(e,t,r){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=r}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",r=0;r<this.style.length;r++)t+=g(this.at,this.style[r]),this.style[r+1]&&(t+="\n");return t}return g(this.at,this.style,e)},e}(),U=/@font-face/,W={onCreateRule:function(e,t,r){return U.test(e)?new V(e,t,r):null}},H=function(){function e(e,t,r){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=r}return e.prototype.toString=function(e){return g(this.key,this.style,e)},e}(),G={onCreateRule:function(e,t,r){return"@viewport"===e||"@-ms-viewport"===e?new H(e,t,r):null}},_=function(){function e(e,t,r){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=r}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",r=0;r<this.value.length;r++)t+=this.key+" "+this.value[r]+";",this.value[r+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),$={"@charset":!0,"@import":!0,"@namespace":!0},B=[k,O,z,q,W,G,{onCreateRule:function(e,t,r){return e in $?new _(e,t,r):null}}],F={process:!0},J={force:!0,process:!0},K=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,r){var i=this.options,o=i.parent,s=i.sheet,l=i.jss,a=i.Renderer,u=i.generateId,d=i.scoped,f=(0,n.Z)({classes:this.classes,parent:o,sheet:s,jss:l,Renderer:a,generateId:u,scoped:d,name:e,keyframes:this.keyframes,selector:void 0},r),h=e;e in this.raw&&(h=e+"-d"+this.counter++),this.raw[h]=t,h in this.classes&&(f.selector="."+b(this.classes[h]));var p=c(h,t,f);if(!p)return null;this.register(p);var y=void 0===f.index?this.index.length:f.index;return this.index.splice(y,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof x?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof Z&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof x?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof Z&&delete this.keyframes[e.name]},t.update=function(){var e,t,r;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],r=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],r=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,r);else for(var n=0;n<this.index.length;n++)this.updateOne(this.index[n],t,r)},t.updateOne=function(t,r,n){void 0===n&&(n=F);var i=this.options,o=i.jss.plugins,s=i.sheet;if(t.rules instanceof e)t.rules.update(r,n);else{var l=t,a=l.style;if(o.onUpdate(r,t,s,n),n.process&&a&&a!==l.style){for(var u in o.onProcessStyle(l.style,l,s),l.style){var d=l.style[u];d!==a[u]&&l.prop(u,d,J)}for(var f in a){var c=l.style[f],h=a[f];null==c&&c!==h&&l.prop(f,null,J)}}}},t.toString=function(e){for(var t="",r=this.options.sheet,n=!!r&&r.options.link,i=0;i<this.index.length;i++){var o=this.index[i].toString(e);(o||n)&&(t&&(t+="\n"),t+=o)}return t},e}(),L=function(){function e(e,t){for(var r in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=(0,n.Z)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new K(this.options),e)this.rules.add(r,e[r]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,r){var n=this.queue;this.attached&&!n&&(this.queue=[]);var i=this.rules.add(e,t,r);return i?(this.options.jss.plugins.onProcessRule(i),this.attached?this.deployed?(n?n.push(i):(this.insertRule(i),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),i):i:(this.deployed=!1,i)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var r=[];for(var n in e){var i=this.addRule(n,e[n],t);i&&r.push(i)}return r},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,r){return this.rules.updateOne(e,t,r),this},t.toString=function(e){return this.rules.toString(e)},e}(),D=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,r){for(var n=0;n<this.registry.onCreateRule.length;n++){var i=this.registry.onCreateRule[n](e,t,r);if(i)return i}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,r=0;r<this.registry.onProcessRule.length;r++)this.registry.onProcessRule[r](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,r){for(var n=0;n<this.registry.onProcessStyle.length;n++)t.style=this.registry.onProcessStyle[n](t.style,t,r)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,r,n){for(var i=0;i<this.registry.onUpdate.length;i++)this.registry.onUpdate[i](e,t,r,n)},t.onChangeValue=function(e,t,r){for(var n=e,i=0;i<this.registry.onChangeValue.length;i++)n=this.registry.onChangeValue[i](n,t,r);return n},t.use=function(e,t){void 0===t&&(t={queue:"external"});var r=this.plugins[t.queue];-1===r.indexOf(e)&&(r.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var r in t)r in e&&e[r].push(t[r]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),Q=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,r=e.options.index;if(-1===t.indexOf(e))if(0===t.length||r>=this.index)t.push(e);else for(var n=0;n<t.length;n++)if(t[n].options.index>r)return void t.splice(n,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,r=t.attached,n=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(t,["attached"]),i="",o=0;o<this.registry.length;o++){var s=this.registry[o];null!=r&&s.attached!==r||(i&&(i+="\n"),i+=s.toString(n))}return i},s(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),X="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window&&window.Math===Math?window:"undefined"!=typeof self&&self.Math===Math?self:Function("return this")(),Y="2f1acc6c3a606b082e5eef5e54414ffb";null==X[Y]&&(X[Y]=0);var ee=X[Y]++,te=function(e){void 0===e&&(e={});var t=0;return function(r,n){t+=1;var i="",o="";return n&&(n.options.classNamePrefix&&(o=n.options.classNamePrefix),null!=n.options.jss.id&&(i=String(n.options.jss.id))),e.minify?""+(o||"c")+ee+i+t:o+r.key+"-"+ee+(i?"-"+i:"")+"-"+t}},re=function(e){var t;return function(){return t||(t=e()),t}},ne=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}},ie=function(e,t,r){try{var n=r;if(Array.isArray(r)&&(n=p(r,!0),"!important"===r[r.length-1]))return e.style.setProperty(t,n,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,n):e.style.setProperty(t,n)}catch(e){return!1}return!0},oe=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}},se=function(e,t){return e.selectorText=t,e.selectorText===t},le=re((function(){return document.querySelector("head")}));var ae=re((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),ue=function(e,t,r){try{"insertRule"in e?e.insertRule(t,r):"appendRule"in e&&e.appendRule(t)}catch(e){return!1}return e.cssRules[r]},de=function(e,t){var r=e.cssRules.length;return void 0===t||t>r?r:t},fe=function(){function e(e){this.getPropertyValue=ne,this.setProperty=ie,this.removeProperty=oe,this.setSelector=se,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,this.cssRules=[],e&&Q.add(e),this.sheet=e;var t,r=this.sheet?this.sheet.options:{},n=r.media,i=r.meta,o=r.element;this.element=o||((t=document.createElement("style")).textContent="\n",t),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),i&&this.element.setAttribute("data-meta",i);var s=ae();s&&this.element.setAttribute("nonce",s)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var r=t.insertionPoint,n=function(e){var t=Q.registry;if(t.length>0){var r=function(e,t){for(var r=0;r<e.length;r++){var n=e[r];if(n.attached&&n.options.index>t.index&&n.options.insertionPoint===t.insertionPoint)return n}return null}(t,e);if(r&&r.renderer)return{parent:r.renderer.element.parentNode,node:r.renderer.element};if((r=function(e,t){for(var r=e.length-1;r>=0;r--){var n=e[r];if(n.attached&&n.options.insertionPoint===t.insertionPoint)return n}return null}(t,e))&&r.renderer)return{parent:r.renderer.element.parentNode,node:r.renderer.element.nextSibling}}var n=e.insertionPoint;if(n&&"string"==typeof n){var i=function(e){for(var t=le(),r=0;r<t.childNodes.length;r++){var n=t.childNodes[r];if(8===n.nodeType&&n.nodeValue.trim()===e)return n}return null}(n);if(i)return{parent:i.parentNode,node:i.nextSibling}}return!1}(t);if(!1!==n&&n.parent)n.parent.insertBefore(e,n.node);else if(r&&"number"==typeof r.nodeType){var i=r,o=i.parentNode;o&&o.insertBefore(e,i.nextSibling)}else le().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var r=0;r<e.index.length;r++)this.insertRule(e.index[r],r,t)},t.insertRule=function(e,t,r){if(void 0===r&&(r=this.element.sheet),e.rules){var n=e,i=r;if("conditional"===e.type||"keyframes"===e.type){var o=de(r,t);if(!1===(i=ue(r,n.toString({children:!1}),o)))return!1;this.refCssRule(e,o,i)}return this.insertRules(n.rules,i),i}var s=e.toString();if(!s)return!1;var l=de(r,t),a=ue(r,s,l);return!1!==a&&(this.hasInsertedRules=!0,this.refCssRule(e,l,a),a)},t.refCssRule=function(e,t,r){e.renderable=r,e.options.parent instanceof L&&(this.cssRules[t]=r)},t.deleteRule=function(e){var t=this.element.sheet,r=this.indexOf(e);return-1!==r&&(t.deleteRule(r),this.cssRules.splice(r,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var r=this.indexOf(e);return-1!==r&&(this.element.sheet.deleteRule(r),this.cssRules.splice(r,1),this.insertRule(t,r))},t.getRules=function(){return this.element.sheet.cssRules},e}(),ce=0,he=function(){function e(e){this.id=ce++,this.version="10.7.1",this.plugins=new D,this.options={id:{minify:!1},createGenerateId:te,Renderer:i.Z?fe:null,plugins:[]},this.generateId=te({minify:!1});for(var t=0;t<B.length;t++)this.plugins.use(B[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=(0,n.Z)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var r=t.index;"number"!=typeof r&&(r=0===Q.index?0:Q.index+1);var i=new L(e,(0,n.Z)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:r}));return this.plugins.onProcessSheet(i),i},t.removeStyleSheet=function(e){return e.detach(),Q.remove(e),this},t.createRule=function(e,t,r){if(void 0===t&&(t={}),void 0===r&&(r={}),"object"==typeof e)return this.createRule(void 0,e,t);var i=(0,n.Z)({},r,{name:e,jss:this,Renderer:this.options.Renderer});i.generateId||(i.generateId=this.generateId),i.classes||(i.classes={}),i.keyframes||(i.keyframes={});var o=c(e,t,i);return o&&this.plugins.onProcessRule(o),o},t.use=function(){for(var e=this,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return r.forEach((function(t){e.plugins.use(t)})),this},e}(),pe="object"==typeof CSS&&null!=CSS&&"number"in CSS,ye=function(e){return new he(e)};ye()},121:(e,t,r)=>{r.d(t,{Z:()=>n}),e=r.hmd(e);const n=function(e){var t,r=e.Symbol;return"function"==typeof r?r.observable?t=r.observable:(t=r("observable"),r.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==r.g?r.g:e)}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={id:n,loaded:!1,exports:{}};return e[n](o,o.exports,r),o.loaded=!0,o.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e=r(474),t=r(280);const n=(0,e.Ue)(t.default()).createStyleSheet({primary:{width:"100%",height:"100%"}},{generateId:()=>"primary",Renderer:null}).toString();console.log(n)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtaW4tYnJvd3Nlci9kaXN0L21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlwaGVuYXRlLXN0eWxlLW5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tY2FtZWwtY2FzZS9kaXN0L2pzcy1wbHVnaW4tY2FtZWwtY2FzZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tY29tcG9zZS9kaXN0L2pzcy1wbHVnaW4tY29tcG9zZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tZGVmYXVsdC11bml0L2Rpc3QvanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWV4cGFuZC9kaXN0L2pzcy1wbHVnaW4tZXhwYW5kLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1leHRlbmQvZGlzdC9qc3MtcGx1Z2luLWV4dGVuZC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tZ2xvYmFsL2Rpc3QvanNzLXBsdWdpbi1nbG9iYWwuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLW5lc3RlZC9kaXN0L2pzcy1wbHVnaW4tbmVzdGVkLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1wcm9wcy1zb3J0L2Rpc3QvanNzLXBsdWdpbi1wcm9wcy1zb3J0LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uL2Rpc3QvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1ydWxlLXZhbHVlLW9ic2VydmFibGUvZGlzdC9qc3MtcGx1Z2luLXJ1bGUtdmFsdWUtb2JzZXJ2YWJsZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tdGVtcGxhdGUvZGlzdC9qc3MtcGx1Z2luLXRlbXBsYXRlLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLXZlbmRvci9kaXN0L2Nzcy12ZW5kb3IuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlci9kaXN0L2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXByZXNldC1kZWZhdWx0L2Rpc3QvanNzLXByZXNldC1kZWZhdWx0LmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9kaXN0L2pzcy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhcm1vbnkgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vLi9ub2RlLm1qcyJdLCJuYW1lcyI6WyJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsInRoaXMiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsIndpbmRvdyIsImRvY3VtZW50Iiwibm9kZVR5cGUiLCJ1cHBlcmNhc2VQYXR0ZXJuIiwibXNQYXR0ZXJuIiwiY2FjaGUiLCJ0b0h5cGhlbkxvd2VyIiwibWF0Y2giLCJ0b0xvd2VyQ2FzZSIsIm5hbWUiLCJoTmFtZSIsInJlcGxhY2UiLCJ0ZXN0IiwiY29udmVydENhc2UiLCJzdHlsZSIsImNvbnZlcnRlZCIsInByb3AiLCJpbmRleE9mIiwiZmFsbGJhY2tzIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwib25Qcm9jZXNzU3R5bGUiLCJpbmRleCIsIm9uQ2hhbmdlVmFsdWUiLCJ2YWx1ZSIsInJ1bGUiLCJoeXBoZW5hdGVkUHJvcCIsInJlZ2lzdGVyQ2xhc3MiLCJjbGFzc05hbWUiLCJzcGxpdCIsInBhcmVudCIsIm9wdGlvbnMiLCJyZWZSdWxlIiwiZ2V0UnVsZSIsInN1YnN0ciIsImNsYXNzZXMiLCJjb21wb3NlcyIsInB4IiwiQ1NTIiwibXMiLCJwZXJjZW50IiwiYWRkQ2FtZWxDYXNlZFZlcnNpb24iLCJyZWdFeHAiLCJzdHIiLCJ0b1VwcGVyQ2FzZSIsIm5ld09iaiIsIl9rZXkiLCJ1bml0cyIsImJvcmRlciIsIm1hcmdpbiIsInBhZGRpbmciLCJoZWlnaHQiLCJ3aWR0aCIsImJvdHRvbSIsImxlZnQiLCJ0b3AiLCJyaWdodCIsImluc2V0IiwibW90aW9uIiwib3V0bGluZSIsInBlcnNwZWN0aXZlIiwic2l6ZSIsImdhcCIsImdyaWQiLCJpdGVyYXRlIiwiaW5uZXJQcm9wIiwiX2lubmVyUHJvcCIsImlzTmFOIiwidW5pdCIsInRvU3RyaW5nIiwiY2FtZWxDYXNlZE9wdGlvbnMiLCJ0eXBlIiwicHJvcEFycmF5IiwiZmxleCIsInRyYW5zZm9ybSIsInRyYW5zaXRpb24iLCJwcm9wQXJyYXlJbk9iaiIsInBvc2l0aW9uIiwicHJvcE9iaiIsImJhY2tncm91bmQiLCJhdHRhY2htZW50IiwiY29sb3IiLCJpbWFnZSIsInJlcGVhdCIsInByb3BlcnR5IiwiZHVyYXRpb24iLCJ0aW1pbmdGdW5jdGlvbiIsImRlbGF5IiwiYW5pbWF0aW9uIiwiaXRlcmF0aW9uQ291bnQiLCJkaXJlY3Rpb24iLCJmaWxsTW9kZSIsInBsYXlTdGF0ZSIsIngiLCJ5IiwiYmx1ciIsInNwcmVhZCIsImN1c3RvbVByb3BPYmoiLCJyYWRpdXMiLCJmb250IiwidmFyaWFudCIsIndlaWdodCIsInN0cmV0Y2giLCJmYW1pbHkiLCJsaW5lSGVpZ2h0IiwiZ3JvdyIsImJhc2lzIiwid3JhcCIsImZsb3ciLCJzaHJpbmsiLCJhbGlnbiIsInNlbGYiLCJpdGVtcyIsImNvbnRlbnQiLCJ0ZW1wbGF0ZUNvbHVtbnMiLCJ0ZW1wbGF0ZVJvd3MiLCJ0ZW1wbGF0ZUFyZWFzIiwidGVtcGxhdGUiLCJhdXRvQ29sdW1ucyIsImF1dG9Sb3dzIiwiYXV0b0Zsb3ciLCJyb3ciLCJjb2x1bW4iLCJyb3dTdGFydCIsInJvd0VuZCIsImNvbHVtblN0YXJ0IiwiY29sdW1uRW5kIiwiYXJlYSIsInJvd0dhcCIsImNvbHVtbkdhcCIsInByb2Nlc3NBcnJheSIsInNjaGVtZSIsIml0ZW0iLCJvYmplY3RUb0FycmF5IiwibWFwVmFsdWVzQnlQcm9wIiwiaXNGYWxsYmFjayIsImlzSW5BcnJheSIsInJlc3VsdCIsImN1c3RvbVByb3BzIiwicHJvcE5hbWUiLCJfc3R5bGVEZXRlY3RvciIsImFwcGVuZGVkVmFsdWUiLCJzdHlsZURldGVjdG9yIiwiY3VzdG9tUHJvcHNUb1N0eWxlIiwia2V5cyIsImJhc2VQcm9wIiwicHVzaCIsImpvaW4iLCJpc09iamVjdCIsInZhbHVlTnMiLCJEYXRlIiwibm93IiwiZXh0ZW5kIiwic2hlZXQiLCJuZXdTdHlsZSIsInNpbmdsZUV4dGVuZCIsInJ1bGVzIiwicmF3IiwibWVyZ2VFeHRlbmQiLCJtZXJnZVJlc3QiLCJhdCIsImF0UHJlZml4IiwiR2xvYmFsQ29udGFpbmVyUnVsZSIsInN0eWxlcyIsInNlbGVjdG9yIiwiaXNQcm9jZXNzZWQiLCJhZGQiLCJwcm9jZXNzIiwiX3Byb3RvIiwiZ2V0IiwiYWRkUnVsZSIsImpzcyIsInBsdWdpbnMiLCJvblByb2Nlc3NSdWxlIiwiR2xvYmFsUHJlZml4ZWRSdWxlIiwiY3JlYXRlUnVsZSIsInNlcGFyYXRvclJlZ0V4cCIsImFkZFNjb3BlIiwic2NvcGUiLCJwYXJ0cyIsInNjb3BlZCIsInRyaW0iLCJvbkNyZWF0ZVJ1bGUiLCJoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlIiwiaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlIiwicGFyZW50UmVnRXhwIiwicmVmUmVnRXhwIiwiZ2V0UmVwbGFjZVJlZiIsImNvbnRhaW5lciIsInJlcGxhY2VQYXJlbnRSZWZzIiwibmVzdGVkUHJvcCIsInBhcmVudFByb3AiLCJwYXJlbnRTZWxlY3RvcnMiLCJuZXN0ZWRTZWxlY3RvcnMiLCJqIiwibmVzdGVkIiwiZ2V0T3B0aW9ucyIsInByZXZPcHRpb25zIiwibmVzdGluZ0xldmVsIiwidW5kZWZpbmVkIiwicmVwbGFjZVJlZiIsInN0eWxlUnVsZSIsImlzTmVzdGVkIiwiaXNOZXN0ZWRDb25kaXRpb25hbCIsInNvcnQiLCJwcm9wMCIsInByb3AxIiwicHJvcHMiLCJmblZhbHVlc05zIiwiZm5SdWxlTnMiLCJkZWNsIiwiZm5WYWx1ZXMiLCJvblVwZGF0ZSIsImRhdGEiLCJmblJ1bGUiLCJfcHJvcCIsImlzT2JzZXJ2YWJsZSIsInVwZGF0ZU9wdGlvbnMiLCJzdHlsZSQiLCJzdWJzY3JpYmUiLCJfbG9vcCIsIm5leHQiLCJuZXh0VmFsdWUiLCJzZW1pV2l0aE5sIiwiY3NzVGV4dCIsImNvbG9uSW5kZXgiLCJwYXJzZSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsImpzIiwiY3NzIiwidmVuZG9yIiwiYnJvd3NlciIsImlzVG91Y2giLCJkb2N1bWVudEVsZW1lbnQiLCJqc0Nzc01hcCIsIk1veiIsIk8iLCJXZWJraXQiLCJjcmVhdGVFbGVtZW50IiwicHJlZml4IiwiYXBwZWFyZW5jZSIsIm5vUHJlZmlsbCIsInN1cHBvcnRlZFByb3BlcnR5IiwiY29sb3JBZGp1c3QiLCJ0b1VwcGVyIiwiYyIsImNhbWVsaXplIiwicGFzY2FsaXplIiwiZWwiLCJtYXNrIiwibG9uZ2hhbmQiLCJ0ZXh0T3JpZW50YXRpb24iLCJ3cml0aW5nTW9kZSIsInVzZXJTZWxlY3QiLCJicmVha1Byb3BzT2xkIiwiaW5saW5lTG9naWNhbE9sZCIsIm5ld1Byb3AiLCJ1bnByZWZpeGVkIiwicHJlZml4ZWQiLCJwYXNjYWxpemVkIiwic2Nyb2xsU25hcCIsInN1YnN0cmluZyIsIm92ZXJzY3JvbGxCZWhhdmlvciIsInByb3BNYXAiLCJvcmRlciIsImZsZXgyMDEyIiwicHJvcE1hcCQxIiwicHJvcEtleXMiLCJwcmVmaXhDc3MiLCJwIiwiX3JlZiIsIm11bHRpcGxlIiwicHJvcGVydHlEZXRlY3RvcnMiLCJmaWx0ZXIiLCJyZWR1Y2UiLCJhIiwiaXRlciIsImZyb20iLCJvIiwibWluTGVuIiwibiIsInNsaWNlIiwiVHlwZUVycm9yIiwiY29tcHV0ZWQiLCJnZXRDb21wdXRlZFN0eWxlIiwia2V5JDEiLCJmb3JFYWNoIiwiZXJyIiwiZWwkMSIsImNhY2hlJDEiLCJ0cmFuc2l0aW9uUHJvcGVydGllcyIsInRyYW5zUHJvcHNSZWdFeHAiLCJwcmVmaXhUcmFuc2l0aW9uQ2FsbGJhY2siLCJwMSIsInAyIiwic3VwcG9ydGVkVmFsdWUiLCJwcmVmaXhlZFZhbHVlIiwicGFyc2VJbnQiLCJjYWNoZUtleSIsInByZWZpeFN0eWxlIiwiY2hhbmdlUHJvcCIsInN1cHBvcnRlZFByb3AiLCJjaGFuZ2VWYWx1ZSIsInN1cHBvcnRlZFZhbHVlJDEiLCJhdFJ1bGUiLCJzdXBwb3J0ZWRLZXlmcmFtZXMiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJmdW5jdGlvbnMiLCJvYnNlcnZhYmxlIiwiZ2xvYmFsIiwiY29tcG9zZSIsImNhbWVsQ2FzZSIsImRlZmF1bHRVbml0IiwiZXhwYW5kIiwidmVuZG9yUHJlZml4ZXIiLCJwcm9wc1NvcnQiLCJfaW50ZXJvcERlZmF1bHRMZWdhY3kiLCJlIiwiZnVuY3Rpb25zX19kZWZhdWx0Iiwib2JzZXJ2YWJsZV9fZGVmYXVsdCIsInRlbXBsYXRlX19kZWZhdWx0IiwiZ2xvYmFsX19kZWZhdWx0IiwiZXh0ZW5kX19kZWZhdWx0IiwibmVzdGVkX19kZWZhdWx0IiwiY29tcG9zZV9fZGVmYXVsdCIsImNhbWVsQ2FzZV9fZGVmYXVsdCIsImRlZmF1bHRVbml0X19kZWZhdWx0IiwiZXhwYW5kX19kZWZhdWx0IiwidmVuZG9yUHJlZml4ZXJfX2RlZmF1bHQiLCJwcm9wc1NvcnRfX2RlZmF1bHQiLCJkZWZhdWx0IiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfc2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwicGxhaW5PYmplY3RDb25zdHJ1cmN0b3IiLCJjbG9uZVN0eWxlIiwiZGVjbENvcHkiLCJieSIsInRvQ3NzVmFsdWUiLCJpZ25vcmVJbXBvcnRhbnQiLCJjc3NWYWx1ZSIsImluZGVudFN0ciIsImluZGVudCIsInRvQ3NzIiwiX29wdGlvbnMkaW5kZW50IiwiZmFsbGJhY2siLCJfdmFsdWUiLCJfcHJvcDIiLCJfdmFsdWUyIiwiYWxsb3dFbXB0eSIsImVzY2FwZVJlZ2V4IiwibmF0aXZlRXNjYXBlIiwiZXNjYXBlIiwiQmFzZVN0eWxlUnVsZSIsInJlbmRlcmVyIiwicmVuZGVyYWJsZSIsIlJlbmRlcmVyIiwiZm9yY2UiLCJuZXdWYWx1ZSIsImlzRW1wdHkiLCJpc0RlZmluZWQiLCJyZW1vdmUiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5IiwiYXR0YWNoZWQiLCJTdHlsZVJ1bGUiLCJfQmFzZVN0eWxlUnVsZSIsIl90aGlzIiwic2VsZWN0b3JUZXh0IiwiaWQiLCJnZW5lcmF0ZUlkIiwiX3Byb3RvMiIsImFwcGx5VG8iLCJqc29uIiwidG9KU09OIiwib3B0cyIsImxpbmsiLCJzZXQiLCJzZXRTZWxlY3RvciIsInJlcGxhY2VSdWxlIiwicGx1Z2luU3R5bGVSdWxlIiwiZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyIsImNoaWxkcmVuIiwiYXRSZWdFeHAiLCJDb25kaXRpb25hbFJ1bGUiLCJxdWVyeSIsImF0TWF0Y2giLCJSdWxlTGlzdCIsImtleVJlZ0V4cCIsInBsdWdpbkNvbmRpdGlvbmFsUnVsZSIsImRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMSIsIm5hbWVSZWdFeHAiLCJLZXlmcmFtZXNSdWxlIiwiZnJhbWVzIiwibmFtZU1hdGNoIiwia2V5UmVnRXhwJDEiLCJmaW5kUmVmZXJlbmNlZEtleWZyYW1lIiwidmFsIiwia2V5ZnJhbWVzIiwicmVmS2V5ZnJhbWUiLCJLZXlmcmFtZVJ1bGUiLCJfbGVuIiwiYXJncyIsImNvbmNhdCIsInBsdWdpbktleWZyYW1lUnVsZSIsIkZvbnRGYWNlUnVsZSIsImtleVJlZ0V4cCQyIiwicGx1Z2luRm9udEZhY2VSdWxlIiwiVmlld3BvcnRSdWxlIiwicGx1Z2luVmlld3BvcnRSdWxlIiwiU2ltcGxlUnVsZSIsImtleXNNYXAiLCJkZWZhdWx0VXBkYXRlT3B0aW9ucyIsImZvcmNlVXBkYXRlT3B0aW9ucyIsImNvdW50ZXIiLCJydWxlT3B0aW9ucyIsIl90aGlzJG9wdGlvbnMiLCJyZWdpc3RlciIsInNwbGljZSIsInVucmVnaXN0ZXIiLCJ1cGRhdGUiLCJ1cGRhdGVPbmUiLCJfdGhpcyRvcHRpb25zMiIsIl9uZXh0VmFsdWUiLCJfcHJldlZhbHVlIiwiU3R5bGVTaGVldCIsImRlcGxveWVkIiwicXVldWUiLCJhdHRhY2giLCJkZXBsb3kiLCJkZXRhY2giLCJpbnNlcnRSdWxlIiwiYWRkUnVsZXMiLCJhZGRlZCIsImRlbGV0ZVJ1bGUiLCJfdGhpcyRydWxlcyIsIlBsdWdpbnNSZWdpc3RyeSIsImludGVybmFsIiwiZXh0ZXJuYWwiLCJyZWdpc3RyeSIsIm9uUHJvY2Vzc1NoZWV0IiwicHJvY2Vzc2VkVmFsdWUiLCJ1c2UiLCJuZXdQbHVnaW4iLCJwbHVnaW4iLCJTaGVldHNSZWdpc3RyeSIsInJlc2V0IiwiX3RlbXAiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImdsb2JhbFRoaXMkMSIsImdsb2JhbFRoaXMiLCJNYXRoIiwiRnVuY3Rpb24iLCJucyIsIm1vZHVsZUlkIiwiY3JlYXRlR2VuZXJhdGVJZCIsInJ1bGVDb3VudGVyIiwianNzSWQiLCJjbGFzc05hbWVQcmVmaXgiLCJTdHJpbmciLCJtaW5pZnkiLCJtZW1vaXplIiwiZm4iLCJnZXRQcm9wZXJ0eVZhbHVlIiwiY3NzUnVsZSIsImF0dHJpYnV0ZVN0eWxlTWFwIiwiZGVsZXRlIiwiZ2V0SGVhZCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXROb25jZSIsIm5vZGUiLCJnZXRBdHRyaWJ1dGUiLCJfaW5zZXJ0UnVsZSIsImFwcGVuZFJ1bGUiLCJjc3NSdWxlcyIsImdldFZhbGlkUnVsZUluc2VydGlvbkluZGV4IiwibWF4SW5kZXgiLCJEb21SZW5kZXJlciIsImVsZW1lbnQiLCJoYXNJbnNlcnRlZFJ1bGVzIiwibWVkaWEiLCJtZXRhIiwidGV4dENvbnRlbnQiLCJzZXRBdHRyaWJ1dGUiLCJub25jZSIsInBhcmVudE5vZGUiLCJpbnNlcnRpb25Qb2ludCIsIm5leHROb2RlIiwicmVnaXN0cnkkMSIsImZpbmRIaWdoZXJTaGVldCIsImZpbmRIaWdoZXN0U2hlZXQiLCJuZXh0U2libGluZyIsImNvbW1lbnQiLCJ0ZXh0IiwiaGVhZCIsImNoaWxkTm9kZXMiLCJub2RlVmFsdWUiLCJmaW5kQ29tbWVudE5vZGUiLCJmaW5kUHJldk5vZGUiLCJpbnNlcnRCZWZvcmUiLCJpbnNlcnRpb25Qb2ludEVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImluc2VydFN0eWxlIiwiQm9vbGVhbiIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0UnVsZXMiLCJuYXRpdmVQYXJlbnQiLCJsYXRlc3ROYXRpdmVQYXJlbnQiLCJfaW5zZXJ0aW9uSW5kZXgiLCJyZWZDc3NSdWxlIiwicnVsZVN0ciIsImluc2VydGlvbkluZGV4IiwibmF0aXZlUnVsZSIsImdldFJ1bGVzIiwiaW5zdGFuY2VDb3VudGVyIiwiSnNzIiwidmVyc2lvbiIsInNldHVwIiwiY3JlYXRlU3R5bGVTaGVldCIsInJlbW92ZVN0eWxlU2hlZXQiLCJoYXNDU1NUT01TdXBwb3J0Iiwicm9vdCIsImciLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiY2FjaGVkTW9kdWxlIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImQiLCJkZWZpbml0aW9uIiwiaG1kIiwiRXJyb3IiLCJyIiwidG9TdHJpbmdUYWciLCJwcmltYXJ5IiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6IndDQUFlLFNBQVNBLElBZXRCLE9BZEFBLEVBQVdDLE9BQU9DLFFBQVUsU0FBVUMsR0FDcEMsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUlDLFVBQVVDLE9BQVFGLElBQUssQ0FDekMsSUFBSUcsRUFBU0YsVUFBVUQsR0FFdkIsSUFBSyxJQUFJSSxLQUFPRCxFQUNWTixPQUFPUSxVQUFVQyxlQUFlQyxLQUFLSixFQUFRQyxLQUMvQ0wsRUFBT0ssR0FBT0QsRUFBT0MsSUFLM0IsT0FBT0wsSUFHT1MsTUFBTUMsS0FBTVIsVyxpRENmOUIsSUFBSVMsRUFBNEIsbUJBQVhDLFFBQW9ELGlCQUFwQkEsT0FBT0MsU0FB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RSxFQUFvQnhRLEVBQUksQ0FBQzVSLEVBQUtrQixJQUFVbEMsT0FBT1EsVUFBVUMsZUFBZUMsS0FBS00sRUFBS2tCLEdDQ2xGa2hCLEVBQW9CUSxFQUFLblAsSUFDSCxvQkFBWDNULFFBQTBCQSxPQUFPK2lCLGFBQzFDN2pCLE9BQU93VSxlQUFlQyxFQUFTM1QsT0FBTytpQixZQUFhLENBQUVsaEIsTUFBTyxXQUU3RDNDLE9BQU93VSxlQUFlQyxFQUFTLGFBQWMsQ0FBRTlSLE9BQU8sSyw0QkNIdkQsTUFFTWlJLEdBRk0sUUFBTyxhQUVEaVksaUJBQWlCLENBQUVpQixRQUFTLENBQzFDdmYsTUFBTyxPQUNQRCxPQUFRLFNBQ1IsQ0FBRWlWLFdBQVksSUFBTSxVQUFXZCxTQUFVLE9BQVFqVCxXQUNyRHVlLFFBQVFDLElBQUlwWixJIiwiZmlsZSI6ImJ1bmRsZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0IHZhciBpc0Jyb3dzZXIgPSAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHdpbmRvdykpID09PSBcIm9iamVjdFwiICYmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihkb2N1bWVudCkpID09PSAnb2JqZWN0JyAmJiBkb2N1bWVudC5ub2RlVHlwZSA9PT0gOTtcblxuZXhwb3J0IGRlZmF1bHQgaXNCcm93c2VyO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdmFyLCBwcmVmZXItdGVtcGxhdGUgKi9cbnZhciB1cHBlcmNhc2VQYXR0ZXJuID0gL1tBLVpdL2dcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS9cbnZhciBjYWNoZSA9IHt9XG5cbmZ1bmN0aW9uIHRvSHlwaGVuTG93ZXIobWF0Y2gpIHtcbiAgcmV0dXJuICctJyArIG1hdGNoLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKG5hbWUpIHtcbiAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgcmV0dXJuIGNhY2hlW25hbWVdXG4gIH1cblxuICB2YXIgaE5hbWUgPSBuYW1lLnJlcGxhY2UodXBwZXJjYXNlUGF0dGVybiwgdG9IeXBoZW5Mb3dlcilcbiAgcmV0dXJuIChjYWNoZVtuYW1lXSA9IG1zUGF0dGVybi50ZXN0KGhOYW1lKSA/ICctJyArIGhOYW1lIDogaE5hbWUpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGh5cGhlbmF0ZVN0eWxlTmFtZVxuIiwiaW1wb3J0IGh5cGhlbmF0ZSBmcm9tICdoeXBoZW5hdGUtc3R5bGUtbmFtZSc7XG5cbi8qKlxuICogQ29udmVydCBjYW1lbCBjYXNlZCBwcm9wZXJ0eSBuYW1lcyB0byBkYXNoIHNlcGFyYXRlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBjb252ZXJ0Q2FzZShzdHlsZSkge1xuICB2YXIgY29udmVydGVkID0ge307XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgIHZhciBrZXkgPSBwcm9wLmluZGV4T2YoJy0tJykgPT09IDAgPyBwcm9wIDogaHlwaGVuYXRlKHByb3ApO1xuICAgIGNvbnZlcnRlZFtrZXldID0gc3R5bGVbcHJvcF07XG4gIH1cblxuICBpZiAoc3R5bGUuZmFsbGJhY2tzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUuZmFsbGJhY2tzKSkgY29udmVydGVkLmZhbGxiYWNrcyA9IHN0eWxlLmZhbGxiYWNrcy5tYXAoY29udmVydENhc2UpO2Vsc2UgY29udmVydGVkLmZhbGxiYWNrcyA9IGNvbnZlcnRDYXNlKHN0eWxlLmZhbGxiYWNrcyk7XG4gIH1cblxuICByZXR1cm4gY29udmVydGVkO1xufVxuLyoqXG4gKiBBbGxvdyBjYW1lbCBjYXNlZCBwcm9wZXJ0eSBuYW1lcyBieSBjb252ZXJ0aW5nIHRoZW0gYmFjayB0byBkYXNoZXJpemVkLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICovXG5cblxuZnVuY3Rpb24gY2FtZWxDYXNlKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkge1xuICAgICAgLy8gSGFuZGxlIHJ1bGVzIGxpa2UgQGZvbnQtZmFjZSwgd2hpY2ggY2FuIGhhdmUgbXVsdGlwbGUgc3R5bGVzIGluIGFuIGFycmF5XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3R5bGUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHN0eWxlW2luZGV4XSA9IGNvbnZlcnRDYXNlKHN0eWxlW2luZGV4XSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udmVydENhc2Uoc3R5bGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICAgIGlmIChwcm9wLmluZGV4T2YoJy0tJykgPT09IDApIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgaHlwaGVuYXRlZFByb3AgPSBoeXBoZW5hdGUocHJvcCk7IC8vIFRoZXJlIHdhcyBubyBjYW1lbCBjYXNlIGluIHBsYWNlXG5cbiAgICBpZiAocHJvcCA9PT0gaHlwaGVuYXRlZFByb3ApIHJldHVybiB2YWx1ZTtcbiAgICBydWxlLnByb3AoaHlwaGVuYXRlZFByb3AsIHZhbHVlKTsgLy8gQ29yZSB3aWxsIGlnbm9yZSB0aGF0IHByb3BlcnR5IHZhbHVlIHdlIHNldCB0aGUgcHJvcGVyIG9uZSBhYm92ZS5cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsXG4gICAgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjYW1lbENhc2U7XG4iLCJpbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG4vKipcbiAqIFNldCBzZWxlY3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3JpZ2luYWwgcnVsZVxuICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzTmFtZSBjbGFzcyBzdHJpbmdcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGZsYWcsIGluZGljYXRpbmcgZnVuY3Rpb24gd2FzIHN1Y2Nlc3NmdWxsIG9yIG5vdFxuICovXG5mdW5jdGlvbiByZWdpc3RlckNsYXNzKHJ1bGUsIGNsYXNzTmFtZSkge1xuICAvLyBTa2lwIGZhbHN5IHZhbHVlc1xuICBpZiAoIWNsYXNzTmFtZSkgcmV0dXJuIHRydWU7IC8vIFN1cHBvcnQgYXJyYXkgb2YgY2xhc3MgbmFtZXMgYHtjb21wb3NlczogWydmb28nLCAnYmFyJ119YFxuXG4gIGlmIChBcnJheS5pc0FycmF5KGNsYXNzTmFtZSkpIHtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgY2xhc3NOYW1lLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGlzU2V0dGVkID0gcmVnaXN0ZXJDbGFzcyhydWxlLCBjbGFzc05hbWVbaW5kZXhdKTtcbiAgICAgIGlmICghaXNTZXR0ZWQpIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBTdXBwb3J0IHNwYWNlIHNlcGFyYXRlZCBjbGFzcyBuYW1lcyBge2NvbXBvc2VzOiAnZm9vIGJhcid9YFxuXG5cbiAgaWYgKGNsYXNzTmFtZS5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgIHJldHVybiByZWdpc3RlckNsYXNzKHJ1bGUsIGNsYXNzTmFtZS5zcGxpdCgnICcpKTtcbiAgfVxuXG4gIHZhciBfcmVmID0gcnVsZS5vcHRpb25zLFxuICAgICAgcGFyZW50ID0gX3JlZi5wYXJlbnQ7IC8vIEl0IGlzIGEgcmVmIHRvIGEgbG9jYWwgcnVsZS5cblxuICBpZiAoY2xhc3NOYW1lWzBdID09PSAnJCcpIHtcbiAgICB2YXIgcmVmUnVsZSA9IHBhcmVudC5nZXRSdWxlKGNsYXNzTmFtZS5zdWJzdHIoMSkpO1xuXG4gICAgaWYgKCFyZWZSdWxlKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFJlZmVyZW5jZWQgcnVsZSBpcyBub3QgZGVmaW5lZC4gXFxuXCIgKyBydWxlLnRvU3RyaW5nKCkpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChyZWZSdWxlID09PSBydWxlKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIEN5Y2xpYyBjb21wb3NpdGlvbiBkZXRlY3RlZC4gXFxuXCIgKyBydWxlLnRvU3RyaW5nKCkpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHBhcmVudC5jbGFzc2VzW3J1bGUua2V5XSArPSBcIiBcIiArIHBhcmVudC5jbGFzc2VzW3JlZlJ1bGUua2V5XTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHBhcmVudC5jbGFzc2VzW3J1bGUua2V5XSArPSBcIiBcIiArIGNsYXNzTmFtZTtcbiAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIENvbnZlcnQgY29tcG9zZSBwcm9wZXJ0eSB0byBhZGRpdGlvbmFsIGNsYXNzLCByZW1vdmUgcHJvcGVydHkgZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24ganNzQ29tcG9zZSgpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAoISgnY29tcG9zZXMnIGluIHN0eWxlKSkgcmV0dXJuIHN0eWxlO1xuICAgIHJlZ2lzdGVyQ2xhc3MocnVsZSwgc3R5bGUuY29tcG9zZXMpOyAvLyBSZW1vdmUgY29tcG9zZXMgcHJvcGVydHkgdG8gcHJldmVudCBpbmZpbml0ZSBsb29wLlxuXG4gICAgZGVsZXRlIHN0eWxlLmNvbXBvc2VzO1xuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc0NvbXBvc2U7XG4iLCJpbXBvcnQgeyBoYXNDU1NUT01TdXBwb3J0IH0gZnJvbSAnanNzJztcblxudmFyIHB4ID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MucHggOiAncHgnO1xudmFyIG1zID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MubXMgOiAnbXMnO1xudmFyIHBlcmNlbnQgPSBoYXNDU1NUT01TdXBwb3J0ICYmIENTUyA/IENTUy5wZXJjZW50IDogJyUnO1xuLyoqXG4gKiBHZW5lcmF0ZWQganNzLXBsdWdpbi1kZWZhdWx0LXVuaXQgQ1NTIHByb3BlcnR5IHVuaXRzXG4gKlxuICogQHR5cGUgb2JqZWN0XG4gKi9cblxudmFyIGRlZmF1bHRVbml0cyA9IHtcbiAgLy8gQW5pbWF0aW9uIHByb3BlcnRpZXNcbiAgJ2FuaW1hdGlvbi1kZWxheSc6IG1zLFxuICAnYW5pbWF0aW9uLWR1cmF0aW9uJzogbXMsXG4gIC8vIEJhY2tncm91bmQgcHJvcGVydGllc1xuICAnYmFja2dyb3VuZC1wb3NpdGlvbic6IHB4LFxuICAnYmFja2dyb3VuZC1wb3NpdGlvbi14JzogcHgsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uLXknOiBweCxcbiAgJ2JhY2tncm91bmQtc2l6ZSc6IHB4LFxuICAvLyBCb3JkZXIgUHJvcGVydGllc1xuICBib3JkZXI6IHB4LFxuICAnYm9yZGVyLWJvdHRvbSc6IHB4LFxuICAnYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1ib3R0b20td2lkdGgnOiBweCxcbiAgJ2JvcmRlci1sZWZ0JzogcHgsXG4gICdib3JkZXItbGVmdC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXJpZ2h0JzogcHgsXG4gICdib3JkZXItcmlnaHQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci10b3AnOiBweCxcbiAgJ2JvcmRlci10b3AtbGVmdC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci10b3AtcmlnaHQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItdG9wLXdpZHRoJzogcHgsXG4gICdib3JkZXItd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1ibG9jayc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLWVuZCc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLWVuZC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLXN0YXJ0JzogcHgsXG4gICdib3JkZXItYmxvY2stc3RhcnQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1ibG9jay13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWlubGluZSc6IHB4LFxuICAnYm9yZGVyLWlubGluZS1lbmQnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUtZW5kLXdpZHRoJzogcHgsXG4gICdib3JkZXItaW5saW5lLXN0YXJ0JzogcHgsXG4gICdib3JkZXItaW5saW5lLXN0YXJ0LXdpZHRoJzogcHgsXG4gICdib3JkZXItaW5saW5lLXdpZHRoJzogcHgsXG4gICdib3JkZXItc3RhcnQtc3RhcnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItc3RhcnQtZW5kLXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWVuZC1zdGFydC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1lbmQtZW5kLXJhZGl1cyc6IHB4LFxuICAvLyBNYXJnaW4gcHJvcGVydGllc1xuICBtYXJnaW46IHB4LFxuICAnbWFyZ2luLWJvdHRvbSc6IHB4LFxuICAnbWFyZ2luLWxlZnQnOiBweCxcbiAgJ21hcmdpbi1yaWdodCc6IHB4LFxuICAnbWFyZ2luLXRvcCc6IHB4LFxuICAnbWFyZ2luLWJsb2NrJzogcHgsXG4gICdtYXJnaW4tYmxvY2stZW5kJzogcHgsXG4gICdtYXJnaW4tYmxvY2stc3RhcnQnOiBweCxcbiAgJ21hcmdpbi1pbmxpbmUnOiBweCxcbiAgJ21hcmdpbi1pbmxpbmUtZW5kJzogcHgsXG4gICdtYXJnaW4taW5saW5lLXN0YXJ0JzogcHgsXG4gIC8vIFBhZGRpbmcgcHJvcGVydGllc1xuICBwYWRkaW5nOiBweCxcbiAgJ3BhZGRpbmctYm90dG9tJzogcHgsXG4gICdwYWRkaW5nLWxlZnQnOiBweCxcbiAgJ3BhZGRpbmctcmlnaHQnOiBweCxcbiAgJ3BhZGRpbmctdG9wJzogcHgsXG4gICdwYWRkaW5nLWJsb2NrJzogcHgsXG4gICdwYWRkaW5nLWJsb2NrLWVuZCc6IHB4LFxuICAncGFkZGluZy1ibG9jay1zdGFydCc6IHB4LFxuICAncGFkZGluZy1pbmxpbmUnOiBweCxcbiAgJ3BhZGRpbmctaW5saW5lLWVuZCc6IHB4LFxuICAncGFkZGluZy1pbmxpbmUtc3RhcnQnOiBweCxcbiAgLy8gTWFzayBwcm9wZXJ0aWVzXG4gICdtYXNrLXBvc2l0aW9uLXgnOiBweCxcbiAgJ21hc2stcG9zaXRpb24teSc6IHB4LFxuICAnbWFzay1zaXplJzogcHgsXG4gIC8vIFdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICBoZWlnaHQ6IHB4LFxuICB3aWR0aDogcHgsXG4gICdtaW4taGVpZ2h0JzogcHgsXG4gICdtYXgtaGVpZ2h0JzogcHgsXG4gICdtaW4td2lkdGgnOiBweCxcbiAgJ21heC13aWR0aCc6IHB4LFxuICAvLyBQb3NpdGlvbiBwcm9wZXJ0aWVzXG4gIGJvdHRvbTogcHgsXG4gIGxlZnQ6IHB4LFxuICB0b3A6IHB4LFxuICByaWdodDogcHgsXG4gIGluc2V0OiBweCxcbiAgJ2luc2V0LWJsb2NrJzogcHgsXG4gICdpbnNldC1ibG9jay1lbmQnOiBweCxcbiAgJ2luc2V0LWJsb2NrLXN0YXJ0JzogcHgsXG4gICdpbnNldC1pbmxpbmUnOiBweCxcbiAgJ2luc2V0LWlubGluZS1lbmQnOiBweCxcbiAgJ2luc2V0LWlubGluZS1zdGFydCc6IHB4LFxuICAvLyBTaGFkb3cgcHJvcGVydGllc1xuICAnYm94LXNoYWRvdyc6IHB4LFxuICAndGV4dC1zaGFkb3cnOiBweCxcbiAgLy8gQ29sdW1uIHByb3BlcnRpZXNcbiAgJ2NvbHVtbi1nYXAnOiBweCxcbiAgJ2NvbHVtbi1ydWxlJzogcHgsXG4gICdjb2x1bW4tcnVsZS13aWR0aCc6IHB4LFxuICAnY29sdW1uLXdpZHRoJzogcHgsXG4gIC8vIEZvbnQgYW5kIHRleHQgcHJvcGVydGllc1xuICAnZm9udC1zaXplJzogcHgsXG4gICdmb250LXNpemUtZGVsdGEnOiBweCxcbiAgJ2xldHRlci1zcGFjaW5nJzogcHgsXG4gICd0ZXh0LWRlY29yYXRpb24tdGhpY2tuZXNzJzogcHgsXG4gICd0ZXh0LWluZGVudCc6IHB4LFxuICAndGV4dC1zdHJva2UnOiBweCxcbiAgJ3RleHQtc3Ryb2tlLXdpZHRoJzogcHgsXG4gICd3b3JkLXNwYWNpbmcnOiBweCxcbiAgLy8gTW90aW9uIHByb3BlcnRpZXNcbiAgbW90aW9uOiBweCxcbiAgJ21vdGlvbi1vZmZzZXQnOiBweCxcbiAgLy8gT3V0bGluZSBwcm9wZXJ0aWVzXG4gIG91dGxpbmU6IHB4LFxuICAnb3V0bGluZS1vZmZzZXQnOiBweCxcbiAgJ291dGxpbmUtd2lkdGgnOiBweCxcbiAgLy8gUGVyc3BlY3RpdmUgcHJvcGVydGllc1xuICBwZXJzcGVjdGl2ZTogcHgsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teSc6IHBlcmNlbnQsXG4gIC8vIFRyYW5zZm9ybSBwcm9wZXJ0aWVzXG4gICd0cmFuc2Zvcm0tb3JpZ2luJzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXknOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi16JzogcGVyY2VudCxcbiAgLy8gVHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gICd0cmFuc2l0aW9uLWRlbGF5JzogbXMsXG4gICd0cmFuc2l0aW9uLWR1cmF0aW9uJzogbXMsXG4gIC8vIEFsaWdubWVudCBwcm9wZXJ0aWVzXG4gICd2ZXJ0aWNhbC1hbGlnbic6IHB4LFxuICAnZmxleC1iYXNpcyc6IHB4LFxuICAvLyBTb21lIHJhbmRvbSBwcm9wZXJ0aWVzXG4gICdzaGFwZS1tYXJnaW4nOiBweCxcbiAgc2l6ZTogcHgsXG4gIGdhcDogcHgsXG4gIC8vIEdyaWQgcHJvcGVydGllc1xuICBncmlkOiBweCxcbiAgJ2dyaWQtZ2FwJzogcHgsXG4gICdyb3ctZ2FwJzogcHgsXG4gICdncmlkLXJvdy1nYXAnOiBweCxcbiAgJ2dyaWQtY29sdW1uLWdhcCc6IHB4LFxuICAnZ3JpZC10ZW1wbGF0ZS1yb3dzJzogcHgsXG4gICdncmlkLXRlbXBsYXRlLWNvbHVtbnMnOiBweCxcbiAgJ2dyaWQtYXV0by1yb3dzJzogcHgsXG4gICdncmlkLWF1dG8tY29sdW1ucyc6IHB4LFxuICAvLyBOb3QgZXhpc3RpbmcgcHJvcGVydGllcy5cbiAgLy8gVXNlZCB0byBhdm9pZCBpc3N1ZXMgd2l0aCBqc3MtcGx1Z2luLWV4cGFuZCBpbnRlZ3JhdGlvbi5cbiAgJ2JveC1zaGFkb3cteCc6IHB4LFxuICAnYm94LXNoYWRvdy15JzogcHgsXG4gICdib3gtc2hhZG93LWJsdXInOiBweCxcbiAgJ2JveC1zaGFkb3ctc3ByZWFkJzogcHgsXG4gICdmb250LWxpbmUtaGVpZ2h0JzogcHgsXG4gICd0ZXh0LXNoYWRvdy14JzogcHgsXG4gICd0ZXh0LXNoYWRvdy15JzogcHgsXG4gICd0ZXh0LXNoYWRvdy1ibHVyJzogcHhcbn07XG5cbi8qKlxuICogQ2xvbmVzIHRoZSBvYmplY3QgYW5kIGFkZHMgYSBjYW1lbCBjYXNlZCBwcm9wZXJ0eSB2ZXJzaW9uLlxuICovXG5mdW5jdGlvbiBhZGRDYW1lbENhc2VkVmVyc2lvbihvYmopIHtcbiAgdmFyIHJlZ0V4cCA9IC8oLVthLXpdKS9nO1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgICByZXR1cm4gc3RyWzFdLnRvVXBwZXJDYXNlKCk7XG4gIH07XG5cbiAgdmFyIG5ld09iaiA9IHt9O1xuXG4gIGZvciAodmFyIF9rZXkgaW4gb2JqKSB7XG4gICAgbmV3T2JqW19rZXldID0gb2JqW19rZXldO1xuICAgIG5ld09ialtfa2V5LnJlcGxhY2UocmVnRXhwLCByZXBsYWNlKV0gPSBvYmpbX2tleV07XG4gIH1cblxuICByZXR1cm4gbmV3T2JqO1xufVxuXG52YXIgdW5pdHMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihkZWZhdWx0VW5pdHMpO1xuLyoqXG4gKiBSZWN1cnNpdmUgZGVlcCBzdHlsZSBwYXNzaW5nIGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHZhbHVlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlW2ldID0gaXRlcmF0ZShwcm9wLCB2YWx1ZVtpXSwgb3B0aW9ucyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAocHJvcCA9PT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgIGZvciAodmFyIGlubmVyUHJvcCBpbiB2YWx1ZSkge1xuICAgICAgICB2YWx1ZVtpbm5lclByb3BdID0gaXRlcmF0ZShpbm5lclByb3AsIHZhbHVlW2lubmVyUHJvcF0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBfaW5uZXJQcm9wIGluIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlW19pbm5lclByb3BdID0gaXRlcmF0ZShwcm9wICsgXCItXCIgKyBfaW5uZXJQcm9wLCB2YWx1ZVtfaW5uZXJQcm9wXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG5cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbHVlKSA9PT0gZmFsc2UpIHtcbiAgICB2YXIgdW5pdCA9IG9wdGlvbnNbcHJvcF0gfHwgdW5pdHNbcHJvcF07IC8vIEFkZCB0aGUgdW5pdCBpZiBhdmFpbGFibGUsIGV4Y2VwdCBmb3IgdGhlIHNwZWNpYWwgY2FzZSBvZiAwcHguXG5cbiAgICBpZiAodW5pdCAmJiAhKHZhbHVlID09PSAwICYmIHVuaXQgPT09IHB4KSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB1bml0ID09PSAnZnVuY3Rpb24nID8gdW5pdCh2YWx1ZSkudG9TdHJpbmcoKSA6IFwiXCIgKyB2YWx1ZSArIHVuaXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIEFkZCB1bml0IHRvIG51bWVyaWMgdmFsdWVzLlxuICovXG5cblxuZnVuY3Rpb24gZGVmYXVsdFVuaXQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIGNhbWVsQ2FzZWRPcHRpb25zID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob3B0aW9ucyk7XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICBzdHlsZVtwcm9wXSA9IGl0ZXJhdGUocHJvcCwgc3R5bGVbcHJvcF0sIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wKSB7XG4gICAgcmV0dXJuIGl0ZXJhdGUocHJvcCwgdmFsdWUsIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFVuaXQ7XG4iLCIvKipcbiAqIEEgc2NoZW1lIGZvciBjb252ZXJ0aW5nIHByb3BlcnRpZXMgZnJvbSBhcnJheSB0byByZWd1bGFyIHN0eWxlLlxuICogQWxsIHByb3BlcnRpZXMgbGlzdGVkIGJlbG93IHdpbGwgYmUgdHJhbnNmb3JtZWQgdG8gYSBzdHJpbmcgc2VwYXJhdGVkIGJ5IHNwYWNlLlxuICovXG52YXIgcHJvcEFycmF5ID0ge1xuICAnYmFja2dyb3VuZC1zaXplJzogdHJ1ZSxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24nOiB0cnVlLFxuICBib3JkZXI6IHRydWUsXG4gICdib3JkZXItYm90dG9tJzogdHJ1ZSxcbiAgJ2JvcmRlci1sZWZ0JzogdHJ1ZSxcbiAgJ2JvcmRlci10b3AnOiB0cnVlLFxuICAnYm9yZGVyLXJpZ2h0JzogdHJ1ZSxcbiAgJ2JvcmRlci1yYWRpdXMnOiB0cnVlLFxuICAnYm9yZGVyLWltYWdlJzogdHJ1ZSxcbiAgJ2JvcmRlci13aWR0aCc6IHRydWUsXG4gICdib3JkZXItc3R5bGUnOiB0cnVlLFxuICAnYm9yZGVyLWNvbG9yJzogdHJ1ZSxcbiAgJ2JveC1zaGFkb3cnOiB0cnVlLFxuICBmbGV4OiB0cnVlLFxuICBtYXJnaW46IHRydWUsXG4gIHBhZGRpbmc6IHRydWUsXG4gIG91dGxpbmU6IHRydWUsXG4gICd0cmFuc2Zvcm0tb3JpZ2luJzogdHJ1ZSxcbiAgdHJhbnNmb3JtOiB0cnVlLFxuICB0cmFuc2l0aW9uOiB0cnVlXG4gIC8qKlxuICAgKiBBIHNjaGVtZSBmb3IgY29udmVydGluZyBhcnJheXMgdG8gcmVndWxhciBzdHlsZXMgaW5zaWRlIG9mIG9iamVjdHMuXG4gICAqIEZvciBlLmcuOiBcIntwb3NpdGlvbjogWzAsIDBdfVwiID0+IFwiYmFja2dyb3VuZC1wb3NpdGlvbjogMCAwO1wiLlxuICAgKi9cblxufTtcbnZhciBwcm9wQXJyYXlJbk9iaiA9IHtcbiAgcG9zaXRpb246IHRydWUsXG4gIC8vIGJhY2tncm91bmQtcG9zaXRpb25cbiAgc2l6ZTogdHJ1ZSAvLyBiYWNrZ3JvdW5kLXNpemVcblxuICAvKipcbiAgICogQSBzY2hlbWUgZm9yIHBhcnNpbmcgYW5kIGJ1aWxkaW5nIGNvcnJlY3Qgc3R5bGVzIGZyb20gcGFzc2VkIG9iamVjdHMuXG4gICAqL1xuXG59O1xudmFyIHByb3BPYmogPSB7XG4gIHBhZGRpbmc6IHtcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDBcbiAgfSxcbiAgbWFyZ2luOiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH0sXG4gIGJhY2tncm91bmQ6IHtcbiAgICBhdHRhY2htZW50OiBudWxsLFxuICAgIGNvbG9yOiBudWxsLFxuICAgIGltYWdlOiBudWxsLFxuICAgIHBvc2l0aW9uOiBudWxsLFxuICAgIHJlcGVhdDogbnVsbFxuICB9LFxuICBib3JkZXI6IHtcbiAgICB3aWR0aDogbnVsbCxcbiAgICBzdHlsZTogbnVsbCxcbiAgICBjb2xvcjogbnVsbFxuICB9LFxuICAnYm9yZGVyLXRvcCc6IHtcbiAgICB3aWR0aDogbnVsbCxcbiAgICBzdHlsZTogbnVsbCxcbiAgICBjb2xvcjogbnVsbFxuICB9LFxuICAnYm9yZGVyLXJpZ2h0Jzoge1xuICAgIHdpZHRoOiBudWxsLFxuICAgIHN0eWxlOiBudWxsLFxuICAgIGNvbG9yOiBudWxsXG4gIH0sXG4gICdib3JkZXItYm90dG9tJzoge1xuICAgIHdpZHRoOiBudWxsLFxuICAgIHN0eWxlOiBudWxsLFxuICAgIGNvbG9yOiBudWxsXG4gIH0sXG4gICdib3JkZXItbGVmdCc6IHtcbiAgICB3aWR0aDogbnVsbCxcbiAgICBzdHlsZTogbnVsbCxcbiAgICBjb2xvcjogbnVsbFxuICB9LFxuICBvdXRsaW5lOiB7XG4gICAgd2lkdGg6IG51bGwsXG4gICAgc3R5bGU6IG51bGwsXG4gICAgY29sb3I6IG51bGxcbiAgfSxcbiAgJ2xpc3Qtc3R5bGUnOiB7XG4gICAgdHlwZTogbnVsbCxcbiAgICBwb3NpdGlvbjogbnVsbCxcbiAgICBpbWFnZTogbnVsbFxuICB9LFxuICB0cmFuc2l0aW9uOiB7XG4gICAgcHJvcGVydHk6IG51bGwsXG4gICAgZHVyYXRpb246IG51bGwsXG4gICAgJ3RpbWluZy1mdW5jdGlvbic6IG51bGwsXG4gICAgdGltaW5nRnVuY3Rpb246IG51bGwsXG4gICAgLy8gTmVlZGVkIGZvciBhdm9pZGluZyBjb21pbGF0aW9uIGlzc3VlcyB3aXRoIGpzcy1wbHVnaW4tY2FtZWwtY2FzZVxuICAgIGRlbGF5OiBudWxsXG4gIH0sXG4gIGFuaW1hdGlvbjoge1xuICAgIG5hbWU6IG51bGwsXG4gICAgZHVyYXRpb246IG51bGwsXG4gICAgJ3RpbWluZy1mdW5jdGlvbic6IG51bGwsXG4gICAgdGltaW5nRnVuY3Rpb246IG51bGwsXG4gICAgLy8gTmVlZGVkIHRvIGF2b2lkIGNvbXBpbGF0aW9uIGlzc3VlcyB3aXRoIGpzcy1wbHVnaW4tY2FtZWwtY2FzZVxuICAgIGRlbGF5OiBudWxsLFxuICAgICdpdGVyYXRpb24tY291bnQnOiBudWxsLFxuICAgIGl0ZXJhdGlvbkNvdW50OiBudWxsLFxuICAgIC8vIE5lZWRlZCB0byBhdm9pZCBjb21waWxhdGlvbiBpc3N1ZXMgd2l0aCBqc3MtcGx1Z2luLWNhbWVsLWNhc2VcbiAgICBkaXJlY3Rpb246IG51bGwsXG4gICAgJ2ZpbGwtbW9kZSc6IG51bGwsXG4gICAgZmlsbE1vZGU6IG51bGwsXG4gICAgLy8gTmVlZGVkIHRvIGF2b2lkIGNvbXBpbGF0aW9uIGlzc3VlcyB3aXRoIGpzcy1wbHVnaW4tY2FtZWwtY2FzZVxuICAgICdwbGF5LXN0YXRlJzogbnVsbCxcbiAgICBwbGF5U3RhdGU6IG51bGwgLy8gTmVlZGVkIHRvIGF2b2lkIGNvbXBpbGF0aW9uIGlzc3VlcyB3aXRoIGpzcy1wbHVnaW4tY2FtZWwtY2FzZVxuXG4gIH0sXG4gICdib3gtc2hhZG93Jzoge1xuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgICBibHVyOiAwLFxuICAgIHNwcmVhZDogMCxcbiAgICBjb2xvcjogbnVsbCxcbiAgICBpbnNldDogbnVsbFxuICB9LFxuICAndGV4dC1zaGFkb3cnOiB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIGJsdXI6IG51bGwsXG4gICAgY29sb3I6IG51bGxcbiAgfVxuICAvKipcbiAgICogQSBzY2hlbWUgZm9yIGNvbnZlcnRpbmcgbm9uLXN0YW5kYXJ0IHByb3BlcnRpZXMgaW5zaWRlIG9iamVjdC5cbiAgICogRm9yIGUuZy46IGluY2x1ZGUgJ2JvcmRlci1yYWRpdXMnIHByb3BlcnR5IGluc2lkZSAnYm9yZGVyJyBvYmplY3QuXG4gICAqL1xuXG59O1xudmFyIGN1c3RvbVByb3BPYmogPSB7XG4gIGJvcmRlcjoge1xuICAgIHJhZGl1czogJ2JvcmRlci1yYWRpdXMnLFxuICAgIGltYWdlOiAnYm9yZGVyLWltYWdlJyxcbiAgICB3aWR0aDogJ2JvcmRlci13aWR0aCcsXG4gICAgc3R5bGU6ICdib3JkZXItc3R5bGUnLFxuICAgIGNvbG9yOiAnYm9yZGVyLWNvbG9yJ1xuICB9LFxuICAnYm9yZGVyLWJvdHRvbSc6IHtcbiAgICB3aWR0aDogJ2JvcmRlci1ib3R0b20td2lkdGgnLFxuICAgIHN0eWxlOiAnYm9yZGVyLWJvdHRvbS1zdHlsZScsXG4gICAgY29sb3I6ICdib3JkZXItYm90dG9tLWNvbG9yJ1xuICB9LFxuICAnYm9yZGVyLXRvcCc6IHtcbiAgICB3aWR0aDogJ2JvcmRlci10b3Atd2lkdGgnLFxuICAgIHN0eWxlOiAnYm9yZGVyLXRvcC1zdHlsZScsXG4gICAgY29sb3I6ICdib3JkZXItdG9wLWNvbG9yJ1xuICB9LFxuICAnYm9yZGVyLWxlZnQnOiB7XG4gICAgd2lkdGg6ICdib3JkZXItbGVmdC13aWR0aCcsXG4gICAgc3R5bGU6ICdib3JkZXItbGVmdC1zdHlsZScsXG4gICAgY29sb3I6ICdib3JkZXItbGVmdC1jb2xvcidcbiAgfSxcbiAgJ2JvcmRlci1yaWdodCc6IHtcbiAgICB3aWR0aDogJ2JvcmRlci1yaWdodC13aWR0aCcsXG4gICAgc3R5bGU6ICdib3JkZXItcmlnaHQtc3R5bGUnLFxuICAgIGNvbG9yOiAnYm9yZGVyLXJpZ2h0LWNvbG9yJ1xuICB9LFxuICBiYWNrZ3JvdW5kOiB7XG4gICAgc2l6ZTogJ2JhY2tncm91bmQtc2l6ZScsXG4gICAgaW1hZ2U6ICdiYWNrZ3JvdW5kLWltYWdlJ1xuICB9LFxuICBmb250OiB7XG4gICAgc3R5bGU6ICdmb250LXN0eWxlJyxcbiAgICB2YXJpYW50OiAnZm9udC12YXJpYW50JyxcbiAgICB3ZWlnaHQ6ICdmb250LXdlaWdodCcsXG4gICAgc3RyZXRjaDogJ2ZvbnQtc3RyZXRjaCcsXG4gICAgc2l6ZTogJ2ZvbnQtc2l6ZScsXG4gICAgZmFtaWx5OiAnZm9udC1mYW1pbHknLFxuICAgIGxpbmVIZWlnaHQ6ICdsaW5lLWhlaWdodCcsXG4gICAgLy8gTmVlZGVkIHRvIGF2b2lkIGNvbXBpbGF0aW9uIGlzc3VlcyB3aXRoIGpzcy1wbHVnaW4tY2FtZWwtY2FzZVxuICAgICdsaW5lLWhlaWdodCc6ICdsaW5lLWhlaWdodCdcbiAgfSxcbiAgZmxleDoge1xuICAgIGdyb3c6ICdmbGV4LWdyb3cnLFxuICAgIGJhc2lzOiAnZmxleC1iYXNpcycsXG4gICAgZGlyZWN0aW9uOiAnZmxleC1kaXJlY3Rpb24nLFxuICAgIHdyYXA6ICdmbGV4LXdyYXAnLFxuICAgIGZsb3c6ICdmbGV4LWZsb3cnLFxuICAgIHNocmluazogJ2ZsZXgtc2hyaW5rJ1xuICB9LFxuICBhbGlnbjoge1xuICAgIHNlbGY6ICdhbGlnbi1zZWxmJyxcbiAgICBpdGVtczogJ2FsaWduLWl0ZW1zJyxcbiAgICBjb250ZW50OiAnYWxpZ24tY29udGVudCdcbiAgfSxcbiAgZ3JpZDoge1xuICAgICd0ZW1wbGF0ZS1jb2x1bW5zJzogJ2dyaWQtdGVtcGxhdGUtY29sdW1ucycsXG4gICAgdGVtcGxhdGVDb2x1bW5zOiAnZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zJyxcbiAgICAndGVtcGxhdGUtcm93cyc6ICdncmlkLXRlbXBsYXRlLXJvd3MnLFxuICAgIHRlbXBsYXRlUm93czogJ2dyaWQtdGVtcGxhdGUtcm93cycsXG4gICAgJ3RlbXBsYXRlLWFyZWFzJzogJ2dyaWQtdGVtcGxhdGUtYXJlYXMnLFxuICAgIHRlbXBsYXRlQXJlYXM6ICdncmlkLXRlbXBsYXRlLWFyZWFzJyxcbiAgICB0ZW1wbGF0ZTogJ2dyaWQtdGVtcGxhdGUnLFxuICAgICdhdXRvLWNvbHVtbnMnOiAnZ3JpZC1hdXRvLWNvbHVtbnMnLFxuICAgIGF1dG9Db2x1bW5zOiAnZ3JpZC1hdXRvLWNvbHVtbnMnLFxuICAgICdhdXRvLXJvd3MnOiAnZ3JpZC1hdXRvLXJvd3MnLFxuICAgIGF1dG9Sb3dzOiAnZ3JpZC1hdXRvLXJvd3MnLFxuICAgICdhdXRvLWZsb3cnOiAnZ3JpZC1hdXRvLWZsb3cnLFxuICAgIGF1dG9GbG93OiAnZ3JpZC1hdXRvLWZsb3cnLFxuICAgIHJvdzogJ2dyaWQtcm93JyxcbiAgICBjb2x1bW46ICdncmlkLWNvbHVtbicsXG4gICAgJ3Jvdy1zdGFydCc6ICdncmlkLXJvdy1zdGFydCcsXG4gICAgcm93U3RhcnQ6ICdncmlkLXJvdy1zdGFydCcsXG4gICAgJ3Jvdy1lbmQnOiAnZ3JpZC1yb3ctZW5kJyxcbiAgICByb3dFbmQ6ICdncmlkLXJvdy1lbmQnLFxuICAgICdjb2x1bW4tc3RhcnQnOiAnZ3JpZC1jb2x1bW4tc3RhcnQnLFxuICAgIGNvbHVtblN0YXJ0OiAnZ3JpZC1jb2x1bW4tc3RhcnQnLFxuICAgICdjb2x1bW4tZW5kJzogJ2dyaWQtY29sdW1uLWVuZCcsXG4gICAgY29sdW1uRW5kOiAnZ3JpZC1jb2x1bW4tZW5kJyxcbiAgICBhcmVhOiAnZ3JpZC1hcmVhJyxcbiAgICBnYXA6ICdncmlkLWdhcCcsXG4gICAgJ3Jvdy1nYXAnOiAnZ3JpZC1yb3ctZ2FwJyxcbiAgICByb3dHYXA6ICdncmlkLXJvdy1nYXAnLFxuICAgICdjb2x1bW4tZ2FwJzogJ2dyaWQtY29sdW1uLWdhcCcsXG4gICAgY29sdW1uR2FwOiAnZ3JpZC1jb2x1bW4tZ2FwJ1xuICB9XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xuXG4vKipcbiAqIE1hcCB2YWx1ZXMgYnkgZ2l2ZW4gcHJvcC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBvZiB2YWx1ZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcmlnaW5hbCBwcm9wZXJ0eVxuICogQHBhcmFtIHtTdHJpbmd9IG9yaWdpbmFsIHJ1bGVcbiAqIEByZXR1cm4ge1N0cmluZ30gbWFwcGVkIHZhbHVlc1xuICovXG5mdW5jdGlvbiBtYXBWYWx1ZXNCeVByb3AodmFsdWUsIHByb3AsIHJ1bGUpIHtcbiAgcmV0dXJuIHZhbHVlLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiBvYmplY3RUb0FycmF5KGl0ZW0sIHByb3AsIHJ1bGUsIGZhbHNlLCB0cnVlKTtcbiAgfSk7XG59XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgdG8gbmVzdGVkIGFycmF5LCBpZiBuZWVkZWRcbiAqL1xuXG5cbmZ1bmN0aW9uIHByb2Nlc3NBcnJheSh2YWx1ZSwgcHJvcCwgc2NoZW1lLCBydWxlKSB7XG4gIGlmIChzY2hlbWVbcHJvcF0gPT0gbnVsbCkgcmV0dXJuIHZhbHVlO1xuICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlWzBdKSkgcmV0dXJuIHByb2Nlc3NBcnJheSh2YWx1ZVswXSwgcHJvcCwgc2NoZW1lLCBydWxlKTtcblxuICBpZiAodHlwZW9mIHZhbHVlWzBdID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBtYXBWYWx1ZXNCeVByb3AodmFsdWUsIHByb3AsIHJ1bGUpO1xuICB9XG5cbiAgcmV0dXJuIFt2YWx1ZV07XG59XG4vKipcbiAqIENvbnZlcnQgb2JqZWN0IHRvIGFycmF5LlxuICovXG5cblxuZnVuY3Rpb24gb2JqZWN0VG9BcnJheSh2YWx1ZSwgcHJvcCwgcnVsZSwgaXNGYWxsYmFjaywgaXNJbkFycmF5KSB7XG4gIGlmICghKHByb3BPYmpbcHJvcF0gfHwgY3VzdG9tUHJvcE9ialtwcm9wXSkpIHJldHVybiBbXTtcbiAgdmFyIHJlc3VsdCA9IFtdOyAvLyBDaGVjayBpZiBleGlzdHMgYW55IG5vbi1zdGFuZGFyZCBwcm9wZXJ0eVxuXG4gIGlmIChjdXN0b21Qcm9wT2JqW3Byb3BdKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdmFsdWUgPSBjdXN0b21Qcm9wc1RvU3R5bGUodmFsdWUsIHJ1bGUsIGN1c3RvbVByb3BPYmpbcHJvcF0sIGlzRmFsbGJhY2spO1xuICB9IC8vIFBhc3MgdGhyb3VnaHQgYWxsIHN0YW5kYXJ0IHByb3BzXG5cblxuICBpZiAoT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCkge1xuICAgIGZvciAodmFyIGJhc2VQcm9wIGluIHByb3BPYmpbcHJvcF0pIHtcbiAgICAgIGlmICh2YWx1ZVtiYXNlUHJvcF0pIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVbYmFzZVByb3BdKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHByb3BBcnJheUluT2JqW2Jhc2VQcm9wXSA9PT0gbnVsbCA/IHZhbHVlW2Jhc2VQcm9wXSA6IHZhbHVlW2Jhc2VQcm9wXS5qb2luKCcgJykpO1xuICAgICAgICB9IGVsc2UgcmVzdWx0LnB1c2godmFsdWVbYmFzZVByb3BdKTtcblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gLy8gQWRkIGRlZmF1bHQgdmFsdWUgZnJvbSBwcm9wcyBjb25maWcuXG5cblxuICAgICAgaWYgKHByb3BPYmpbcHJvcF1bYmFzZVByb3BdICE9IG51bGwpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocHJvcE9ialtwcm9wXVtiYXNlUHJvcF0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghcmVzdWx0Lmxlbmd0aCB8fCBpc0luQXJyYXkpIHJldHVybiByZXN1bHQ7XG4gIHJldHVybiBbcmVzdWx0XTtcbn1cbi8qKlxuICogQ29udmVydCBjdXN0b20gcHJvcGVydGllcyB2YWx1ZXMgdG8gc3R5bGVzIGFkZGluZyB0aGVtIHRvIHJ1bGUgZGlyZWN0bHlcbiAqL1xuXG5cbmZ1bmN0aW9uIGN1c3RvbVByb3BzVG9TdHlsZSh2YWx1ZSwgcnVsZSwgY3VzdG9tUHJvcHMsIGlzRmFsbGJhY2spIHtcbiAgZm9yICh2YXIgcHJvcCBpbiBjdXN0b21Qcm9wcykge1xuICAgIHZhciBwcm9wTmFtZSA9IGN1c3RvbVByb3BzW3Byb3BdOyAvLyBJZiBjdXJyZW50IHByb3BlcnR5IGRvZXNuJ3QgZXhpc3QgYWxyZWFkeSBpbiBydWxlIC0gYWRkIG5ldyBvbmVcblxuICAgIGlmICh0eXBlb2YgdmFsdWVbcHJvcF0gIT09ICd1bmRlZmluZWQnICYmIChpc0ZhbGxiYWNrIHx8ICFydWxlLnByb3AocHJvcE5hbWUpKSkge1xuICAgICAgdmFyIF9zdHlsZURldGVjdG9yO1xuXG4gICAgICB2YXIgYXBwZW5kZWRWYWx1ZSA9IHN0eWxlRGV0ZWN0b3IoKF9zdHlsZURldGVjdG9yID0ge30sIF9zdHlsZURldGVjdG9yW3Byb3BOYW1lXSA9IHZhbHVlW3Byb3BdLCBfc3R5bGVEZXRlY3RvciksIHJ1bGUpW3Byb3BOYW1lXTsgLy8gQWRkIHN0eWxlIGRpcmVjdGx5IGluIHJ1bGVcblxuICAgICAgaWYgKGlzRmFsbGJhY2spIHJ1bGUuc3R5bGUuZmFsbGJhY2tzW3Byb3BOYW1lXSA9IGFwcGVuZGVkVmFsdWU7ZWxzZSBydWxlLnN0eWxlW3Byb3BOYW1lXSA9IGFwcGVuZGVkVmFsdWU7XG4gICAgfSAvLyBEZWxldGUgY29udmVydGVkIHByb3BlcnR5IHRvIGF2b2lkIGRvdWJsZSBjb252ZXJ0aW5nXG5cblxuICAgIGRlbGV0ZSB2YWx1ZVtwcm9wXTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cbi8qKlxuICogRGV0ZWN0IGlmIGEgc3R5bGUgbmVlZHMgdG8gYmUgY29udmVydGVkLlxuICovXG5cblxuZnVuY3Rpb24gc3R5bGVEZXRlY3RvcihzdHlsZSwgcnVsZSwgaXNGYWxsYmFjaykge1xuICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIC8vIENoZWNrIGRvdWJsZSBhcnJheXMgdG8gYXZvaWQgcmVjdXJzaW9uLlxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlWzBdKSkge1xuICAgICAgICBpZiAocHJvcCA9PT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3R5bGUuZmFsbGJhY2tzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgc3R5bGUuZmFsbGJhY2tzW2luZGV4XSA9IHN0eWxlRGV0ZWN0b3Ioc3R5bGUuZmFsbGJhY2tzW2luZGV4XSwgcnVsZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZVtwcm9wXSA9IHByb2Nlc3NBcnJheSh2YWx1ZSwgcHJvcCwgcHJvcEFycmF5LCBydWxlKTsgLy8gQXZvaWQgY3JlYXRpbmcgcHJvcGVydGllcyB3aXRoIGVtcHR5IHZhbHVlc1xuXG4gICAgICAgIGlmICghc3R5bGVbcHJvcF0ubGVuZ3RoKSBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAocHJvcCA9PT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgICAgc3R5bGUuZmFsbGJhY2tzID0gc3R5bGVEZXRlY3RvcihzdHlsZS5mYWxsYmFja3MsIHJ1bGUsIHRydWUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVbcHJvcF0gPSBvYmplY3RUb0FycmF5KHZhbHVlLCBwcm9wLCBydWxlLCBpc0ZhbGxiYWNrKTsgLy8gQXZvaWQgY3JlYXRpbmcgcHJvcGVydGllcyB3aXRoIGVtcHR5IHZhbHVlc1xuXG4gICAgICBpZiAoIXN0eWxlW3Byb3BdLmxlbmd0aCkgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgIH0gLy8gTWF5YmUgYSBjb21wdXRlZCB2YWx1ZSByZXN1bHRpbmcgaW4gYW4gZW1wdHkgc3RyaW5nXG4gICAgZWxzZSBpZiAoc3R5bGVbcHJvcF0gPT09ICcnKSBkZWxldGUgc3R5bGVbcHJvcF07XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG4vKipcbiAqIEFkZHMgcG9zc2liaWxpdHkgdG8gd3JpdGUgZXhwYW5kZWQgc3R5bGVzLlxuICovXG5cblxuZnVuY3Rpb24ganNzRXhwYW5kKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmICghc3R5bGUgfHwgcnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHtcbiAgICAgIC8vIFBhc3MgcnVsZXMgb25lIGJ5IG9uZSBhbmQgcmVmb3JtYXQgdGhlbVxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHlsZVtpbmRleF0gPSBzdHlsZURldGVjdG9yKHN0eWxlW2luZGV4XSwgcnVsZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGVEZXRlY3RvcihzdHlsZSwgcnVsZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NFeHBhbmQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgaXNPYmplY3QgPSBmdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShvYmopO1xufTtcblxudmFyIHZhbHVlTnMgPSBcImV4dGVuZEN1cnJWYWx1ZVwiICsgRGF0ZS5ub3coKTtcblxuZnVuY3Rpb24gbWVyZ2VFeHRlbmQoc3R5bGUsIHJ1bGUsIHNoZWV0LCBuZXdTdHlsZSkge1xuICB2YXIgZXh0ZW5kVHlwZSA9IHR5cGVvZiBzdHlsZS5leHRlbmQ7IC8vIEV4dGVuZCB1c2luZyBhIHJ1bGUgbmFtZS5cblxuICBpZiAoZXh0ZW5kVHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIXNoZWV0KSByZXR1cm47XG4gICAgdmFyIHJlZlJ1bGUgPSBzaGVldC5nZXRSdWxlKHN0eWxlLmV4dGVuZCk7XG4gICAgaWYgKCFyZWZSdWxlKSByZXR1cm47XG5cbiAgICBpZiAocmVmUnVsZSA9PT0gcnVsZSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBBIHJ1bGUgdHJpZXMgdG8gZXh0ZW5kIGl0c2VsZiBcXG5cIiArIHJ1bGUudG9TdHJpbmcoKSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IHJlZlJ1bGUub3B0aW9ucy5wYXJlbnQ7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICB2YXIgb3JpZ2luYWxTdHlsZSA9IHBhcmVudC5ydWxlcy5yYXdbc3R5bGUuZXh0ZW5kXTtcbiAgICAgIGV4dGVuZChvcmlnaW5hbFN0eWxlLCBydWxlLCBzaGVldCwgbmV3U3R5bGUpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfSAvLyBFeHRlbmQgdXNpbmcgYW4gYXJyYXkuXG5cblxuICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZS5leHRlbmQpKSB7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0eWxlLmV4dGVuZC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBzaW5nbGVFeHRlbmQgPSBzdHlsZS5leHRlbmRbaW5kZXhdO1xuICAgICAgdmFyIHNpbmdsZVN0eWxlID0gdHlwZW9mIHNpbmdsZUV4dGVuZCA9PT0gJ3N0cmluZycgPyBfZXh0ZW5kcyh7fSwgc3R5bGUsIHtcbiAgICAgICAgZXh0ZW5kOiBzaW5nbGVFeHRlbmRcbiAgICAgIH0pIDogc3R5bGUuZXh0ZW5kW2luZGV4XTtcbiAgICAgIGV4dGVuZChzaW5nbGVTdHlsZSwgcnVsZSwgc2hlZXQsIG5ld1N0eWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0gLy8gRXh0ZW5kIGlzIGEgc3R5bGUgb2JqZWN0LlxuXG5cbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZS5leHRlbmQpIHtcbiAgICBpZiAocHJvcCA9PT0gJ2V4dGVuZCcpIHtcbiAgICAgIGV4dGVuZChzdHlsZS5leHRlbmQuZXh0ZW5kLCBydWxlLCBzaGVldCwgbmV3U3R5bGUpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0KHN0eWxlLmV4dGVuZFtwcm9wXSkpIHtcbiAgICAgIGlmICghKHByb3AgaW4gbmV3U3R5bGUpKSBuZXdTdHlsZVtwcm9wXSA9IHt9O1xuICAgICAgZXh0ZW5kKHN0eWxlLmV4dGVuZFtwcm9wXSwgcnVsZSwgc2hlZXQsIG5ld1N0eWxlW3Byb3BdKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIG5ld1N0eWxlW3Byb3BdID0gc3R5bGUuZXh0ZW5kW3Byb3BdO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlUmVzdChzdHlsZSwgcnVsZSwgc2hlZXQsIG5ld1N0eWxlKSB7XG4gIC8vIENvcHkgYmFzZSBzdHlsZS5cbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgIGlmIChwcm9wID09PSAnZXh0ZW5kJykgY29udGludWU7XG5cbiAgICBpZiAoaXNPYmplY3QobmV3U3R5bGVbcHJvcF0pICYmIGlzT2JqZWN0KHN0eWxlW3Byb3BdKSkge1xuICAgICAgZXh0ZW5kKHN0eWxlW3Byb3BdLCBydWxlLCBzaGVldCwgbmV3U3R5bGVbcHJvcF0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0KHN0eWxlW3Byb3BdKSkge1xuICAgICAgbmV3U3R5bGVbcHJvcF0gPSBleHRlbmQoc3R5bGVbcHJvcF0sIHJ1bGUsIHNoZWV0KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIG5ld1N0eWxlW3Byb3BdID0gc3R5bGVbcHJvcF07XG4gIH1cbn1cbi8qKlxuICogUmVjdXJzaXZlbHkgZXh0ZW5kIHN0eWxlcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGV4dGVuZChzdHlsZSwgcnVsZSwgc2hlZXQsIG5ld1N0eWxlKSB7XG4gIGlmIChuZXdTdHlsZSA9PT0gdm9pZCAwKSB7XG4gICAgbmV3U3R5bGUgPSB7fTtcbiAgfVxuXG4gIG1lcmdlRXh0ZW5kKHN0eWxlLCBydWxlLCBzaGVldCwgbmV3U3R5bGUpO1xuICBtZXJnZVJlc3Qoc3R5bGUsIHJ1bGUsIHNoZWV0LCBuZXdTdHlsZSk7XG4gIHJldHVybiBuZXdTdHlsZTtcbn1cbi8qKlxuICogSGFuZGxlIGBleHRlbmRgIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbmZ1bmN0aW9uIGpzc0V4dGVuZCgpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgaWYgKCdleHRlbmQnIGluIHN0eWxlKSByZXR1cm4gZXh0ZW5kKHN0eWxlLCBydWxlLCBzaGVldCk7XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICAgIGlmIChwcm9wICE9PSAnZXh0ZW5kJykgcmV0dXJuIHZhbHVlOyAvLyBWYWx1ZSBpcyBlbXB0eSwgcmVtb3ZlIHByb3BlcnRpZXMgc2V0IHByZXZpb3VzbHkuXG5cbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgZm9yICh2YXIga2V5IGluIHJ1bGVbdmFsdWVOc10pIHtcbiAgICAgICAgcnVsZS5wcm9wKGtleSwgbnVsbCk7XG4gICAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBGbG93IGNvbXBsYWlucyBiZWNhdXNlIHRoZXJlIGlzIG5vIGluZGV4ZXIgcHJvcGVydHkgaW4gU3R5bGVSdWxlXG5cblxuICAgICAgcnVsZVt2YWx1ZU5zXSA9IG51bGw7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gJEZsb3dGaXhNZVtpbnZhbGlkLWluLXJoc10gVGhpcyB3aWxsIGJlIGFuIG9iamVjdFxuICAgICAgZm9yICh2YXIgX2tleSBpbiB2YWx1ZSkge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdIFRoaXMgd2lsbCBiZSBhbiBvYmplY3RcbiAgICAgICAgcnVsZS5wcm9wKF9rZXksIHZhbHVlW19rZXldKTtcbiAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIEZsb3cgY29tcGxhaW5zIGJlY2F1c2UgdGhlcmUgaXMgbm8gaW5kZXhlciBwcm9wZXJ0eSBpbiBTdHlsZVJ1bGVcblxuXG4gICAgICBydWxlW3ZhbHVlTnNdID0gdmFsdWU7XG4gICAgfSAvLyBNYWtlIHN1cmUgd2UgZG9uJ3Qgc2V0IHRoZSB2YWx1ZSBpbiB0aGUgY29yZS5cblxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc0V4dGVuZDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IFJ1bGVMaXN0IH0gZnJvbSAnanNzJztcblxudmFyIGF0ID0gJ0BnbG9iYWwnO1xudmFyIGF0UHJlZml4ID0gJ0BnbG9iYWwgJztcblxudmFyIEdsb2JhbENvbnRhaW5lclJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHbG9iYWxDb250YWluZXJSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2dsb2JhbCc7XG4gICAgdGhpcy5hdCA9IGF0O1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIHNlbGVjdG9yIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQoc2VsZWN0b3IsIHN0eWxlc1tzZWxlY3Rvcl0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBHbG9iYWxDb250YWluZXJSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0UnVsZSA9IGZ1bmN0aW9uIGdldFJ1bGUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgICBpZiAocnVsZSkgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLnRvU3RyaW5nKCk7XG4gIH07XG5cbiAgcmV0dXJuIEdsb2JhbENvbnRhaW5lclJ1bGU7XG59KCk7XG5cbnZhciBHbG9iYWxQcmVmaXhlZFJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHbG9iYWxQcmVmaXhlZFJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdnbG9iYWwnO1xuICAgIHRoaXMuYXQgPSBhdDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHZhciBzZWxlY3RvciA9IGtleS5zdWJzdHIoYXRQcmVmaXgubGVuZ3RoKTtcbiAgICB0aGlzLnJ1bGUgPSBvcHRpb25zLmpzcy5jcmVhdGVSdWxlKHNlbGVjdG9yLCBzdHlsZSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gR2xvYmFsUHJlZml4ZWRSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnJ1bGUgPyB0aGlzLnJ1bGUudG9TdHJpbmcob3B0aW9ucykgOiAnJztcbiAgfTtcblxuICByZXR1cm4gR2xvYmFsUHJlZml4ZWRSdWxlO1xufSgpO1xuXG52YXIgc2VwYXJhdG9yUmVnRXhwID0gL1xccyosXFxzKi9nO1xuXG5mdW5jdGlvbiBhZGRTY29wZShzZWxlY3Rvciwgc2NvcGUpIHtcbiAgdmFyIHBhcnRzID0gc2VsZWN0b3Iuc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgdmFyIHNjb3BlZCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBzY29wZWQgKz0gc2NvcGUgKyBcIiBcIiArIHBhcnRzW2ldLnRyaW0oKTtcbiAgICBpZiAocGFydHNbaSArIDFdKSBzY29wZWQgKz0gJywgJztcbiAgfVxuXG4gIHJldHVybiBzY29wZWQ7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUocnVsZSwgc2hlZXQpIHtcbiAgdmFyIG9wdGlvbnMgPSBydWxlLm9wdGlvbnMsXG4gICAgICBzdHlsZSA9IHJ1bGUuc3R5bGU7XG4gIHZhciBydWxlcyA9IHN0eWxlID8gc3R5bGVbYXRdIDogbnVsbDtcbiAgaWYgKCFydWxlcykgcmV0dXJuO1xuXG4gIGZvciAodmFyIG5hbWUgaW4gcnVsZXMpIHtcbiAgICBzaGVldC5hZGRSdWxlKG5hbWUsIHJ1bGVzW25hbWVdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2VsZWN0b3I6IGFkZFNjb3BlKG5hbWUsIHJ1bGUuc2VsZWN0b3IpXG4gICAgfSkpO1xuICB9XG5cbiAgZGVsZXRlIHN0eWxlW2F0XTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlKHJ1bGUsIHNoZWV0KSB7XG4gIHZhciBvcHRpb25zID0gcnVsZS5vcHRpb25zLFxuICAgICAgc3R5bGUgPSBydWxlLnN0eWxlO1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICBpZiAocHJvcFswXSAhPT0gJ0AnIHx8IHByb3Auc3Vic3RyKDAsIGF0Lmxlbmd0aCkgIT09IGF0KSBjb250aW51ZTtcbiAgICB2YXIgc2VsZWN0b3IgPSBhZGRTY29wZShwcm9wLnN1YnN0cihhdC5sZW5ndGgpLCBydWxlLnNlbGVjdG9yKTtcbiAgICBzaGVldC5hZGRSdWxlKHNlbGVjdG9yLCBzdHlsZVtwcm9wXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclxuICAgIH0pKTtcbiAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gIH1cbn1cbi8qKlxuICogQ29udmVydCBuZXN0ZWQgcnVsZXMgdG8gc2VwYXJhdGUsIHJlbW92ZSB0aGVtIGZyb20gb3JpZ2luYWwgc3R5bGVzLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbmZ1bmN0aW9uIGpzc0dsb2JhbCgpIHtcbiAgZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucykge1xuICAgIGlmICghbmFtZSkgcmV0dXJuIG51bGw7XG5cbiAgICBpZiAobmFtZSA9PT0gYXQpIHtcbiAgICAgIHJldHVybiBuZXcgR2xvYmFsQ29udGFpbmVyUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChuYW1lWzBdID09PSAnQCcgJiYgbmFtZS5zdWJzdHIoMCwgYXRQcmVmaXgubGVuZ3RoKSA9PT0gYXRQcmVmaXgpIHtcbiAgICAgIHJldHVybiBuZXcgR2xvYmFsUHJlZml4ZWRSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC50eXBlID09PSAnZ2xvYmFsJyB8fCBwYXJlbnQub3B0aW9ucy5wYXJlbnQgJiYgcGFyZW50Lm9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdnbG9iYWwnKSB7XG4gICAgICAgIG9wdGlvbnMuc2NvcGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc2NvcGVkID09PSBmYWxzZSkge1xuICAgICAgb3B0aW9ucy5zZWxlY3RvciA9IG5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUsIHNoZWV0KSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJyB8fCAhc2hlZXQpIHJldHVybjtcbiAgICBoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlKHJ1bGUsIHNoZWV0KTtcbiAgICBoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUocnVsZSwgc2hlZXQpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvbkNyZWF0ZVJ1bGU6IG9uQ3JlYXRlUnVsZSxcbiAgICBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc0dsb2JhbDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG52YXIgcGFyZW50UmVnRXhwID0gLyYvZztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG4vKipcbiAqIENvbnZlcnQgbmVzdGVkIHJ1bGVzIHRvIHNlcGFyYXRlLCByZW1vdmUgdGhlbSBmcm9tIG9yaWdpbmFsIHN0eWxlcy5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24ganNzTmVzdGVkKCkge1xuICAvLyBHZXQgYSBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciAkcmVmIHJlcGxhY2VtZW50LlxuICBmdW5jdGlvbiBnZXRSZXBsYWNlUmVmKGNvbnRhaW5lciwgc2hlZXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1hdGNoLCBrZXkpIHtcbiAgICAgIHZhciBydWxlID0gY29udGFpbmVyLmdldFJ1bGUoa2V5KSB8fCBzaGVldCAmJiBzaGVldC5nZXRSdWxlKGtleSk7XG5cbiAgICAgIGlmIChydWxlKSB7XG4gICAgICAgIHJ1bGUgPSBydWxlO1xuICAgICAgICByZXR1cm4gcnVsZS5zZWxlY3RvcjtcbiAgICAgIH1cblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBDb3VsZCBub3QgZmluZCB0aGUgcmVmZXJlbmNlZCBydWxlIFxcXCJcIiArIGtleSArIFwiXFxcIiBpbiBcXFwiXCIgKyAoY29udGFpbmVyLm9wdGlvbnMubWV0YSB8fCBjb250YWluZXIudG9TdHJpbmcoKSkgKyBcIlxcXCIuXCIpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZVBhcmVudFJlZnMobmVzdGVkUHJvcCwgcGFyZW50UHJvcCkge1xuICAgIHZhciBwYXJlbnRTZWxlY3RvcnMgPSBwYXJlbnRQcm9wLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gICAgdmFyIG5lc3RlZFNlbGVjdG9ycyA9IG5lc3RlZFByb3Auc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmVudFNlbGVjdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBhcmVudCA9IHBhcmVudFNlbGVjdG9yc1tpXTtcblxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZXN0ZWRTZWxlY3RvcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIG5lc3RlZCA9IG5lc3RlZFNlbGVjdG9yc1tqXTtcbiAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICcsICc7IC8vIFJlcGxhY2UgYWxsICYgYnkgdGhlIHBhcmVudCBvciBwcmVmaXggJiB3aXRoIHRoZSBwYXJlbnQuXG5cbiAgICAgICAgcmVzdWx0ICs9IG5lc3RlZC5pbmRleE9mKCcmJykgIT09IC0xID8gbmVzdGVkLnJlcGxhY2UocGFyZW50UmVnRXhwLCBwYXJlbnQpIDogcGFyZW50ICsgXCIgXCIgKyBuZXN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE9wdGlvbnMocnVsZSwgY29udGFpbmVyLCBwcmV2T3B0aW9ucykge1xuICAgIC8vIE9wdGlvbnMgaGFzIGJlZW4gYWxyZWFkeSBjcmVhdGVkLCBub3cgd2Ugb25seSBpbmNyZWFzZSBpbmRleC5cbiAgICBpZiAocHJldk9wdGlvbnMpIHJldHVybiBfZXh0ZW5kcyh7fSwgcHJldk9wdGlvbnMsIHtcbiAgICAgIGluZGV4OiBwcmV2T3B0aW9ucy5pbmRleCArIDEgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cbiAgICB9KTtcbiAgICB2YXIgbmVzdGluZ0xldmVsID0gcnVsZS5vcHRpb25zLm5lc3RpbmdMZXZlbDtcbiAgICBuZXN0aW5nTGV2ZWwgPSBuZXN0aW5nTGV2ZWwgPT09IHVuZGVmaW5lZCA/IDEgOiBuZXN0aW5nTGV2ZWwgKyAxO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgcnVsZS5vcHRpb25zLCB7XG4gICAgICBuZXN0aW5nTGV2ZWw6IG5lc3RpbmdMZXZlbCxcbiAgICAgIGluZGV4OiBjb250YWluZXIuaW5kZXhPZihydWxlKSArIDEgLy8gV2UgZG9uJ3QgbmVlZCB0aGUgcGFyZW50IG5hbWUgdG8gYmUgc2V0IG9wdGlvbnMgZm9yIGNobGlkLlxuXG4gICAgfSk7XG5cbiAgICBkZWxldGUgb3B0aW9ucy5uYW1lO1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgIHZhciBjb250YWluZXIgPSBzdHlsZVJ1bGUub3B0aW9ucy5wYXJlbnQ7XG4gICAgdmFyIG9wdGlvbnM7XG4gICAgdmFyIHJlcGxhY2VSZWY7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgaXNOZXN0ZWQgPSBwcm9wLmluZGV4T2YoJyYnKSAhPT0gLTE7XG4gICAgICB2YXIgaXNOZXN0ZWRDb25kaXRpb25hbCA9IHByb3BbMF0gPT09ICdAJztcbiAgICAgIGlmICghaXNOZXN0ZWQgJiYgIWlzTmVzdGVkQ29uZGl0aW9uYWwpIGNvbnRpbnVlO1xuICAgICAgb3B0aW9ucyA9IGdldE9wdGlvbnMoc3R5bGVSdWxlLCBjb250YWluZXIsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoaXNOZXN0ZWQpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcmVwbGFjZVBhcmVudFJlZnMocHJvcCwgc3R5bGVSdWxlLnNlbGVjdG9yKTsgLy8gTGF6aWx5IGNyZWF0ZSB0aGUgcmVmIHJlcGxhY2VyIGZ1bmN0aW9uIGp1c3Qgb25jZSBmb3JcbiAgICAgICAgLy8gYWxsIG5lc3RlZCBydWxlcyB3aXRoaW4gdGhlIHNoZWV0LlxuXG4gICAgICAgIGlmICghcmVwbGFjZVJlZikgcmVwbGFjZVJlZiA9IGdldFJlcGxhY2VSZWYoY29udGFpbmVyLCBzaGVldCk7IC8vIFJlcGxhY2UgYWxsICRyZWZzLlxuXG4gICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZShyZWZSZWdFeHAsIHJlcGxhY2VSZWYpO1xuICAgICAgICBjb250YWluZXIuYWRkUnVsZShzZWxlY3Rvciwgc3R5bGVbcHJvcF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgICAgIH0pKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNOZXN0ZWRDb25kaXRpb25hbCkge1xuICAgICAgICAvLyBQbGFjZSBjb25kaXRpb25hbCByaWdodCBhZnRlciB0aGUgcGFyZW50IHJ1bGUgdG8gZW5zdXJlIHJpZ2h0IG9yZGVyaW5nLlxuICAgICAgICBjb250YWluZXIuYWRkUnVsZShwcm9wLCB7fSwgb3B0aW9ucykgLy8gRmxvdyBleHBlY3RzIG1vcmUgb3B0aW9ucyBidXQgdGhleSBhcmVuJ3QgcmVxdWlyZWRcbiAgICAgICAgLy8gQW5kIGZsb3cgZG9lc24ndCBrbm93IHRoaXMgd2lsbCBhbHdheXMgYmUgYSBTdHlsZVJ1bGUgd2hpY2ggaGFzIHRoZSBhZGRSdWxlIG1ldGhvZFxuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdXG4gICAgICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgICAuYWRkUnVsZShzdHlsZVJ1bGUua2V5LCBzdHlsZVtwcm9wXSwge1xuICAgICAgICAgIHNlbGVjdG9yOiBzdHlsZVJ1bGUuc2VsZWN0b3JcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NOZXN0ZWQ7XG4iLCIvKipcbiAqIFNvcnQgcHJvcHMgYnkgbGVuZ3RoLlxuICovXG5mdW5jdGlvbiBqc3NQcm9wc1NvcnQoKSB7XG4gIHZhciBzb3J0ID0gZnVuY3Rpb24gc29ydChwcm9wMCwgcHJvcDEpIHtcbiAgICBpZiAocHJvcDAubGVuZ3RoID09PSBwcm9wMS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBwcm9wMCA+IHByb3AxID8gMSA6IC0xO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wMC5sZW5ndGggLSBwcm9wMS5sZW5ndGg7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcbiAgICAgIHZhciBuZXdTdHlsZSA9IHt9O1xuICAgICAgdmFyIHByb3BzID0gT2JqZWN0LmtleXMoc3R5bGUpLnNvcnQoc29ydCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbmV3U3R5bGVbcHJvcHNbaV1dID0gc3R5bGVbcHJvcHNbaV1dO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3U3R5bGU7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NQcm9wc1NvcnQ7XG4iLCJpbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlUnVsZSB9IGZyb20gJ2pzcyc7XG5cbnZhciBub3cgPSBEYXRlLm5vdygpO1xudmFyIGZuVmFsdWVzTnMgPSBcImZuVmFsdWVzXCIgKyBub3c7XG52YXIgZm5SdWxlTnMgPSBcImZuU3R5bGVcIiArICsrbm93O1xuXG52YXIgZnVuY3Rpb25QbHVnaW4gPSBmdW5jdGlvbiBmdW5jdGlvblBsdWdpbigpIHtcbiAgcmV0dXJuIHtcbiAgICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIGRlY2wgIT09ICdmdW5jdGlvbicpIHJldHVybiBudWxsO1xuICAgICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKG5hbWUsIHt9LCBvcHRpb25zKTtcbiAgICAgIHJ1bGVbZm5SdWxlTnNdID0gZGVjbDtcbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0sXG4gICAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIGV4dHJhY3QgZnVuY3Rpb24gdmFsdWVzIGZyb20gdGhlIGRlY2xhcmF0aW9uLCBzbyB0aGF0IHdlIGNhbiBrZWVwIGNvcmUgdW5hd2FyZSBvZiB0aGVtLlxuICAgICAgLy8gV2UgbmVlZCB0byBkbyB0aGF0IG9ubHkgb25jZS5cbiAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gZXh0cmFjdCBmdW5jdGlvbnMgb24gZWFjaCBzdHlsZSB1cGRhdGUsIHNpbmNlIHRoaXMgY2FuIGhhcHBlbiBvbmx5IG9uY2UuXG4gICAgICAvLyBXZSBkb24ndCBzdXBwb3J0IGZ1bmN0aW9uIHZhbHVlcyBpbnNpZGUgb2YgZnVuY3Rpb24gcnVsZXMuXG4gICAgICBpZiAoZm5WYWx1ZXNOcyBpbiBydWxlIHx8IGZuUnVsZU5zIGluIHJ1bGUpIHJldHVybiBzdHlsZTtcbiAgICAgIHZhciBmblZhbHVlcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSBjb250aW51ZTtcbiAgICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgICBmblZhbHVlc1twcm9wXSA9IHZhbHVlO1xuICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuXG4gICAgICBydWxlW2ZuVmFsdWVzTnNdID0gZm5WYWx1ZXM7XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfSxcbiAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlOyAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgICAgdmFyIGZuUnVsZSA9IHN0eWxlUnVsZVtmblJ1bGVOc107IC8vIElmIHdlIGhhdmUgYSBzdHlsZSBmdW5jdGlvbiwgdGhlIGVudGlyZSBydWxlIGlzIGR5bmFtaWMgYW5kIHN0eWxlIG9iamVjdFxuICAgICAgLy8gd2lsbCBiZSByZXR1cm5lZCBmcm9tIHRoYXQgZnVuY3Rpb24uXG5cbiAgICAgIGlmIChmblJ1bGUpIHtcbiAgICAgICAgLy8gRW1wdHkgb2JqZWN0IHdpbGwgcmVtb3ZlIGFsbCBjdXJyZW50bHkgZGVmaW5lZCBwcm9wc1xuICAgICAgICAvLyBpbiBjYXNlIGZ1bmN0aW9uIHJ1bGUgcmV0dXJucyBhIGZhbHN5IHZhbHVlLlxuICAgICAgICBzdHlsZVJ1bGUuc3R5bGUgPSBmblJ1bGUoZGF0YSkgfHwge307XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZVJ1bGUuc3R5bGUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3R5bGVSdWxlLnN0eWxlW3Byb3BdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBGdW5jdGlvbiB2YWx1ZXMgaW5zaWRlIGZ1bmN0aW9uIHJ1bGVzIGFyZSBub3Qgc3VwcG9ydGVkLicpIDogdm9pZCAwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cblxuICAgICAgdmFyIGZuVmFsdWVzID0gc3R5bGVSdWxlW2ZuVmFsdWVzTnNdOyAvLyBJZiB3ZSBoYXZlIGEgZm4gdmFsdWVzIG1hcCwgaXQgaXMgYSBydWxlIHdpdGggZnVuY3Rpb24gdmFsdWVzLlxuXG4gICAgICBpZiAoZm5WYWx1ZXMpIHtcbiAgICAgICAgZm9yICh2YXIgX3Byb3AgaW4gZm5WYWx1ZXMpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChfcHJvcCwgZm5WYWx1ZXNbX3Byb3BdKGRhdGEpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uUGx1Z2luO1xuIiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVSdWxlIH0gZnJvbSAnanNzJztcblxudmFyIGlzT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIGlzT2JzZXJ2YWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJiYgdmFsdWVbJCRvYnNlcnZhYmxlXSAmJiB2YWx1ZSA9PT0gdmFsdWVbJCRvYnNlcnZhYmxlXSgpO1xufTtcblxudmFyIG9ic2VydmFibGVQbHVnaW4gPSBmdW5jdGlvbiBvYnNlcnZhYmxlUGx1Z2luKHVwZGF0ZU9wdGlvbnMpIHtcbiAgcmV0dXJuIHtcbiAgICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgICBpZiAoIWlzT2JzZXJ2YWJsZShkZWNsKSkgcmV0dXJuIG51bGw7IC8vIENhc3QgYGRlY2xgIHRvIGBPYnNlcnZhYmxlYCwgc2luY2UgaXQgcGFzc2VkIHRoZSB0eXBlIGd1YXJkLlxuXG4gICAgICB2YXIgc3R5bGUkID0gZGVjbDtcbiAgICAgIHZhciBydWxlID0gY3JlYXRlUnVsZShuYW1lLCB7fSwgb3B0aW9ucyk7IC8vIFRPRE9cbiAgICAgIC8vIENhbGwgYHN0cmVhbS5zdWJzY3JpYmUoKWAgcmV0dXJucyBhIHN1YnNjcmlwdGlvbiwgd2hpY2ggc2hvdWxkIGJlIGV4cGxpY2l0bHlcbiAgICAgIC8vIHVuc3Vic2NyaWJlZCBmcm9tIHdoZW4gd2Uga25vdyB0aGlzIHNoZWV0IGlzIG5vIGxvbmdlciBuZWVkZWQuXG5cbiAgICAgIHN0eWxlJC5zdWJzY3JpYmUoZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgICBydWxlLnByb3AocHJvcCwgc3R5bGVbcHJvcF0sIHVwZGF0ZU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0sXG4gICAgb25Qcm9jZXNzUnVsZTogZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgICBpZiAocnVsZSAmJiBydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybjtcbiAgICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgICAgdmFyIHN0eWxlID0gc3R5bGVSdWxlLnN0eWxlO1xuXG4gICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChwcm9wKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuICAgICAgICBpZiAoIWlzT2JzZXJ2YWJsZSh2YWx1ZSkpIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgICAgdmFsdWUuc3Vic2NyaWJlKHtcbiAgICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KG5leHRWYWx1ZSkge1xuICAgICAgICAgICAgc3R5bGVSdWxlLnByb3AocHJvcCwgbmV4dFZhbHVlLCB1cGRhdGVPcHRpb25zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgICB2YXIgX3JldCA9IF9sb29wKHByb3ApO1xuXG4gICAgICAgIGlmIChfcmV0ID09PSBcImNvbnRpbnVlXCIpIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG9ic2VydmFibGVQbHVnaW47XG4iLCJpbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgc2VtaVdpdGhObCA9IC87XFxuLztcblxuLyoqXG4gKiBOYWl2ZSBDU1MgcGFyc2VyLlxuICogLSBTdXBwb3J0cyBvbmx5IHJ1bGUgYm9keSAobm8gc2VsZWN0b3JzKVxuICogLSBSZXF1aXJlcyBzZW1pY29sb24gYW5kIG5ldyBsaW5lIGFmdGVyIHRoZSB2YWx1ZSAoZXhjZXB0IG9mIGxhc3QgbGluZSlcbiAqIC0gTm8gbmVzdGVkIHJ1bGVzIHN1cHBvcnRcbiAqL1xudmFyIHBhcnNlID0gZnVuY3Rpb24gcGFyc2UoY3NzVGV4dCkge1xuICB2YXIgc3R5bGUgPSB7fTtcbiAgdmFyIHNwbGl0ID0gY3NzVGV4dC5zcGxpdChzZW1pV2l0aE5sKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNwbGl0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlY2wgPSAoc3BsaXRbaV0gfHwgJycpLnRyaW0oKTtcbiAgICBpZiAoIWRlY2wpIGNvbnRpbnVlO1xuICAgIHZhciBjb2xvbkluZGV4ID0gZGVjbC5pbmRleE9mKCc6Jyk7XG5cbiAgICBpZiAoY29sb25JbmRleCA9PT0gLTEpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gTWFsZm9ybWVkIENTUyBzdHJpbmcgXFxcIlwiICsgZGVjbCArIFwiXFxcIlwiKSA6IHZvaWQgMDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBwcm9wID0gZGVjbC5zdWJzdHIoMCwgY29sb25JbmRleCkudHJpbSgpO1xuICAgIHZhciB2YWx1ZSA9IGRlY2wuc3Vic3RyKGNvbG9uSW5kZXggKyAxKS50cmltKCk7XG4gICAgc3R5bGVbcHJvcF0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn07XG5cbnZhciBvblByb2Nlc3NSdWxlID0gZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gIGlmICh0eXBlb2YgcnVsZS5zdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gV2UgY2FuIHNhZmVseSBhc3N1bWUgdGhhdCBydWxlIGhhcyB0aGUgc3R5bGUgcHJvcGVydHlcbiAgICBydWxlLnN0eWxlID0gcGFyc2UocnVsZS5zdHlsZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHRlbXBsYXRlUGx1Z2luKCkge1xuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1J1bGU6IG9uUHJvY2Vzc1J1bGVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdGVtcGxhdGVQbHVnaW47XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59IiwiaW1wb3J0IGlzSW5Ccm93c2VyIGZyb20gJ2lzLWluLWJyb3dzZXInO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSc7XG5cbi8vIEV4cG9ydCBqYXZhc2NyaXB0IHN0eWxlIGFuZCBjc3Mgc3R5bGUgdmVuZG9yIHByZWZpeGVzLlxudmFyIGpzID0gJyc7XG52YXIgY3NzID0gJyc7XG52YXIgdmVuZG9yID0gJyc7XG52YXIgYnJvd3NlciA9ICcnO1xudmFyIGlzVG91Y2ggPSBpc0luQnJvd3NlciAmJiAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7IC8vIFdlIHNob3VsZCBub3QgZG8gYW55dGhpbmcgaWYgcmVxdWlyZWQgc2VydmVyc2lkZS5cblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIC8vIE9yZGVyIG1hdHRlcnMuIFdlIG5lZWQgdG8gY2hlY2sgV2Via2l0IHRoZSBsYXN0IG9uZSBiZWNhdXNlXG4gIC8vIG90aGVyIHZlbmRvcnMgdXNlIHRvIGFkZCBXZWJraXQgcHJlZml4ZXMgdG8gc29tZSBwcm9wZXJ0aWVzXG4gIHZhciBqc0Nzc01hcCA9IHtcbiAgICBNb3o6ICctbW96LScsXG4gICAgbXM6ICctbXMtJyxcbiAgICBPOiAnLW8tJyxcbiAgICBXZWJraXQ6ICctd2Via2l0LSdcbiAgfTtcblxuICB2YXIgX2RvY3VtZW50JGNyZWF0ZUVsZW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLFxuICAgICAgc3R5bGUgPSBfZG9jdW1lbnQkY3JlYXRlRWxlbWUuc3R5bGU7XG5cbiAgdmFyIHRlc3RQcm9wID0gJ1RyYW5zZm9ybSc7XG5cbiAgZm9yICh2YXIga2V5IGluIGpzQ3NzTWFwKSB7XG4gICAgaWYgKGtleSArIHRlc3RQcm9wIGluIHN0eWxlKSB7XG4gICAgICBqcyA9IGtleTtcbiAgICAgIGNzcyA9IGpzQ3NzTWFwW2tleV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0gLy8gQ29ycmVjdGx5IGRldGVjdCB0aGUgRWRnZSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnbXNIeXBoZW5zJyBpbiBzdHlsZSkge1xuICAgIGpzID0gJ21zJztcbiAgICBjc3MgPSBqc0Nzc01hcC5tcztcbiAgICBicm93c2VyID0gJ2VkZ2UnO1xuICB9IC8vIENvcnJlY3RseSBkZXRlY3QgdGhlIFNhZmFyaSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnLWFwcGxlLXRyYWlsaW5nLXdvcmQnIGluIHN0eWxlKSB7XG4gICAgdmVuZG9yID0gJ2FwcGxlJztcbiAgfVxufVxuLyoqXG4gKiBWZW5kb3IgcHJlZml4IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAdHlwZSB7e2pzOiBTdHJpbmcsIGNzczogU3RyaW5nLCB2ZW5kb3I6IFN0cmluZywgYnJvd3NlcjogU3RyaW5nfX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG52YXIgcHJlZml4ID0ge1xuICBqczoganMsXG4gIGNzczogY3NzLFxuICB2ZW5kb3I6IHZlbmRvcixcbiAgYnJvd3NlcjogYnJvd3NlcixcbiAgaXNUb3VjaDogaXNUb3VjaFxufTtcblxuLyoqXG4gKiBUZXN0IGlmIGEga2V5ZnJhbWUgYXQtcnVsZSBzaG91bGQgYmUgcHJlZml4ZWQgb3Igbm90XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHZlbmRvciBwcmVmaXggc3RyaW5nIGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0ZWRLZXlmcmFtZXMoa2V5KSB7XG4gIC8vIEtleWZyYW1lcyBpcyBhbHJlYWR5IHByZWZpeGVkLiBlLmcuIGtleSA9ICdALXdlYmtpdC1rZXlmcmFtZXMgYSdcbiAgaWYgKGtleVsxXSA9PT0gJy0nKSByZXR1cm4ga2V5OyAvLyBObyBuZWVkIHRvIHByZWZpeCBJRS9FZGdlLiBPbGRlciBicm93c2VycyB3aWxsIGlnbm9yZSB1bnN1cHBvcnRlZCBydWxlcy5cbiAgLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWtleWZyYW1lc1xuXG4gIGlmIChwcmVmaXguanMgPT09ICdtcycpIHJldHVybiBrZXk7XG4gIHJldHVybiBcIkBcIiArIHByZWZpeC5jc3MgKyBcImtleWZyYW1lc1wiICsga2V5LnN1YnN0cigxMCk7XG59XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1hcHBlYXJhbmNlXG5cbnZhciBhcHBlYXJlbmNlID0ge1xuICBub1ByZWZpbGw6IFsnYXBwZWFyYW5jZSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnYXBwZWFyYW5jZScpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSByZXR1cm4gXCItd2Via2l0LVwiICsgcHJvcDtcbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1jb2xvci1hZGp1c3RcblxudmFyIGNvbG9yQWRqdXN0ID0ge1xuICBub1ByZWZpbGw6IFsnY29sb3ItYWRqdXN0J10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdjb2xvci1hZGp1c3QnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHJldHVybiBwcmVmaXguY3NzICsgXCJwcmludC1cIiArIHByb3A7XG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnZhciByZWdFeHAgPSAvWy1cXHNdKyguKT8vZztcbi8qKlxuICogUmVwbGFjZXMgdGhlIGxldHRlciB3aXRoIHRoZSBjYXBpdGFsIGxldHRlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXRjaFxuICogQHBhcmFtIHtTdHJpbmd9IGNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHRvVXBwZXIobWF0Y2gsIGMpIHtcbiAgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJztcbn1cbi8qKlxuICogQ29udmVydCBkYXNoIHNlcGFyYXRlZCBzdHJpbmdzIHRvIGNhbWVsLWNhc2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gY2FtZWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShyZWdFeHAsIHRvVXBwZXIpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgZGFzaCBzZXBhcmF0ZWQgc3RyaW5ncyB0byBwYXNjYWwgY2FzZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFzY2FsaXplKHN0cikge1xuICByZXR1cm4gY2FtZWxpemUoXCItXCIgKyBzdHIpO1xufVxuXG4vLyBidXQgd2UgY2FuIHVzZSBhIGxvbmdoYW5kIHByb3BlcnR5IGluc3RlYWQuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bWFza1xuXG52YXIgbWFzayA9IHtcbiAgbm9QcmVmaWxsOiBbJ21hc2snXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXm1hc2svLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSB7XG4gICAgICB2YXIgbG9uZ2hhbmQgPSAnbWFzay1pbWFnZSc7XG5cbiAgICAgIGlmIChjYW1lbGl6ZShsb25naGFuZCkgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmVmaXguanMgKyBwYXNjYWxpemUobG9uZ2hhbmQpIGluIHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRleHQtb3JpZW50YXRpb25cblxudmFyIHRleHRPcmllbnRhdGlvbiA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RleHQtb3JpZW50YXRpb24nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RleHQtb3JpZW50YXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJyAmJiAhcHJlZml4LmlzVG91Y2gpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zZm9ybVxuXG52YXIgdHJhbnNmb3JtID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNmb3JtJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChwcm9wICE9PSAndHJhbnNmb3JtJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMudHJhbnNmb3JtKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10cmFuc2l0aW9uXG5cbnZhciB0cmFuc2l0aW9uID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNpdGlvbiddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RyYW5zaXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD13cml0aW5nLW1vZGVcblxudmFyIHdyaXRpbmdNb2RlID0ge1xuICBub1ByZWZpbGw6IFsnd3JpdGluZy1tb2RlJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd3cml0aW5nLW1vZGUnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0JyB8fCBwcmVmaXguanMgPT09ICdtcycgJiYgcHJlZml4LmJyb3dzZXIgIT09ICdlZGdlJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dXNlci1zZWxlY3RcblxudmFyIHVzZXJTZWxlY3QgPSB7XG4gIG5vUHJlZmlsbDogWyd1c2VyLXNlbGVjdCddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAndXNlci1zZWxlY3QnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96JyB8fCBwcmVmaXguanMgPT09ICdtcycgfHwgcHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bXVsdGljb2x1bW5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvNDkxXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzE3N1xuXG52YXIgYnJlYWtQcm9wc09sZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXmJyZWFrLS8udGVzdChwcm9wKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHtcbiAgICAgIHZhciBqc1Byb3AgPSBcIldlYmtpdENvbHVtblwiICsgcGFzY2FsaXplKHByb3ApO1xuICAgICAgcmV0dXJuIGpzUHJvcCBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBcImNvbHVtbi1cIiArIHByb3AgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96Jykge1xuICAgICAgdmFyIF9qc1Byb3AgPSBcInBhZ2VcIiArIHBhc2NhbGl6ZShwcm9wKTtcblxuICAgICAgcmV0dXJuIF9qc1Byb3AgaW4gc3R5bGUgPyBcInBhZ2UtXCIgKyBwcm9wIDogZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy8zMjQuXG5cbnZhciBpbmxpbmVMb2dpY2FsT2xkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9eKGJvcmRlcnxtYXJnaW58cGFkZGluZyktaW5saW5lLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ01veicpIHJldHVybiBwcm9wO1xuICAgIHZhciBuZXdQcm9wID0gcHJvcC5yZXBsYWNlKCctaW5saW5lJywgJycpO1xuICAgIHJldHVybiBwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcCkgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgbmV3UHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG4vLyBDYW1lbGl6YXRpb24gaXMgcmVxdWlyZWQgYmVjYXVzZSB3ZSBjYW4ndCB0ZXN0IHVzaW5nLlxuLy8gQ1NTIHN5bnRheCBmb3IgZS5nLiBpbiBGRi5cblxudmFyIHVucHJlZml4ZWQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHJldHVybiBjYW1lbGl6ZShwcm9wKSBpbiBzdHlsZSA/IHByb3AgOiBmYWxzZTtcbiAgfVxufTtcblxudmFyIHByZWZpeGVkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICB2YXIgcGFzY2FsaXplZCA9IHBhc2NhbGl6ZShwcm9wKTsgLy8gUmV0dXJuIGN1c3RvbSBDU1MgdmFyaWFibGUgd2l0aG91dCBwcmVmaXhpbmcuXG5cbiAgICBpZiAocHJvcFswXSA9PT0gJy0nKSByZXR1cm4gcHJvcDsgLy8gUmV0dXJuIGFscmVhZHkgcHJlZml4ZWQgdmFsdWUgd2l0aG91dCBwcmVmaXhpbmcuXG5cbiAgICBpZiAocHJvcFswXSA9PT0gJy0nICYmIHByb3BbMV0gPT09ICctJykgcmV0dXJuIHByb3A7XG4gICAgaWYgKHByZWZpeC5qcyArIHBhc2NhbGl6ZWQgaW4gc3R5bGUpIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDsgLy8gVHJ5IHdlYmtpdCBmYWxsYmFjay5cblxuICAgIGlmIChwcmVmaXguanMgIT09ICdXZWJraXQnICYmIFwiV2Via2l0XCIgKyBwYXNjYWxpemVkIGluIHN0eWxlKSByZXR1cm4gXCItd2Via2l0LVwiICsgcHJvcDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1zY3JvbGwtc25hcFxuXG52YXIgc2Nyb2xsU25hcCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcC5zdWJzdHJpbmcoMCwgMTEpICE9PSAnc2Nyb2xsLXNuYXAnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSB7XG4gICAgICByZXR1cm4gXCJcIiArIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9b3ZlcnNjcm9sbC1iZWhhdmlvclxuXG52YXIgb3ZlcnNjcm9sbEJlaGF2aW9yID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnb3ZlcnNjcm9sbC1iZWhhdmlvcicpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgXCJzY3JvbGwtY2hhaW5pbmdcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxudmFyIHByb3BNYXAgPSB7XG4gICdmbGV4LWdyb3cnOiAnZmxleC1wb3NpdGl2ZScsXG4gICdmbGV4LXNocmluayc6ICdmbGV4LW5lZ2F0aXZlJyxcbiAgJ2ZsZXgtYmFzaXMnOiAnZmxleC1wcmVmZXJyZWQtc2l6ZScsXG4gICdqdXN0aWZ5LWNvbnRlbnQnOiAnZmxleC1wYWNrJyxcbiAgb3JkZXI6ICdmbGV4LW9yZGVyJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2ZsZXgtYWxpZ24nLFxuICAnYWxpZ24tY29udGVudCc6ICdmbGV4LWxpbmUtcGFjaycgLy8gJ2FsaWduLXNlbGYnIGlzIGhhbmRsZWQgYnkgJ2FsaWduLXNlbGYnIHBsdWdpbi5cblxufTsgLy8gU3VwcG9ydCBvbGQgZmxleCBzcGVjIGZyb20gMjAxMi5cblxudmFyIGZsZXgyMDEyID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICB2YXIgbmV3UHJvcCA9IHByb3BNYXBbcHJvcF07XG4gICAgaWYgKCFuZXdQcm9wKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbnZhciBwcm9wTWFwJDEgPSB7XG4gIGZsZXg6ICdib3gtZmxleCcsXG4gICdmbGV4LWdyb3cnOiAnYm94LWZsZXgnLFxuICAnZmxleC1kaXJlY3Rpb24nOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICBvcmRlcjogJ2JveC1vcmRpbmFsLWdyb3VwJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2JveC1hbGlnbicsXG4gICdmbGV4LWZsb3cnOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICAnanVzdGlmeS1jb250ZW50JzogJ2JveC1wYWNrJ1xufTtcbnZhciBwcm9wS2V5cyA9IE9iamVjdC5rZXlzKHByb3BNYXAkMSk7XG5cbnZhciBwcmVmaXhDc3MgPSBmdW5jdGlvbiBwcmVmaXhDc3MocCkge1xuICByZXR1cm4gcHJlZml4LmNzcyArIHA7XG59OyAvLyBTdXBwb3J0IG9sZCBmbGV4IHNwZWMgZnJvbSAyMDA5LlxuXG5cbnZhciBmbGV4MjAwOSA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlLCBfcmVmKSB7XG4gICAgdmFyIG11bHRpcGxlID0gX3JlZi5tdWx0aXBsZTtcblxuICAgIGlmIChwcm9wS2V5cy5pbmRleE9mKHByb3ApID4gLTEpIHtcbiAgICAgIHZhciBuZXdQcm9wID0gcHJvcE1hcCQxW3Byb3BdO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkobmV3UHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghbXVsdGlwbGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdQcm9wLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghKHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wWzBdKSBpbiBzdHlsZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1Byb3AubWFwKHByZWZpeENzcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBwbHVnaW5zID0gW1xuLy8gICAuLi5wbHVnaW5zLFxuLy8gICAgYnJlYWtQcm9wc09sZCxcbi8vICAgIGlubGluZUxvZ2ljYWxPbGQsXG4vLyAgICB1bnByZWZpeGVkLFxuLy8gICAgcHJlZml4ZWQsXG4vLyAgICBzY3JvbGxTbmFwLFxuLy8gICAgZmxleDIwMTIsXG4vLyAgICBmbGV4MjAwOVxuLy8gXVxuLy8gUGx1Z2lucyB3aXRob3V0ICdub1ByZWZpbGwnIHZhbHVlLCBnb2luZyBsYXN0LlxuLy8gJ2ZsZXgtKicgcGx1Z2lucyBzaG91bGQgYmUgYXQgdGhlIGJvdHRvbS5cbi8vICdmbGV4MjAwOScgZ29pbmcgYWZ0ZXIgJ2ZsZXgyMDEyJy5cbi8vICdwcmVmaXhlZCcgZ29pbmcgYWZ0ZXIgJ3VucHJlZml4ZWQnXG5cbnZhciBwbHVnaW5zID0gW2FwcGVhcmVuY2UsIGNvbG9yQWRqdXN0LCBtYXNrLCB0ZXh0T3JpZW50YXRpb24sIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgd3JpdGluZ01vZGUsIHVzZXJTZWxlY3QsIGJyZWFrUHJvcHNPbGQsIGlubGluZUxvZ2ljYWxPbGQsIHVucHJlZml4ZWQsIHByZWZpeGVkLCBzY3JvbGxTbmFwLCBvdmVyc2Nyb2xsQmVoYXZpb3IsIGZsZXgyMDEyLCBmbGV4MjAwOV07XG52YXIgcHJvcGVydHlEZXRlY3RvcnMgPSBwbHVnaW5zLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pLm1hcChmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pO1xudmFyIG5vUHJlZmlsbCA9IHBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLm5vUHJlZmlsbDtcbn0pLnJlZHVjZShmdW5jdGlvbiAoYSwgcCkge1xuICBhLnB1c2guYXBwbHkoYSwgX3RvQ29uc3VtYWJsZUFycmF5KHAubm9QcmVmaWxsKSk7XG4gIHJldHVybiBhO1xufSwgW10pO1xuXG52YXIgZWw7XG52YXIgY2FjaGUgPSB7fTtcblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpOyAvLyBXZSB0ZXN0IGV2ZXJ5IHByb3BlcnR5IG9uIHZlbmRvciBwcmVmaXggcmVxdWlyZW1lbnQuXG4gIC8vIE9uY2UgdGVzdGVkLCByZXN1bHQgaXMgY2FjaGVkLiBJdCBnaXZlcyB1cyB1cCB0byA3MCUgcGVyZiBib29zdC5cbiAgLy8gaHR0cDovL2pzcGVyZi5jb20vZWxlbWVudC1zdHlsZS1vYmplY3QtYWNjZXNzLXZzLXBsYWluLW9iamVjdFxuICAvL1xuICAvLyBQcmVmaWxsIGNhY2hlIHdpdGgga25vd24gY3NzIHByb3BlcnRpZXMgdG8gcmVkdWNlIGFtb3VudCBvZlxuICAvLyBwcm9wZXJ0aWVzIHdlIG5lZWQgdG8gZmVhdHVyZSB0ZXN0IGF0IHJ1bnRpbWUuXG4gIC8vIGh0dHA6Ly9kYXZpZHdhbHNoLm5hbWUvdmVuZG9yLXByZWZpeFxuXG4gIHZhciBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgJycpO1xuXG4gIGZvciAodmFyIGtleSQxIGluIGNvbXB1dGVkKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgIGlmICghaXNOYU4oa2V5JDEpKSBjYWNoZVtjb21wdXRlZFtrZXkkMV1dID0gY29tcHV0ZWRba2V5JDFdO1xuICB9IC8vIFByb3BlcnRpZXMgdGhhdCBjYW5ub3QgYmUgY29ycmVjdGx5IGRldGVjdGVkIHVzaW5nIHRoZVxuICAvLyBjYWNoZSBwcmVmaWxsIG1ldGhvZC5cblxuXG4gIG5vUHJlZmlsbC5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIGRlbGV0ZSBjYWNoZVt4XTtcbiAgfSk7XG59XG4vKipcbiAqIFRlc3QgaWYgYSBwcm9wZXJ0eSBpcyBzdXBwb3J0ZWQsIHJldHVybnMgc3VwcG9ydGVkIHByb3BlcnR5IHdpdGggdmVuZG9yXG4gKiBwcmVmaXggaWYgcmVxdWlyZWQuIFJldHVybnMgYGZhbHNlYCBpZiBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wIGRhc2ggc2VwYXJhdGVkXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICBpZiAoIWVsKSByZXR1cm4gcHJvcDsgLy8gUmVtb3ZlIGNhY2hlIGZvciBiZW5jaG1hcmsgdGVzdHMgb3IgcmV0dXJuIHByb3BlcnR5IGZyb20gdGhlIGNhY2hlLlxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2JlbmNobWFyaycgJiYgY2FjaGVbcHJvcF0gIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZVtwcm9wXTtcbiAgfSAvLyBDaGVjayBpZiAndHJhbnNpdGlvbicgb3IgJ3RyYW5zZm9ybScgbmF0aXZlbHkgc3VwcG9ydGVkIGluIGJyb3dzZXIuXG5cblxuICBpZiAocHJvcCA9PT0gJ3RyYW5zaXRpb24nIHx8IHByb3AgPT09ICd0cmFuc2Zvcm0nKSB7XG4gICAgb3B0aW9uc1twcm9wXSA9IHByb3AgaW4gZWwuc3R5bGU7XG4gIH0gLy8gRmluZCBhIHBsdWdpbiBmb3IgY3VycmVudCBwcmVmaXggcHJvcGVydHkuXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BlcnR5RGV0ZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2FjaGVbcHJvcF0gPSBwcm9wZXJ0eURldGVjdG9yc1tpXShwcm9wLCBlbC5zdHlsZSwgb3B0aW9ucyk7IC8vIEJyZWFrIGxvb3AsIGlmIHZhbHVlIGZvdW5kLlxuXG4gICAgaWYgKGNhY2hlW3Byb3BdKSBicmVhaztcbiAgfSAvLyBSZXNldCBzdHlsZXMgZm9yIGN1cnJlbnQgcHJvcGVydHkuXG4gIC8vIEZpcmVmb3ggY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgZm9yIGludmFsaWQgcHJvcGVydGllcywgZS5nLiwgXCIwXCIuXG5cblxuICB0cnkge1xuICAgIGVsLnN0eWxlW3Byb3BdID0gJyc7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjYWNoZVtwcm9wXTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciB0cmFuc2l0aW9uUHJvcGVydGllcyA9IHtcbiAgdHJhbnNpdGlvbjogMSxcbiAgJ3RyYW5zaXRpb24tcHJvcGVydHknOiAxLFxuICAnLXdlYmtpdC10cmFuc2l0aW9uJzogMSxcbiAgJy13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eSc6IDFcbn07XG52YXIgdHJhbnNQcm9wc1JlZ0V4cCA9IC8oXlxccypbXFx3LV0rKXwsIChcXHMqW1xcdy1dKykoPyFbXigpXSpcXCkpL2c7XG52YXIgZWwkMTtcbi8qKlxuICogUmV0dXJucyBwcmVmaXhlZCB2YWx1ZSB0cmFuc2l0aW9uL3RyYW5zZm9ybSBpZiBuZWVkZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1hdGNoXG4gKiBAcGFyYW0ge1N0cmluZ30gcDFcbiAqIEBwYXJhbSB7U3RyaW5nfSBwMlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrKG1hdGNoLCBwMSwgcDIpIHtcbiAgaWYgKHAxID09PSAndmFyJykgcmV0dXJuICd2YXInO1xuICBpZiAocDEgPT09ICdhbGwnKSByZXR1cm4gJ2FsbCc7XG4gIGlmIChwMiA9PT0gJ2FsbCcpIHJldHVybiAnLCBhbGwnO1xuICB2YXIgcHJlZml4ZWRWYWx1ZSA9IHAxID8gc3VwcG9ydGVkUHJvcGVydHkocDEpIDogXCIsIFwiICsgc3VwcG9ydGVkUHJvcGVydHkocDIpO1xuICBpZiAoIXByZWZpeGVkVmFsdWUpIHJldHVybiBwMSB8fCBwMjtcbiAgcmV0dXJuIHByZWZpeGVkVmFsdWU7XG59XG5cbmlmIChpc0luQnJvd3NlcikgZWwkMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbi8qKlxuICogUmV0dXJucyBwcmVmaXhlZCB2YWx1ZSBpZiBuZWVkZWQuIFJldHVybnMgYGZhbHNlYCBpZiB2YWx1ZSBpcyBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydGVkVmFsdWUocHJvcGVydHksIHZhbHVlKSB7XG4gIC8vIEZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gIHZhciBwcmVmaXhlZFZhbHVlID0gdmFsdWU7XG4gIGlmICghZWwkMSB8fCBwcm9wZXJ0eSA9PT0gJ2NvbnRlbnQnKSByZXR1cm4gdmFsdWU7IC8vIEl0IGlzIGEgc3RyaW5nIG9yIGEgbnVtYmVyIGFzIGEgc3RyaW5nIGxpa2UgJzEnLlxuICAvLyBXZSB3YW50IG9ubHkgcHJlZml4YWJsZSB2YWx1ZXMgaGVyZS5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuXG4gIGlmICh0eXBlb2YgcHJlZml4ZWRWYWx1ZSAhPT0gJ3N0cmluZycgfHwgIWlzTmFOKHBhcnNlSW50KHByZWZpeGVkVmFsdWUsIDEwKSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZWRWYWx1ZTtcbiAgfSAvLyBDcmVhdGUgY2FjaGUga2V5IGZvciBjdXJyZW50IHZhbHVlLlxuXG5cbiAgdmFyIGNhY2hlS2V5ID0gcHJvcGVydHkgKyBwcmVmaXhlZFZhbHVlOyAvLyBSZW1vdmUgY2FjaGUgZm9yIGJlbmNobWFyayB0ZXN0cyBvciByZXR1cm4gdmFsdWUgZnJvbSBjYWNoZS5cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdiZW5jaG1hcmsnICYmIGNhY2hlJDFbY2FjaGVLZXldICE9IG51bGwpIHtcbiAgICByZXR1cm4gY2FjaGUkMVtjYWNoZUtleV07XG4gIH0gLy8gSUUgY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgaW4gc29tZSBjYXNlcywgZm9yIGUuZy4gc3R5bGUuY29udGVudCA9ICdiYXInLlxuXG5cbiAgdHJ5IHtcbiAgICAvLyBUZXN0IHZhbHVlIGFzIGl0IGlzLlxuICAgIGVsJDEuc3R5bGVbcHJvcGVydHldID0gcHJlZml4ZWRWYWx1ZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gUmV0dXJuIGZhbHNlIGlmIHZhbHVlIG5vdCBzdXBwb3J0ZWQuXG4gICAgY2FjaGUkMVtjYWNoZUtleV0gPSBmYWxzZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gSWYgJ3RyYW5zaXRpb24nIG9yICd0cmFuc2l0aW9uLXByb3BlcnR5JyBwcm9wZXJ0eS5cblxuXG4gIGlmICh0cmFuc2l0aW9uUHJvcGVydGllc1twcm9wZXJ0eV0pIHtcbiAgICBwcmVmaXhlZFZhbHVlID0gcHJlZml4ZWRWYWx1ZS5yZXBsYWNlKHRyYW5zUHJvcHNSZWdFeHAsIHByZWZpeFRyYW5zaXRpb25DYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAoZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPT09ICcnKSB7XG4gICAgLy8gVmFsdWUgd2l0aCBhIHZlbmRvciBwcmVmaXguXG4gICAgcHJlZml4ZWRWYWx1ZSA9IHByZWZpeC5jc3MgKyBwcmVmaXhlZFZhbHVlOyAvLyBIYXJkY29kZSB0ZXN0IHRvIGNvbnZlcnQgXCJmbGV4XCIgdG8gXCItbXMtZmxleGJveFwiIGZvciBJRTEwLlxuXG4gICAgaWYgKHByZWZpeGVkVmFsdWUgPT09ICctbXMtZmxleCcpIGVsJDEuc3R5bGVbcHJvcGVydHldID0gJy1tcy1mbGV4Ym94JzsgLy8gVGVzdCBwcmVmaXhlZCB2YWx1ZS5cblxuICAgIGVsJDEuc3R5bGVbcHJvcGVydHldID0gcHJlZml4ZWRWYWx1ZTsgLy8gUmV0dXJuIGZhbHNlIGlmIHZhbHVlIG5vdCBzdXBwb3J0ZWQuXG5cbiAgICBpZiAoZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPT09ICcnKSB7XG4gICAgICBjYWNoZSQxW2NhY2hlS2V5XSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSAvLyBSZXNldCBzdHlsZXMgZm9yIGN1cnJlbnQgcHJvcGVydHkuXG5cblxuICBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9ICcnOyAvLyBXcml0ZSBjdXJyZW50IHZhbHVlIHRvIGNhY2hlLlxuXG4gIGNhY2hlJDFbY2FjaGVLZXldID0gcHJlZml4ZWRWYWx1ZTtcbiAgcmV0dXJuIGNhY2hlJDFbY2FjaGVLZXldO1xufVxuXG5leHBvcnQgeyBwcmVmaXgsIHN1cHBvcnRlZEtleWZyYW1lcywgc3VwcG9ydGVkUHJvcGVydHksIHN1cHBvcnRlZFZhbHVlIH07XG4iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiaW1wb3J0IGFycmF5V2l0aG91dEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aG91dEhvbGVzLmpzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVTcHJlYWQgZnJvbSBcIi4vbm9uSXRlcmFibGVTcHJlYWQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiaW1wb3J0IHsgc3VwcG9ydGVkS2V5ZnJhbWVzLCBzdXBwb3J0ZWRWYWx1ZSwgc3VwcG9ydGVkUHJvcGVydHkgfSBmcm9tICdjc3MtdmVuZG9yJztcbmltcG9ydCB7IHRvQ3NzVmFsdWUgfSBmcm9tICdqc3MnO1xuXG4vKipcbiAqIEFkZCB2ZW5kb3IgcHJlZml4IHRvIGEgcHJvcGVydHkgbmFtZSB3aGVuIG5lZWRlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGpzc1ZlbmRvclByZWZpeGVyKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgdmFyIGF0UnVsZSA9IHJ1bGU7XG4gICAgICBhdFJ1bGUuYXQgPSBzdXBwb3J0ZWRLZXlmcmFtZXMoYXRSdWxlLmF0KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcmVmaXhTdHlsZShzdHlsZSkge1xuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuXG4gICAgICBpZiAocHJvcCA9PT0gJ2ZhbGxiYWNrcycgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgc3R5bGVbcHJvcF0gPSB2YWx1ZS5tYXAocHJlZml4U3R5bGUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoYW5nZVByb3AgPSBmYWxzZTtcbiAgICAgIHZhciBzdXBwb3J0ZWRQcm9wID0gc3VwcG9ydGVkUHJvcGVydHkocHJvcCk7XG4gICAgICBpZiAoc3VwcG9ydGVkUHJvcCAmJiBzdXBwb3J0ZWRQcm9wICE9PSBwcm9wKSBjaGFuZ2VQcm9wID0gdHJ1ZTtcbiAgICAgIHZhciBjaGFuZ2VWYWx1ZSA9IGZhbHNlO1xuICAgICAgdmFyIHN1cHBvcnRlZFZhbHVlJDEgPSBzdXBwb3J0ZWRWYWx1ZShzdXBwb3J0ZWRQcm9wLCB0b0Nzc1ZhbHVlKHZhbHVlKSk7XG4gICAgICBpZiAoc3VwcG9ydGVkVmFsdWUkMSAmJiBzdXBwb3J0ZWRWYWx1ZSQxICE9PSB2YWx1ZSkgY2hhbmdlVmFsdWUgPSB0cnVlO1xuXG4gICAgICBpZiAoY2hhbmdlUHJvcCB8fCBjaGFuZ2VWYWx1ZSkge1xuICAgICAgICBpZiAoY2hhbmdlUHJvcCkgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgICBzdHlsZVtzdXBwb3J0ZWRQcm9wIHx8IHByb3BdID0gc3VwcG9ydGVkVmFsdWUkMSB8fCB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcbiAgICByZXR1cm4gcHJlZml4U3R5bGUoc3R5bGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCkge1xuICAgIHJldHVybiBzdXBwb3J0ZWRWYWx1ZShwcm9wLCB0b0Nzc1ZhbHVlKHZhbHVlKSkgfHwgdmFsdWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1J1bGU6IG9uUHJvY2Vzc1J1bGUsXG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzVmVuZG9yUHJlZml4ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBmdW5jdGlvbnMgPSByZXF1aXJlKCdqc3MtcGx1Z2luLXJ1bGUtdmFsdWUtZnVuY3Rpb24nKTtcbnZhciBvYnNlcnZhYmxlID0gcmVxdWlyZSgnanNzLXBsdWdpbi1ydWxlLXZhbHVlLW9ic2VydmFibGUnKTtcbnZhciB0ZW1wbGF0ZSA9IHJlcXVpcmUoJ2pzcy1wbHVnaW4tdGVtcGxhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCdqc3MtcGx1Z2luLWdsb2JhbCcpO1xudmFyIGV4dGVuZCA9IHJlcXVpcmUoJ2pzcy1wbHVnaW4tZXh0ZW5kJyk7XG52YXIgbmVzdGVkID0gcmVxdWlyZSgnanNzLXBsdWdpbi1uZXN0ZWQnKTtcbnZhciBjb21wb3NlID0gcmVxdWlyZSgnanNzLXBsdWdpbi1jb21wb3NlJyk7XG52YXIgY2FtZWxDYXNlID0gcmVxdWlyZSgnanNzLXBsdWdpbi1jYW1lbC1jYXNlJyk7XG52YXIgZGVmYXVsdFVuaXQgPSByZXF1aXJlKCdqc3MtcGx1Z2luLWRlZmF1bHQtdW5pdCcpO1xudmFyIGV4cGFuZCA9IHJlcXVpcmUoJ2pzcy1wbHVnaW4tZXhwYW5kJyk7XG52YXIgdmVuZG9yUHJlZml4ZXIgPSByZXF1aXJlKCdqc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlcicpO1xudmFyIHByb3BzU29ydCA9IHJlcXVpcmUoJ2pzcy1wbHVnaW4tcHJvcHMtc29ydCcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHRMZWdhY3kgKGUpIHsgcmV0dXJuIGUgJiYgdHlwZW9mIGUgPT09ICdvYmplY3QnICYmICdkZWZhdWx0JyBpbiBlID8gZSA6IHsgJ2RlZmF1bHQnOiBlIH07IH1cblxudmFyIGZ1bmN0aW9uc19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koZnVuY3Rpb25zKTtcbnZhciBvYnNlcnZhYmxlX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdExlZ2FjeShvYnNlcnZhYmxlKTtcbnZhciB0ZW1wbGF0ZV9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3kodGVtcGxhdGUpO1xudmFyIGdsb2JhbF9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koZ2xvYmFsKTtcbnZhciBleHRlbmRfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0TGVnYWN5KGV4dGVuZCk7XG52YXIgbmVzdGVkX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdExlZ2FjeShuZXN0ZWQpO1xudmFyIGNvbXBvc2VfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0TGVnYWN5KGNvbXBvc2UpO1xudmFyIGNhbWVsQ2FzZV9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koY2FtZWxDYXNlKTtcbnZhciBkZWZhdWx0VW5pdF9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koZGVmYXVsdFVuaXQpO1xudmFyIGV4cGFuZF9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koZXhwYW5kKTtcbnZhciB2ZW5kb3JQcmVmaXhlcl9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3kodmVuZG9yUHJlZml4ZXIpO1xudmFyIHByb3BzU29ydF9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3kocHJvcHNTb3J0KTtcblxudmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBsdWdpbnM6IFtmdW5jdGlvbnNfX2RlZmF1bHRbJ2RlZmF1bHQnXSgpLCBvYnNlcnZhYmxlX19kZWZhdWx0WydkZWZhdWx0J10ob3B0aW9ucy5vYnNlcnZhYmxlKSwgdGVtcGxhdGVfX2RlZmF1bHRbJ2RlZmF1bHQnXSgpLCBnbG9iYWxfX2RlZmF1bHRbJ2RlZmF1bHQnXSgpLCBleHRlbmRfX2RlZmF1bHRbJ2RlZmF1bHQnXSgpLCBuZXN0ZWRfX2RlZmF1bHRbJ2RlZmF1bHQnXSgpLCBjb21wb3NlX19kZWZhdWx0WydkZWZhdWx0J10oKSwgY2FtZWxDYXNlX19kZWZhdWx0WydkZWZhdWx0J10oKSwgZGVmYXVsdFVuaXRfX2RlZmF1bHRbJ2RlZmF1bHQnXShvcHRpb25zLmRlZmF1bHRVbml0KSwgZXhwYW5kX19kZWZhdWx0WydkZWZhdWx0J10oKSwgdmVuZG9yUHJlZml4ZXJfX2RlZmF1bHRbJ2RlZmF1bHQnXSgpLCBwcm9wc1NvcnRfX2RlZmF1bHRbJ2RlZmF1bHQnXSgpXVxuICB9O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlO1xuIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgaXNJbkJyb3dzZXIgZnJvbSAnaXMtaW4tYnJvd3Nlcic7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuXG52YXIgcGxhaW5PYmplY3RDb25zdHJ1cmN0b3IgPSB7fS5jb25zdHJ1Y3RvcjtcbmZ1bmN0aW9uIGNsb25lU3R5bGUoc3R5bGUpIHtcbiAgaWYgKHN0eWxlID09IG51bGwgfHwgdHlwZW9mIHN0eWxlICE9PSAnb2JqZWN0JykgcmV0dXJuIHN0eWxlO1xuICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHJldHVybiBzdHlsZS5tYXAoY2xvbmVTdHlsZSk7XG4gIGlmIChzdHlsZS5jb25zdHJ1Y3RvciAhPT0gcGxhaW5PYmplY3RDb25zdHJ1cmN0b3IpIHJldHVybiBzdHlsZTtcbiAgdmFyIG5ld1N0eWxlID0ge307XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZSkge1xuICAgIG5ld1N0eWxlW25hbWVdID0gY2xvbmVTdHlsZShzdHlsZVtuYW1lXSk7XG4gIH1cblxuICByZXR1cm4gbmV3U3R5bGU7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcnVsZSBpbnN0YW5jZS5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgaWYgKG5hbWUgPT09IHZvaWQgMCkge1xuICAgIG5hbWUgPSAndW5uYW1lZCc7XG4gIH1cblxuICB2YXIganNzID0gb3B0aW9ucy5qc3M7XG4gIHZhciBkZWNsQ29weSA9IGNsb25lU3R5bGUoZGVjbCk7XG4gIHZhciBydWxlID0ganNzLnBsdWdpbnMub25DcmVhdGVSdWxlKG5hbWUsIGRlY2xDb3B5LCBvcHRpb25zKTtcbiAgaWYgKHJ1bGUpIHJldHVybiBydWxlOyAvLyBJdCBpcyBhbiBhdC1ydWxlIGFuZCBpdCBoYXMgbm8gaW5zdGFuY2UuXG5cbiAgaWYgKG5hbWVbMF0gPT09ICdAJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gVW5rbm93biBydWxlIFwiICsgbmFtZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxudmFyIGpvaW4gPSBmdW5jdGlvbiBqb2luKHZhbHVlLCBieSkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgIC8vIFJlbW92ZSAhaW1wb3J0YW50IGZyb20gdGhlIHZhbHVlLCBpdCB3aWxsIGJlIHJlYWRkZWQgbGF0ZXIuXG4gICAgaWYgKHZhbHVlW2ldID09PSAnIWltcG9ydGFudCcpIGJyZWFrO1xuICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSBieTtcbiAgICByZXN1bHQgKz0gdmFsdWVbaV07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhcnJheSB2YWx1ZXMgdG8gc3RyaW5nLlxuICpcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J11dYCA+IGBtYXJnaW46IDVweCAxMHB4O2BcbiAqIGBib3JkZXI6IFsnMXB4JywgJzJweCddYCA+IGBib3JkZXI6IDFweCwgMnB4O2BcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J10sICchaW1wb3J0YW50J11gID4gYG1hcmdpbjogNXB4IDEwcHggIWltcG9ydGFudDtgXG4gKiBgY29sb3I6IFsncmVkJywgIWltcG9ydGFudF1gID4gYGNvbG9yOiByZWQgIWltcG9ydGFudDtgXG4gKi9cbnZhciB0b0Nzc1ZhbHVlID0gZnVuY3Rpb24gdG9Dc3NWYWx1ZSh2YWx1ZSwgaWdub3JlSW1wb3J0YW50KSB7XG4gIGlmIChpZ25vcmVJbXBvcnRhbnQgPT09IHZvaWQgMCkge1xuICAgIGlnbm9yZUltcG9ydGFudCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICB2YXIgY3NzVmFsdWUgPSAnJzsgLy8gU3VwcG9ydCBzcGFjZSBzZXBhcmF0ZWQgdmFsdWVzIHZpYSBgW1snNXB4JywgJzEwcHgnXV1gLlxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlWzBdKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh2YWx1ZVtpXSA9PT0gJyFpbXBvcnRhbnQnKSBicmVhaztcbiAgICAgIGlmIChjc3NWYWx1ZSkgY3NzVmFsdWUgKz0gJywgJztcbiAgICAgIGNzc1ZhbHVlICs9IGpvaW4odmFsdWVbaV0sICcgJyk7XG4gICAgfVxuICB9IGVsc2UgY3NzVmFsdWUgPSBqb2luKHZhbHVlLCAnLCAnKTsgLy8gQWRkICFpbXBvcnRhbnQsIGJlY2F1c2UgaXQgd2FzIGlnbm9yZWQuXG5cblxuICBpZiAoIWlnbm9yZUltcG9ydGFudCAmJiB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJyFpbXBvcnRhbnQnKSB7XG4gICAgY3NzVmFsdWUgKz0gJyAhaW1wb3J0YW50JztcbiAgfVxuXG4gIHJldHVybiBjc3NWYWx1ZTtcbn07XG5cbi8qKlxuICogSW5kZW50IGEgc3RyaW5nLlxuICogaHR0cDovL2pzcGVyZi5jb20vYXJyYXktam9pbi12cy1mb3JcbiAqL1xuZnVuY3Rpb24gaW5kZW50U3RyKHN0ciwgaW5kZW50KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgaW5kZW50OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ICs9ICcgICc7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgc3RyO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIFJ1bGUgdG8gQ1NTIHN0cmluZy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHRvQ3NzKHNlbGVjdG9yLCBzdHlsZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAoIXN0eWxlKSByZXR1cm4gcmVzdWx0O1xuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkaW5kZW50ID0gX29wdGlvbnMuaW5kZW50LFxuICAgICAgaW5kZW50ID0gX29wdGlvbnMkaW5kZW50ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkaW5kZW50O1xuICB2YXIgZmFsbGJhY2tzID0gc3R5bGUuZmFsbGJhY2tzO1xuICBpZiAoc2VsZWN0b3IpIGluZGVudCsrOyAvLyBBcHBseSBmYWxsYmFja3MgZmlyc3QuXG5cbiAgaWYgKGZhbGxiYWNrcykge1xuICAgIC8vIEFycmF5IHN5bnRheCB7ZmFsbGJhY2tzOiBbe3Byb3A6IHZhbHVlfV19XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmFsbGJhY2tzKSkge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGZhbGxiYWNrcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIGZhbGxiYWNrID0gZmFsbGJhY2tzW2luZGV4XTtcblxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGZhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZmFsbGJhY2tbcHJvcF07XG5cbiAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgICAgcmVzdWx0ICs9IGluZGVudFN0cihwcm9wICsgXCI6IFwiICsgdG9Dc3NWYWx1ZSh2YWx1ZSkgKyBcIjtcIiwgaW5kZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT2JqZWN0IHN5bnRheCB7ZmFsbGJhY2tzOiB7cHJvcDogdmFsdWV9fVxuICAgICAgZm9yICh2YXIgX3Byb3AgaW4gZmFsbGJhY2tzKSB7XG4gICAgICAgIHZhciBfdmFsdWUgPSBmYWxsYmFja3NbX3Byb3BdO1xuXG4gICAgICAgIGlmIChfdmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnXFxuJztcbiAgICAgICAgICByZXN1bHQgKz0gaW5kZW50U3RyKF9wcm9wICsgXCI6IFwiICsgdG9Dc3NWYWx1ZShfdmFsdWUpICsgXCI7XCIsIGluZGVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBfcHJvcDIgaW4gc3R5bGUpIHtcbiAgICB2YXIgX3ZhbHVlMiA9IHN0eWxlW19wcm9wMl07XG5cbiAgICBpZiAoX3ZhbHVlMiAhPSBudWxsICYmIF9wcm9wMiAhPT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnXFxuJztcbiAgICAgIHJlc3VsdCArPSBpbmRlbnRTdHIoX3Byb3AyICsgXCI6IFwiICsgdG9Dc3NWYWx1ZShfdmFsdWUyKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgIH1cbiAgfSAvLyBBbGxvdyBlbXB0eSBzdHlsZSBpbiB0aGlzIGNhc2UsIGJlY2F1c2UgcHJvcGVydGllcyB3aWxsIGJlIGFkZGVkIGR5bmFtaWNhbGx5LlxuXG5cbiAgaWYgKCFyZXN1bHQgJiYgIW9wdGlvbnMuYWxsb3dFbXB0eSkgcmV0dXJuIHJlc3VsdDsgLy8gV2hlbiBydWxlIGlzIGJlaW5nIHN0cmluZ2lmaWVkIGJlZm9yZSBzZWxlY3RvciB3YXMgZGVmaW5lZC5cblxuICBpZiAoIXNlbGVjdG9yKSByZXR1cm4gcmVzdWx0O1xuICBpbmRlbnQtLTtcbiAgaWYgKHJlc3VsdCkgcmVzdWx0ID0gXCJcXG5cIiArIHJlc3VsdCArIFwiXFxuXCI7XG4gIHJldHVybiBpbmRlbnRTdHIoc2VsZWN0b3IgKyBcIiB7XCIgKyByZXN1bHQsIGluZGVudCkgKyBpbmRlbnRTdHIoJ30nLCBpbmRlbnQpO1xufVxuXG52YXIgZXNjYXBlUmVnZXggPSAvKFtbXFxdLiMqJD48K349fF46KCksXCInYFxcc10pL2c7XG52YXIgbmF0aXZlRXNjYXBlID0gdHlwZW9mIENTUyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ1NTLmVzY2FwZTtcbnZhciBlc2NhcGUgPSAoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gbmF0aXZlRXNjYXBlID8gbmF0aXZlRXNjYXBlKHN0cikgOiBzdHIucmVwbGFjZShlc2NhcGVSZWdleCwgJ1xcXFwkMScpO1xufSk7XG5cbnZhciBCYXNlU3R5bGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmFzZVN0eWxlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3N0eWxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdmFyIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIGlmIChzaGVldCkgdGhpcy5yZW5kZXJlciA9IHNoZWV0LnJlbmRlcmVyO2Vsc2UgaWYgKFJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQmFzZVN0eWxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnByb3AgPSBmdW5jdGlvbiBwcm9wKG5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgLy8gSXQncyBhIGdldHRlci5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuc3R5bGVbbmFtZV07IC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHRoZSB2YWx1ZSBoYXMgbm90IGNoYW5nZWQuXG5cbiAgICB2YXIgZm9yY2UgPSBvcHRpb25zID8gb3B0aW9ucy5mb3JjZSA6IGZhbHNlO1xuICAgIGlmICghZm9yY2UgJiYgdGhpcy5zdHlsZVtuYW1lXSA9PT0gdmFsdWUpIHJldHVybiB0aGlzO1xuICAgIHZhciBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKCFvcHRpb25zIHx8IG9wdGlvbnMucHJvY2VzcyAhPT0gZmFsc2UpIHtcbiAgICAgIG5ld1ZhbHVlID0gdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uQ2hhbmdlVmFsdWUodmFsdWUsIG5hbWUsIHRoaXMpO1xuICAgIH1cblxuICAgIHZhciBpc0VtcHR5ID0gbmV3VmFsdWUgPT0gbnVsbCB8fCBuZXdWYWx1ZSA9PT0gZmFsc2U7XG4gICAgdmFyIGlzRGVmaW5lZCA9IG5hbWUgaW4gdGhpcy5zdHlsZTsgLy8gVmFsdWUgaXMgZW1wdHkgYW5kIHdhc24ndCBkZWZpbmVkIGJlZm9yZS5cblxuICAgIGlmIChpc0VtcHR5ICYmICFpc0RlZmluZWQgJiYgIWZvcmNlKSByZXR1cm4gdGhpczsgLy8gV2UgYXJlIGdvaW5nIHRvIHJlbW92ZSB0aGlzIHZhbHVlLlxuXG4gICAgdmFyIHJlbW92ZSA9IGlzRW1wdHkgJiYgaXNEZWZpbmVkO1xuICAgIGlmIChyZW1vdmUpIGRlbGV0ZSB0aGlzLnN0eWxlW25hbWVdO2Vsc2UgdGhpcy5zdHlsZVtuYW1lXSA9IG5ld1ZhbHVlOyAvLyBSZW5kZXJhYmxlIGlzIGRlZmluZWQgaWYgU3R5bGVTaGVldCBvcHRpb24gYGxpbmtgIGlzIHRydWUuXG5cbiAgICBpZiAodGhpcy5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIGlmIChyZW1vdmUpIHRoaXMucmVuZGVyZXIucmVtb3ZlUHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lKTtlbHNlIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lLCBuZXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQuYXR0YWNoZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBSdWxlIGlzIG5vdCBsaW5rZWQuIE1pc3Npbmcgc2hlZXQgb3B0aW9uIFwibGluazogdHJ1ZVwiLicpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBCYXNlU3R5bGVSdWxlO1xufSgpO1xudmFyIFN0eWxlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Jhc2VTdHlsZVJ1bGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3R5bGVSdWxlLCBfQmFzZVN0eWxlUnVsZSk7XG5cbiAgZnVuY3Rpb24gU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9CYXNlU3R5bGVSdWxlLmNhbGwodGhpcywga2V5LCBzdHlsZSwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy5zZWxlY3RvclRleHQgPSB2b2lkIDA7XG4gICAgX3RoaXMuaWQgPSB2b2lkIDA7XG4gICAgX3RoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB2YXIgc2VsZWN0b3IgPSBvcHRpb25zLnNlbGVjdG9yLFxuICAgICAgICBzY29wZWQgPSBvcHRpb25zLnNjb3BlZCxcbiAgICAgICAgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBnZW5lcmF0ZUlkID0gb3B0aW9ucy5nZW5lcmF0ZUlkO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBfdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICB9IGVsc2UgaWYgKHNjb3BlZCAhPT0gZmFsc2UpIHtcbiAgICAgIF90aGlzLmlkID0gZ2VuZXJhdGVJZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgc2hlZXQpO1xuICAgICAgX3RoaXMuc2VsZWN0b3JUZXh0ID0gXCIuXCIgKyBlc2NhcGUoX3RoaXMuaWQpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICogQXR0ZW50aW9uOiB1c2UgdGhpcyB3aXRoIGNhdXRpb24uIE1vc3QgYnJvd3NlcnMgZGlkbid0IGltcGxlbWVudFxuICAgKiBzZWxlY3RvclRleHQgc2V0dGVyLCBzbyB0aGlzIG1heSByZXN1bHQgaW4gcmVyZW5kZXJpbmcgb2YgZW50aXJlIFN0eWxlIFNoZWV0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8yID0gU3R5bGVSdWxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQXBwbHkgcnVsZSB0byBhbiBlbGVtZW50IGlubGluZS5cbiAgICovXG4gIF9wcm90bzIuYXBwbHlUbyA9IGZ1bmN0aW9uIGFwcGx5VG8ocmVuZGVyYWJsZSkge1xuICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG5cbiAgICBpZiAocmVuZGVyZXIpIHtcbiAgICAgIHZhciBqc29uID0gdGhpcy50b0pTT04oKTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBqc29uKSB7XG4gICAgICAgIHJlbmRlcmVyLnNldFByb3BlcnR5KHJlbmRlcmFibGUsIHByb3AsIGpzb25bcHJvcF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHJ1bGUuXG4gICAqIEZhbGxiYWNrcyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICogVXNlZnVsIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzIudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHZhciBqc29uID0ge307XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMuc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc3R5bGVbcHJvcF07XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykganNvbltwcm9wXSA9IHZhbHVlO2Vsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSBqc29uW3Byb3BdID0gdG9Dc3NWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhbGxvd0VtcHR5OiB0cnVlXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLnNlbGVjdG9yVGV4dCwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFN0eWxlUnVsZSwgW3tcbiAgICBrZXk6IFwic2VsZWN0b3JcIixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSB0aGlzLnNlbGVjdG9yVGV4dCkgcmV0dXJuO1xuICAgICAgdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXIsXG4gICAgICAgICAgcmVuZGVyYWJsZSA9IHRoaXMucmVuZGVyYWJsZTtcbiAgICAgIGlmICghcmVuZGVyYWJsZSB8fCAhcmVuZGVyZXIpIHJldHVybjtcbiAgICAgIHZhciBoYXNDaGFuZ2VkID0gcmVuZGVyZXIuc2V0U2VsZWN0b3IocmVuZGVyYWJsZSwgc2VsZWN0b3IpOyAvLyBJZiBzZWxlY3RvciBzZXR0ZXIgaXMgbm90IGltcGxlbWVudGVkLCByZXJlbmRlciB0aGUgcnVsZS5cblxuICAgICAgaWYgKCFoYXNDaGFuZ2VkKSB7XG4gICAgICAgIHJlbmRlcmVyLnJlcGxhY2VSdWxlKHJlbmRlcmFibGUsIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgICAqL1xuICAgICxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yVGV4dDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3R5bGVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5TdHlsZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyB8fCBvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTdHlsZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyA9IHtcbiAgaW5kZW50OiAxLFxuICBjaGlsZHJlbjogdHJ1ZVxufTtcbnZhciBhdFJlZ0V4cCA9IC9AKFtcXHctXSspLztcbi8qKlxuICogQ29uZGl0aW9uYWwgcnVsZSBmb3IgQG1lZGlhLCBAc3VwcG9ydHNcbiAqL1xuXG52YXIgQ29uZGl0aW9uYWxSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2NvbmRpdGlvbmFsJztcbiAgICB0aGlzLmF0ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMucXVlcnkgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB2YXIgYXRNYXRjaCA9IGtleS5tYXRjaChhdFJlZ0V4cCk7XG4gICAgdGhpcy5hdCA9IGF0TWF0Y2ggPyBhdE1hdGNoWzFdIDogJ3Vua25vd24nOyAvLyBLZXkgbWlnaHQgY29udGFpbiBhIHVuaXF1ZSBzdWZmaXggaW4gY2FzZSB0aGUgYG5hbWVgIHBhc3NlZCBieSB1c2VyIHdhcyBkdXBsaWNhdGUuXG5cbiAgICB0aGlzLnF1ZXJ5ID0gb3B0aW9ucy5uYW1lIHx8IFwiQFwiICsgdGhpcy5hdDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBDb25kaXRpb25hbFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucztcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbmRlbnQgPT0gbnVsbCkgb3B0aW9ucy5pbmRlbnQgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zLmluZGVudDtcbiAgICBpZiAob3B0aW9ucy5jaGlsZHJlbiA9PSBudWxsKSBvcHRpb25zLmNoaWxkcmVuID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucy5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMucXVlcnkgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgcmV0dXJuIGNoaWxkcmVuID8gdGhpcy5xdWVyeSArIFwiIHtcXG5cIiArIGNoaWxkcmVuICsgXCJcXG59XCIgOiAnJztcbiAgfTtcblxuICByZXR1cm4gQ29uZGl0aW9uYWxSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCA9IC9AbWVkaWF8QHN1cHBvcnRzXFxzKy87XG52YXIgcGx1Z2luQ29uZGl0aW9uYWxSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXlSZWdFeHAudGVzdChrZXkpID8gbmV3IENvbmRpdGlvbmFsUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxID0ge1xuICBpbmRlbnQ6IDEsXG4gIGNoaWxkcmVuOiB0cnVlXG59O1xudmFyIG5hbWVSZWdFeHAgPSAvQGtleWZyYW1lc1xccysoW1xcdy1dKykvO1xuLyoqXG4gKiBSdWxlIGZvciBAa2V5ZnJhbWVzXG4gKi9cblxudmFyIEtleWZyYW1lc1J1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2tleWZyYW1lcyc7XG4gICAgdGhpcy5hdCA9ICdAa2V5ZnJhbWVzJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLm5hbWUgPSB2b2lkIDA7XG4gICAgdGhpcy5pZCA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHZhciBuYW1lTWF0Y2ggPSBrZXkubWF0Y2gobmFtZVJlZ0V4cCk7XG5cbiAgICBpZiAobmFtZU1hdGNoICYmIG5hbWVNYXRjaFsxXSkge1xuICAgICAgdGhpcy5uYW1lID0gbmFtZU1hdGNoWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5hbWUgPSAnbm9uYW1lJztcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gQmFkIGtleWZyYW1lcyBuYW1lIFwiICsga2V5KSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB0aGlzLmtleSA9IHRoaXMudHlwZSArIFwiLVwiICsgdGhpcy5uYW1lO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdmFyIHNjb3BlZCA9IG9wdGlvbnMuc2NvcGVkLFxuICAgICAgICBzaGVldCA9IG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIGdlbmVyYXRlSWQgPSBvcHRpb25zLmdlbmVyYXRlSWQ7XG4gICAgdGhpcy5pZCA9IHNjb3BlZCA9PT0gZmFsc2UgPyB0aGlzLm5hbWUgOiBlc2NhcGUoZ2VuZXJhdGVJZCh0aGlzLCBzaGVldCkpO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gZnJhbWVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBmcmFtZXNbbmFtZV0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgIHBhcmVudDogdGhpc1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBLZXlmcmFtZXNSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbmRlbnQgPT0gbnVsbCkgb3B0aW9ucy5pbmRlbnQgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEuaW5kZW50O1xuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09IG51bGwpIG9wdGlvbnMuY2hpbGRyZW4gPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEuY2hpbGRyZW47XG5cbiAgICBpZiAob3B0aW9ucy5jaGlsZHJlbiA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0ICsgXCIgXCIgKyB0aGlzLmlkICsgXCIge31cIjtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnJ1bGVzLnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIGlmIChjaGlsZHJlbikgY2hpbGRyZW4gPSBcIlxcblwiICsgY2hpbGRyZW4gKyBcIlxcblwiO1xuICAgIHJldHVybiB0aGlzLmF0ICsgXCIgXCIgKyB0aGlzLmlkICsgXCIge1wiICsgY2hpbGRyZW4gKyBcIn1cIjtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVzUnVsZTtcbn0oKTtcbnZhciBrZXlSZWdFeHAkMSA9IC9Aa2V5ZnJhbWVzXFxzKy87XG52YXIgcmVmUmVnRXhwID0gL1xcJChbXFx3LV0rKS9nO1xuXG52YXIgZmluZFJlZmVyZW5jZWRLZXlmcmFtZSA9IGZ1bmN0aW9uIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsLCBrZXlmcmFtZXMpIHtcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbC5yZXBsYWNlKHJlZlJlZ0V4cCwgZnVuY3Rpb24gKG1hdGNoLCBuYW1lKSB7XG4gICAgICBpZiAobmFtZSBpbiBrZXlmcmFtZXMpIHtcbiAgICAgICAgcmV0dXJuIGtleWZyYW1lc1tuYW1lXTtcbiAgICAgIH1cblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBSZWZlcmVuY2VkIGtleWZyYW1lcyBydWxlIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQuXCIpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn07XG4vKipcbiAqIFJlcGxhY2UgdGhlIHJlZmVyZW5jZSBmb3IgYSBhbmltYXRpb24gbmFtZS5cbiAqL1xuXG5cbnZhciByZXBsYWNlUmVmID0gZnVuY3Rpb24gcmVwbGFjZVJlZihzdHlsZSwgcHJvcCwga2V5ZnJhbWVzKSB7XG4gIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuICB2YXIgcmVmS2V5ZnJhbWUgPSBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbHVlLCBrZXlmcmFtZXMpO1xuXG4gIGlmIChyZWZLZXlmcmFtZSAhPT0gdmFsdWUpIHtcbiAgICBzdHlsZVtwcm9wXSA9IHJlZktleWZyYW1lO1xuICB9XG59O1xuXG52YXIgcGx1Z2luID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIGZyYW1lcywgb3B0aW9ucykge1xuICAgIHJldHVybiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXlSZWdFeHAkMS50ZXN0KGtleSkgPyBuZXcgS2V5ZnJhbWVzUnVsZShrZXksIGZyYW1lcywgb3B0aW9ucykgOiBudWxsO1xuICB9LFxuICAvLyBBbmltYXRpb24gbmFtZSByZWYgcmVwbGFjZXIuXG4gIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSwgc2hlZXQpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnIHx8ICFzaGVldCkgcmV0dXJuIHN0eWxlO1xuICAgIGlmICgnYW5pbWF0aW9uLW5hbWUnIGluIHN0eWxlKSByZXBsYWNlUmVmKHN0eWxlLCAnYW5pbWF0aW9uLW5hbWUnLCBzaGVldC5rZXlmcmFtZXMpO1xuICAgIGlmICgnYW5pbWF0aW9uJyBpbiBzdHlsZSkgcmVwbGFjZVJlZihzdHlsZSwgJ2FuaW1hdGlvbicsIHNoZWV0LmtleWZyYW1lcyk7XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9LFxuICBvbkNoYW5nZVZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbCwgcHJvcCwgcnVsZSkge1xuICAgIHZhciBzaGVldCA9IHJ1bGUub3B0aW9ucy5zaGVldDtcblxuICAgIGlmICghc2hlZXQpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgc3dpdGNoIChwcm9wKSB7XG4gICAgICBjYXNlICdhbmltYXRpb24nOlxuICAgICAgICByZXR1cm4gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIHNoZWV0LmtleWZyYW1lcyk7XG5cbiAgICAgIGNhc2UgJ2FuaW1hdGlvbi1uYW1lJzpcbiAgICAgICAgcmV0dXJuIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsLCBzaGVldC5rZXlmcmFtZXMpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfVxufTtcblxudmFyIEtleWZyYW1lUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Jhc2VTdHlsZVJ1bGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoS2V5ZnJhbWVSdWxlLCBfQmFzZVN0eWxlUnVsZSk7XG5cbiAgZnVuY3Rpb24gS2V5ZnJhbWVSdWxlKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9CYXNlU3R5bGVSdWxlLmNhbGwuYXBwbHkoX0Jhc2VTdHlsZVJ1bGUsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gS2V5ZnJhbWVSdWxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhbGxvd0VtcHR5OiB0cnVlXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLmtleSwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gIH07XG5cbiAgcmV0dXJuIEtleWZyYW1lUnVsZTtcbn0oQmFzZVN0eWxlUnVsZSk7XG52YXIgcGx1Z2luS2V5ZnJhbWVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICByZXR1cm4gbmV3IEtleWZyYW1lUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxudmFyIEZvbnRGYWNlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZvbnRGYWNlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2ZvbnQtZmFjZSc7XG4gICAgdGhpcy5hdCA9ICdAZm9udC1mYWNlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBGb250RmFjZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnN0eWxlKSkge1xuICAgICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5zdHlsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3RyICs9IHRvQ3NzKHRoaXMuYXQsIHRoaXMuc3R5bGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGVbaW5kZXggKyAxXSkgc3RyICs9ICdcXG4nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIHJldHVybiB0b0Nzcyh0aGlzLmF0LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gRm9udEZhY2VSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCQyID0gL0Bmb250LWZhY2UvO1xudmFyIHBsdWdpbkZvbnRGYWNlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXlSZWdFeHAkMi50ZXN0KGtleSkgPyBuZXcgRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIFZpZXdwb3J0UnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3ZpZXdwb3J0JztcbiAgICB0aGlzLmF0ID0gJ0B2aWV3cG9ydCc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVmlld3BvcnRSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gVmlld3BvcnRSdWxlO1xufSgpO1xudmFyIHBsdWdpblZpZXdwb3J0UnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgPT09ICdAdmlld3BvcnQnIHx8IGtleSA9PT0gJ0AtbXMtdmlld3BvcnQnID8gbmV3IFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBTaW1wbGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2ltcGxlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3NpbXBsZSc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy52YWx1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cbiAgdmFyIF9wcm90byA9IFNpbXBsZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy52YWx1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3RyICs9IHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlW2luZGV4XSArIFwiO1wiO1xuICAgICAgICBpZiAodGhpcy52YWx1ZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlICsgXCI7XCI7XG4gIH07XG5cbiAgcmV0dXJuIFNpbXBsZVJ1bGU7XG59KCk7XG52YXIga2V5c01hcCA9IHtcbiAgJ0BjaGFyc2V0JzogdHJ1ZSxcbiAgJ0BpbXBvcnQnOiB0cnVlLFxuICAnQG5hbWVzcGFjZSc6IHRydWVcbn07XG52YXIgcGx1Z2luU2ltcGxlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgaW4ga2V5c01hcCA/IG5ldyBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIHBsdWdpbnMgPSBbcGx1Z2luU3R5bGVSdWxlLCBwbHVnaW5Db25kaXRpb25hbFJ1bGUsIHBsdWdpbiwgcGx1Z2luS2V5ZnJhbWVSdWxlLCBwbHVnaW5Gb250RmFjZVJ1bGUsIHBsdWdpblZpZXdwb3J0UnVsZSwgcGx1Z2luU2ltcGxlUnVsZV07XG5cbnZhciBkZWZhdWx0VXBkYXRlT3B0aW9ucyA9IHtcbiAgcHJvY2VzczogdHJ1ZVxufTtcbnZhciBmb3JjZVVwZGF0ZU9wdGlvbnMgPSB7XG4gIGZvcmNlOiB0cnVlLFxuICBwcm9jZXNzOiB0cnVlXG4gIC8qKlxuICAgKiBDb250YWlucyBydWxlcyBvYmplY3RzIGFuZCBhbGxvd3MgYWRkaW5nL3JlbW92aW5nIGV0Yy5cbiAgICogSXMgdXNlZCBmb3IgZS5nLiBieSBgU3R5bGVTaGVldGAgb3IgYENvbmRpdGlvbmFsUnVsZWAuXG4gICAqL1xuXG59O1xuXG52YXIgUnVsZUxpc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBSdWxlcyByZWdpc3RyeSBmb3IgYWNjZXNzIGJ5IC5nZXQoKSBtZXRob2QuXG4gIC8vIEl0IGNvbnRhaW5zIHRoZSBzYW1lIHJ1bGUgcmVnaXN0ZXJlZCBieSBuYW1lIGFuZCBieSBzZWxlY3Rvci5cbiAgLy8gT3JpZ2luYWwgc3R5bGVzIG9iamVjdC5cbiAgLy8gVXNlZCB0byBlbnN1cmUgY29ycmVjdCBydWxlcyBvcmRlci5cbiAgZnVuY3Rpb24gUnVsZUxpc3Qob3B0aW9ucykge1xuICAgIHRoaXMubWFwID0ge307XG4gICAgdGhpcy5yYXcgPSB7fTtcbiAgICB0aGlzLmluZGV4ID0gW107XG4gICAgdGhpcy5jb3VudGVyID0gMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5jbGFzc2VzID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5jbGFzc2VzID0gb3B0aW9ucy5jbGFzc2VzO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gb3B0aW9ucy5rZXlmcmFtZXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZS5cbiAgICpcbiAgICogV2lsbCBub3QgcmVuZGVyIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUnVsZUxpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQobmFtZSwgZGVjbCwgcnVsZU9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGFyZW50ID0gX3RoaXMkb3B0aW9ucy5wYXJlbnQsXG4gICAgICAgIHNoZWV0ID0gX3RoaXMkb3B0aW9ucy5zaGVldCxcbiAgICAgICAganNzID0gX3RoaXMkb3B0aW9ucy5qc3MsXG4gICAgICAgIFJlbmRlcmVyID0gX3RoaXMkb3B0aW9ucy5SZW5kZXJlcixcbiAgICAgICAgZ2VuZXJhdGVJZCA9IF90aGlzJG9wdGlvbnMuZ2VuZXJhdGVJZCxcbiAgICAgICAgc2NvcGVkID0gX3RoaXMkb3B0aW9ucy5zY29wZWQ7XG5cbiAgICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHtcbiAgICAgIGNsYXNzZXM6IHRoaXMuY2xhc3NlcyxcbiAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAganNzOiBqc3MsXG4gICAgICBSZW5kZXJlcjogUmVuZGVyZXIsXG4gICAgICBnZW5lcmF0ZUlkOiBnZW5lcmF0ZUlkLFxuICAgICAgc2NvcGVkOiBzY29wZWQsXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAga2V5ZnJhbWVzOiB0aGlzLmtleWZyYW1lcyxcbiAgICAgIHNlbGVjdG9yOiB1bmRlZmluZWRcbiAgICB9LCBydWxlT3B0aW9ucyk7IC8vIFdoZW4gdXNlciB1c2VzIC5jcmVhdGVTdHlsZVNoZWV0KCksIGR1cGxpY2F0ZSBuYW1lcyBhcmUgbm90IHBvc3NpYmxlLCBidXRcbiAgICAvLyBgc2hlZXQuYWRkUnVsZSgpYCBvcGVucyB0aGUgZG9vciBmb3IgYW55IGR1cGxpY2F0ZSBydWxlIG5hbWUuIFdoZW4gdGhpcyBoYXBwZW5zXG4gICAgLy8gd2UgbmVlZCB0byBtYWtlIHRoZSBrZXkgdW5pcXVlIHdpdGhpbiB0aGlzIFJ1bGVMaXN0IGluc3RhbmNlIHNjb3BlLlxuXG5cbiAgICB2YXIga2V5ID0gbmFtZTtcblxuICAgIGlmIChuYW1lIGluIHRoaXMucmF3KSB7XG4gICAgICBrZXkgPSBuYW1lICsgXCItZFwiICsgdGhpcy5jb3VudGVyKys7XG4gICAgfSAvLyBXZSBuZWVkIHRvIHNhdmUgdGhlIG9yaWdpbmFsIGRlY2wgYmVmb3JlIGNyZWF0aW5nIHRoZSBydWxlXG4gICAgLy8gYmVjYXVzZSBjYWNoZSBwbHVnaW4gbmVlZHMgdG8gdXNlIGl0IGFzIGEga2V5IHRvIHJldHVybiBhIGNhY2hlZCBydWxlLlxuXG5cbiAgICB0aGlzLnJhd1trZXldID0gZGVjbDtcblxuICAgIGlmIChrZXkgaW4gdGhpcy5jbGFzc2VzKSB7XG4gICAgICAvLyBFLmcuIHJ1bGVzIGluc2lkZSBvZiBAbWVkaWEgY29udGFpbmVyXG4gICAgICBvcHRpb25zLnNlbGVjdG9yID0gXCIuXCIgKyBlc2NhcGUodGhpcy5jbGFzc2VzW2tleV0pO1xuICAgIH1cblxuICAgIHZhciBydWxlID0gY3JlYXRlUnVsZShrZXksIGRlY2wsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5yZWdpc3RlcihydWxlKTtcbiAgICB2YXIgaW5kZXggPSBvcHRpb25zLmluZGV4ID09PSB1bmRlZmluZWQgPyB0aGlzLmluZGV4Lmxlbmd0aCA6IG9wdGlvbnMuaW5kZXg7XG4gICAgdGhpcy5pbmRleC5zcGxpY2UoaW5kZXgsIDAsIHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hcFtuYW1lXTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHJ1bGUpIHtcbiAgICB0aGlzLnVucmVnaXN0ZXIocnVsZSk7XG4gICAgZGVsZXRlIHRoaXMucmF3W3J1bGUua2V5XTtcbiAgICB0aGlzLmluZGV4LnNwbGljZSh0aGlzLmluZGV4LmluZGV4T2YocnVsZSksIDEpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXguaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogUnVuIGBvblByb2Nlc3NSdWxlKClgIHBsdWdpbnMgb24gZXZlcnkgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucHJvY2VzcyA9IGZ1bmN0aW9uIHByb2Nlc3MoKSB7XG4gICAgdmFyIHBsdWdpbnMgPSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnM7IC8vIFdlIG5lZWQgdG8gY2xvbmUgYXJyYXkgYmVjYXVzZSBpZiB3ZSBtb2RpZnkgdGhlIGluZGV4IHNvbWV3aGVyZSBlbHNlIGR1cmluZyBhIGxvb3BcbiAgICAvLyB3ZSBlbmQgdXAgd2l0aCB2ZXJ5IGhhcmQtdG8tdHJhY2stZG93biBzaWRlIGVmZmVjdHMuXG5cbiAgICB0aGlzLmluZGV4LnNsaWNlKDApLmZvckVhY2gocGx1Z2lucy5vblByb2Nlc3NSdWxlLCBwbHVnaW5zKTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBydWxlIGluIGAubWFwYCwgYC5jbGFzc2VzYCBhbmQgYC5rZXlmcmFtZXNgIG1hcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIocnVsZSkge1xuICAgIHRoaXMubWFwW3J1bGUua2V5XSA9IHJ1bGU7XG5cbiAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFN0eWxlUnVsZSkge1xuICAgICAgdGhpcy5tYXBbcnVsZS5zZWxlY3Rvcl0gPSBydWxlO1xuICAgICAgaWYgKHJ1bGUuaWQpIHRoaXMuY2xhc3Nlc1tydWxlLmtleV0gPSBydWxlLmlkO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUgJiYgdGhpcy5rZXlmcmFtZXMpIHtcbiAgICAgIHRoaXMua2V5ZnJhbWVzW3J1bGUubmFtZV0gPSBydWxlLmlkO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVW5yZWdpc3RlciBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyKHJ1bGUpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbcnVsZS5rZXldO1xuXG4gICAgaWYgKHJ1bGUgaW5zdGFuY2VvZiBTdHlsZVJ1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXTtcbiAgICAgIGRlbGV0ZSB0aGlzLmNsYXNzZXNbcnVsZS5rZXldO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmtleWZyYW1lc1tydWxlLm5hbWVdO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBmdW5jdGlvbiB2YWx1ZXMgd2l0aCBhIG5ldyBkYXRhLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIG5hbWU7XG4gICAgdmFyIGRhdGE7XG4gICAgdmFyIG9wdGlvbnM7XG5cbiAgICBpZiAodHlwZW9mIChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTsgLy8gJEZsb3dGaXhNZVtpbnZhbGlkLXR1cGxlLWluZGV4XVxuXG4gICAgICBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdOyAvLyAkRmxvd0ZpeE1lW2ludmFsaWQtdHVwbGUtaW5kZXhdXG5cbiAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF07IC8vICRGbG93Rml4TWVbaW52YWxpZC10dXBsZS1pbmRleF1cblxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcbiAgICAgIG5hbWUgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB0aGlzLnVwZGF0ZU9uZSh0aGlzLm1hcFtuYW1lXSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmluZGV4Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB0aGlzLnVwZGF0ZU9uZSh0aGlzLmluZGV4W2luZGV4XSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFeGVjdXRlIHBsdWdpbnMsIHVwZGF0ZSBydWxlIHByb3BzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVPbmUgPSBmdW5jdGlvbiB1cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VXBkYXRlT3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkb3B0aW9uczIgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIHBsdWdpbnMgPSBfdGhpcyRvcHRpb25zMi5qc3MucGx1Z2lucyxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zMi5zaGVldDsgLy8gSXQgaXMgYSBydWxlcyBjb250YWluZXIgbGlrZSBmb3IgZS5nLiBDb25kaXRpb25hbFJ1bGUuXG5cbiAgICBpZiAocnVsZS5ydWxlcyBpbnN0YW5jZW9mIFJ1bGVMaXN0KSB7XG4gICAgICBydWxlLnJ1bGVzLnVwZGF0ZShkYXRhLCBvcHRpb25zKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICB2YXIgc3R5bGUgPSBzdHlsZVJ1bGUuc3R5bGU7XG4gICAgcGx1Z2lucy5vblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucyk7IC8vIFdlIHJlbHkgb24gYSBuZXcgYHN0eWxlYCByZWYgaW4gY2FzZSBpdCB3YXMgbXV0YXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vay5cblxuICAgIGlmIChvcHRpb25zLnByb2Nlc3MgJiYgc3R5bGUgJiYgc3R5bGUgIT09IHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBydW4gdGhlIHBsdWdpbnMgaW4gY2FzZSBuZXcgYHN0eWxlYCByZWxpZXMgb24gc3ludGF4IHBsdWdpbnMuXG4gICAgICBwbHVnaW5zLm9uUHJvY2Vzc1N0eWxlKHN0eWxlUnVsZS5zdHlsZSwgc3R5bGVSdWxlLCBzaGVldCk7IC8vIFVwZGF0ZSBhbmQgYWRkIHByb3BzLlxuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgICB2YXIgbmV4dFZhbHVlID0gc3R5bGVSdWxlLnN0eWxlW3Byb3BdO1xuICAgICAgICB2YXIgcHJldlZhbHVlID0gc3R5bGVbcHJvcF07IC8vIFdlIG5lZWQgdG8gdXNlIGBmb3JjZTogdHJ1ZWAgYmVjYXVzZSBgcnVsZS5zdHlsZWAgaGFzIGJlZW4gdXBkYXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vaywgc28gYHJ1bGUucHJvcCgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIENTU09NIHJ1bGUuXG4gICAgICAgIC8vIFdlIGRvIHRoaXMgY29tcGFyaXNvbiB0byBhdm9pZCB1bm5lZWRlZCBgcnVsZS5wcm9wKClgIGNhbGxzLCBzaW5jZSB3ZSBoYXZlIHRoZSBvbGQgYHN0eWxlYCBvYmplY3QgaGVyZS5cblxuICAgICAgICBpZiAobmV4dFZhbHVlICE9PSBwcmV2VmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChwcm9wLCBuZXh0VmFsdWUsIGZvcmNlVXBkYXRlT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gUmVtb3ZlIHByb3BzLlxuXG5cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHZhciBfbmV4dFZhbHVlID0gc3R5bGVSdWxlLnN0eWxlW19wcm9wXTtcbiAgICAgICAgdmFyIF9wcmV2VmFsdWUgPSBzdHlsZVtfcHJvcF07IC8vIFdlIG5lZWQgdG8gdXNlIGBmb3JjZTogdHJ1ZWAgYmVjYXVzZSBgcnVsZS5zdHlsZWAgaGFzIGJlZW4gdXBkYXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vaywgc28gYHJ1bGUucHJvcCgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIENTU09NIHJ1bGUuXG4gICAgICAgIC8vIFdlIGRvIHRoaXMgY29tcGFyaXNvbiB0byBhdm9pZCB1bm5lZWRlZCBgcnVsZS5wcm9wKClgIGNhbGxzLCBzaW5jZSB3ZSBoYXZlIHRoZSBvbGQgYHN0eWxlYCBvYmplY3QgaGVyZS5cblxuICAgICAgICBpZiAoX25leHRWYWx1ZSA9PSBudWxsICYmIF9uZXh0VmFsdWUgIT09IF9wcmV2VmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChfcHJvcCwgbnVsbCwgZm9yY2VVcGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29udmVydCBydWxlcyB0byBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMuaW5kZXhbaW5kZXhdO1xuICAgICAgdmFyIGNzcyA9IHJ1bGUudG9TdHJpbmcob3B0aW9ucyk7IC8vIE5vIG5lZWQgdG8gcmVuZGVyIGFuIGVtcHR5IHJ1bGUuXG5cbiAgICAgIGlmICghY3NzICYmICFsaW5rKSBjb250aW51ZTtcbiAgICAgIGlmIChzdHIpIHN0ciArPSAnXFxuJztcbiAgICAgIHN0ciArPSBjc3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICByZXR1cm4gUnVsZUxpc3Q7XG59KCk7XG5cbnZhciBTdHlsZVNoZWV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5kZXBsb3llZCA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dGFjaGVkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5yZW5kZXJlciA9IHZvaWQgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5xdWV1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgdGhpcy5kZXBsb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuY2xhc3NlcyA9IHt9O1xuICAgIHRoaXMua2V5ZnJhbWVzID0ge307XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNoZWV0OiB0aGlzLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAga2V5ZnJhbWVzOiB0aGlzLmtleWZyYW1lc1xuICAgIH0pO1xuXG4gICAgaWYgKG9wdGlvbnMuUmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgb3B0aW9ucy5SZW5kZXJlcih0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KHRoaXMub3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGVzW25hbWVdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogQXR0YWNoIHJlbmRlcmFibGUgdG8gdGhlIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIGlmICh0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5hdHRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gdHJ1ZTsgLy8gT3JkZXIgaXMgaW1wb3J0YW50LCBiZWNhdXNlIHdlIGNhbid0IHVzZSBpbnNlcnRSdWxlIEFQSSBpZiBzdHlsZSBlbGVtZW50IGlzIG5vdCBhdHRhY2hlZC5cblxuICAgIGlmICghdGhpcy5kZXBsb3llZCkgdGhpcy5kZXBsb3koKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHJlbmRlcmFibGUgZnJvbSByZW5kZXIgdHJlZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGV0YWNoID0gZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgIGlmICghdGhpcy5hdHRhY2hlZCkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuZGV0YWNoKCk7XG4gICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBydWxlIHRvIHRoZSBjdXJyZW50IHN0eWxlc2hlZXQuXG4gICAqIFdpbGwgaW5zZXJ0IGEgcnVsZSBhbHNvIGFmdGVyIHRoZSBzdHlsZXNoZWV0IGhhcyBiZWVuIHJlbmRlcmVkIGZpcnN0IHRpbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlOyAvLyBQbHVnaW5zIGNhbiBjcmVhdGUgcnVsZXMuXG4gICAgLy8gSW4gb3JkZXIgdG8gcHJlc2VydmUgdGhlIHJpZ2h0IG9yZGVyLCB3ZSBuZWVkIHRvIHF1ZXVlIGFsbCBgLmFkZFJ1bGVgIGNhbGxzLFxuICAgIC8vIHdoaWNoIGhhcHBlbiBhZnRlciB0aGUgZmlyc3QgYHJ1bGVzLmFkZCgpYCBjYWxsLlxuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgIXF1ZXVlKSB0aGlzLnF1ZXVlID0gW107XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgIGlmICghdGhpcy5kZXBsb3llZCkgcmV0dXJuIHJ1bGU7IC8vIERvbid0IGluc2VydCBydWxlIGRpcmVjdGx5IGlmIHRoZXJlIGlzIG5vIHN0cmluZ2lmaWVkIHZlcnNpb24geWV0LlxuICAgICAgLy8gSXQgd2lsbCBiZSBpbnNlcnRlZCBhbGwgdG9nZXRoZXIgd2hlbiAuYXR0YWNoIGlzIGNhbGxlZC5cblxuICAgICAgaWYgKHF1ZXVlKSBxdWV1ZS5wdXNoKHJ1bGUpO2Vsc2Uge1xuICAgICAgICB0aGlzLmluc2VydFJ1bGUocnVsZSk7XG5cbiAgICAgICAgaWYgKHRoaXMucXVldWUpIHtcbiAgICAgICAgICB0aGlzLnF1ZXVlLmZvckVhY2godGhpcy5pbnNlcnRSdWxlLCB0aGlzKTtcbiAgICAgICAgICB0aGlzLnF1ZXVlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9IC8vIFdlIGNhbid0IGFkZCBydWxlcyB0byBhIGRldGFjaGVkIHN0eWxlIG5vZGUuXG4gICAgLy8gV2Ugd2lsbCByZWRlcGxveSB0aGUgc2hlZXQgb25jZSB1c2VyIHdpbGwgYXR0YWNoIGl0LlxuXG5cbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBydWxlIGludG8gdGhlIFN0eWxlU2hlZXRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmluc2VydFJ1bGUocnVsZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIGFkZCBydWxlcy5cbiAgICogV2lsbCByZW5kZXIgYWxzbyBhZnRlciBTdHlsZSBTaGVldCB3YXMgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGVzID0gZnVuY3Rpb24gYWRkUnVsZXMoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdmFyIGFkZGVkID0gW107XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLmFkZFJ1bGUobmFtZSwgc3R5bGVzW25hbWVdLCBvcHRpb25zKTtcbiAgICAgIGlmIChydWxlKSBhZGRlZC5wdXNoKHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRlZDtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZSBieSBuYW1lLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlIGJ5IG5hbWUuXG4gICAqIFJldHVybnMgYHRydWVgOiBpZiBydWxlIGhhcyBiZWVuIGRlbGV0ZWQgZnJvbSB0aGUgRE9NLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWxldGVSdWxlID0gZnVuY3Rpb24gZGVsZXRlUnVsZShuYW1lKSB7XG4gICAgdmFyIHJ1bGUgPSB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcgPyBuYW1lIDogdGhpcy5ydWxlcy5nZXQobmFtZSk7XG5cbiAgICBpZiAoIXJ1bGUgfHwgLy8gU3R5bGUgc2hlZXQgd2FzIGNyZWF0ZWQgd2l0aG91dCBsaW5rOiB0cnVlIGFuZCBhdHRhY2hlZCwgaW4gdGhpcyBjYXNlIHdlXG4gICAgLy8gd29uJ3QgYmUgYWJsZSB0byByZW1vdmUgdGhlIENTUyBydWxlIGZyb20gdGhlIERPTS5cbiAgICB0aGlzLmF0dGFjaGVkICYmICFydWxlLnJlbmRlcmFibGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnJlbW92ZShydWxlKTtcblxuICAgIGlmICh0aGlzLmF0dGFjaGVkICYmIHJ1bGUucmVuZGVyYWJsZSAmJiB0aGlzLnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5kZWxldGVSdWxlKHJ1bGUucmVuZGVyYWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBEZXBsb3kgcHVyZSBDU1Mgc3RyaW5nIHRvIGEgcmVuZGVyYWJsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmRlcGxveSgpO1xuICAgIHRoaXMuZGVwbG95ZWQgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMkcnVsZXM7XG5cbiAgICAoX3RoaXMkcnVsZXMgPSB0aGlzLnJ1bGVzKS51cGRhdGUuYXBwbHkoX3RoaXMkcnVsZXMsIGFyZ3VtZW50cyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyBhIHNpbmdsZSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVPbmUgPSBmdW5jdGlvbiB1cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucykge1xuICAgIHRoaXMucnVsZXMudXBkYXRlT25lKHJ1bGUsIGRhdGEsIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbnZhciBQbHVnaW5zUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQbHVnaW5zUmVnaXN0cnkoKSB7XG4gICAgdGhpcy5wbHVnaW5zID0ge1xuICAgICAgaW50ZXJuYWw6IFtdLFxuICAgICAgZXh0ZXJuYWw6IFtdXG4gICAgfTtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gdm9pZCAwO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBsdWdpbnNSZWdpc3RyeS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIENhbGwgYG9uQ3JlYXRlUnVsZWAgaG9va3MgYW5kIHJldHVybiBhbiBvYmplY3QgaWYgcmV0dXJuZWQgYnkgYSBob29rLlxuICAgKi9cbiAgX3Byb3RvLm9uQ3JlYXRlUnVsZSA9IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZVtpXShuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICAgIGlmIChydWxlKSByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzUnVsZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1J1bGUgPSBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS5pc1Byb2Nlc3NlZCkgcmV0dXJuO1xuICAgIHZhciBzaGVldCA9IHJ1bGUub3B0aW9ucy5zaGVldDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1J1bGVbaV0ocnVsZSwgc2hlZXQpO1xuICAgIH1cblxuICAgIGlmIChydWxlLnN0eWxlKSB0aGlzLm9uUHJvY2Vzc1N0eWxlKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICBydWxlLmlzUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzU3R5bGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblByb2Nlc3NTdHlsZSA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTdHlsZS5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBydWxlLnN0eWxlID0gdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTdHlsZVtpXShydWxlLnN0eWxlLCBydWxlLCBzaGVldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NTaGVldGAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1NoZWV0ID0gZnVuY3Rpb24gb25Qcm9jZXNzU2hlZXQoc2hlZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU2hlZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU2hlZXRbaV0oc2hlZXQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25VcGRhdGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblVwZGF0ZSA9IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uVXBkYXRlW2ldKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uQ2hhbmdlVmFsdWVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vbkNoYW5nZVZhbHVlID0gZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICAgIHZhciBwcm9jZXNzZWRWYWx1ZSA9IHZhbHVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uQ2hhbmdlVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHByb2Nlc3NlZFZhbHVlID0gdGhpcy5yZWdpc3RyeS5vbkNoYW5nZVZhbHVlW2ldKHByb2Nlc3NlZFZhbHVlLCBwcm9wLCBydWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkVmFsdWU7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgcGx1Z2luLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UobmV3UGx1Z2luLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgcXVldWU6ICdleHRlcm5hbCdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHBsdWdpbnMgPSB0aGlzLnBsdWdpbnNbb3B0aW9ucy5xdWV1ZV07IC8vIEF2b2lkcyBhcHBseWluZyBzYW1lIHBsdWdpbiB0d2ljZSwgYXQgbGVhc3QgYmFzZWQgb24gcmVmLlxuXG4gICAgaWYgKHBsdWdpbnMuaW5kZXhPZihuZXdQbHVnaW4pICE9PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBsdWdpbnMucHVzaChuZXdQbHVnaW4pO1xuICAgIHRoaXMucmVnaXN0cnkgPSBbXS5jb25jYXQodGhpcy5wbHVnaW5zLmV4dGVybmFsLCB0aGlzLnBsdWdpbnMuaW50ZXJuYWwpLnJlZHVjZShmdW5jdGlvbiAocmVnaXN0cnksIHBsdWdpbikge1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBwbHVnaW4pIHtcbiAgICAgICAgaWYgKG5hbWUgaW4gcmVnaXN0cnkpIHtcbiAgICAgICAgICByZWdpc3RyeVtuYW1lXS5wdXNoKHBsdWdpbltuYW1lXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBVbmtub3duIGhvb2sgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlZ2lzdHJ5O1xuICAgIH0sIHtcbiAgICAgIG9uQ3JlYXRlUnVsZTogW10sXG4gICAgICBvblByb2Nlc3NSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1N0eWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1NoZWV0OiBbXSxcbiAgICAgIG9uQ2hhbmdlVmFsdWU6IFtdLFxuICAgICAgb25VcGRhdGU6IFtdXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFBsdWdpbnNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBTaGVldHMgcmVnaXN0cnkgdG8gYWNjZXNzIHRoZW0gYWxsIGF0IG9uZSBwbGFjZS5cbiAqL1xudmFyIFNoZWV0c1JlZ2lzdHJ5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzUmVnaXN0cnkoKSB7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c1JlZ2lzdHJ5LnByb3RvdHlwZTtcblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoc2hlZXQpIHtcbiAgICB2YXIgcmVnaXN0cnkgPSB0aGlzLnJlZ2lzdHJ5O1xuICAgIHZhciBpbmRleCA9IHNoZWV0Lm9wdGlvbnMuaW5kZXg7XG4gICAgaWYgKHJlZ2lzdHJ5LmluZGV4T2Yoc2hlZXQpICE9PSAtMSkgcmV0dXJuO1xuXG4gICAgaWYgKHJlZ2lzdHJ5Lmxlbmd0aCA9PT0gMCB8fCBpbmRleCA+PSB0aGlzLmluZGV4KSB7XG4gICAgICByZWdpc3RyeS5wdXNoKHNoZWV0KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZpbmQgYSBwb3NpdGlvbi5cblxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlZ2lzdHJ5W2ldLm9wdGlvbnMuaW5kZXggPiBpbmRleCkge1xuICAgICAgICByZWdpc3RyeS5zcGxpY2UoaSwgMCwgc2hlZXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXNldCB0aGUgcmVnaXN0cnkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHNoZWV0KSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5yZWdpc3RyeS5pbmRleE9mKHNoZWV0KTtcbiAgICB0aGlzLnJlZ2lzdHJ5LnNwbGljZShpbmRleCwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnQgYWxsIGF0dGFjaGVkIHNoZWV0cyB0byBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoX3RlbXApIHtcbiAgICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgICBhdHRhY2hlZCA9IF9yZWYuYXR0YWNoZWQsXG4gICAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhdHRhY2hlZFwiXSk7XG5cbiAgICB2YXIgY3NzID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzaGVldCA9IHRoaXMucmVnaXN0cnlbaV07XG5cbiAgICAgIGlmIChhdHRhY2hlZCAhPSBudWxsICYmIHNoZWV0LmF0dGFjaGVkICE9PSBhdHRhY2hlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNzcykgY3NzICs9ICdcXG4nO1xuICAgICAgY3NzICs9IHNoZWV0LnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBjc3M7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c1JlZ2lzdHJ5LCBbe1xuICAgIGtleTogXCJpbmRleFwiLFxuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBoaWdoZXN0IGluZGV4IG51bWJlci5cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5Lmxlbmd0aCA9PT0gMCA/IDAgOiB0aGlzLnJlZ2lzdHJ5W3RoaXMucmVnaXN0cnkubGVuZ3RoIC0gMV0ub3B0aW9ucy5pbmRleDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzUmVnaXN0cnk7XG59KCk7XG5cbi8qKlxuICogVGhpcyBpcyBhIGdsb2JhbCBzaGVldHMgcmVnaXN0cnkuIE9ubHkgRG9tUmVuZGVyZXIgd2lsbCBhZGQgc2hlZXRzIHRvIGl0LlxuICogT24gdGhlIHNlcnZlciBvbmUgc2hvdWxkIHVzZSBhbiBvd24gU2hlZXRzUmVnaXN0cnkgaW5zdGFuY2UgYW5kIGFkZCB0aGVcbiAqIHNoZWV0cyB0byBpdCwgYmVjYXVzZSB5b3UgbmVlZCB0byBtYWtlIHN1cmUgdG8gY3JlYXRlIGEgbmV3IHJlZ2lzdHJ5IGZvclxuICogZWFjaCByZXF1ZXN0IGluIG9yZGVyIHRvIG5vdCBsZWFrIHNoZWV0cyBhY3Jvc3MgcmVxdWVzdHMuXG4gKi9cblxudmFyIHJlZ2lzdHJ5ID0gbmV3IFNoZWV0c1JlZ2lzdHJ5KCk7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbi8qKlxuICogTm93IHRoYXQgYGdsb2JhbFRoaXNgIGlzIGF2YWlsYWJsZSBvbiBtb3N0IHBsYXRmb3Jtc1xuICogKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL2dsb2JhbFRoaXMjYnJvd3Nlcl9jb21wYXRpYmlsaXR5KVxuICogd2UgY2hlY2sgZm9yIGBnbG9iYWxUaGlzYCBmaXJzdC4gYGdsb2JhbFRoaXNgIGlzIG5lY2Vzc2FyeSBmb3IganNzXG4gKiB0byBydW4gaW4gQWdvcmljJ3Mgc2VjdXJlIHZlcnNpb24gb2YgSmF2YVNjcmlwdCAoU0VTKS4gVW5kZXIgU0VTLFxuICogYGdsb2JhbFRoaXNgIGV4aXN0cywgYnV0IGB3aW5kb3dgLCBgc2VsZmAsIGFuZCBgRnVuY3Rpb24oJ3JldHVyblxuICogdGhpcycpKClgIGFyZSBhbGwgdW5kZWZpbmVkIGZvciBzZWN1cml0eSByZWFzb25zLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG4gKi9cbnZhciBnbG9iYWxUaGlzJDEgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT09IE1hdGggPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBucyA9ICcyZjFhY2M2YzNhNjA2YjA4MmU1ZWVmNWU1NDQxNGZmYic7XG5pZiAoZ2xvYmFsVGhpcyQxW25zXSA9PSBudWxsKSBnbG9iYWxUaGlzJDFbbnNdID0gMDsgLy8gQnVuZGxlIG1heSBjb250YWluIG11bHRpcGxlIEpTUyB2ZXJzaW9ucyBhdCB0aGUgc2FtZSB0aW1lLiBJbiBvcmRlciB0byBpZGVudGlmeVxuLy8gdGhlIGN1cnJlbnQgdmVyc2lvbiB3aXRoIGp1c3Qgb25lIHNob3J0IG51bWJlciBhbmQgdXNlIGl0IGZvciBjbGFzc2VzIGdlbmVyYXRpb25cbi8vIHdlIHVzZSBhIGNvdW50ZXIuIEFsc28gaXQgaXMgbW9yZSBhY2N1cmF0ZSwgYmVjYXVzZSB1c2VyIGNhbiBtYW51YWxseSByZWV2YWx1YXRlXG4vLyB0aGUgbW9kdWxlLlxuXG52YXIgbW9kdWxlSWQgPSBnbG9iYWxUaGlzJDFbbnNdKys7XG5cbnZhciBtYXhSdWxlcyA9IDFlMTA7XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyB1bmlxdWUgY2xhc3MgbmFtZXMgYmFzZWQgb24gY291bnRlcnMuXG4gKiBXaGVuIG5ldyBnZW5lcmF0b3IgZnVuY3Rpb24gaXMgY3JlYXRlZCwgcnVsZSBjb3VudGVyIGlzIHJlc2V0ZWQuXG4gKiBXZSBuZWVkIHRvIHJlc2V0IHRoZSBydWxlIGNvdW50ZXIgZm9yIFNTUiBmb3IgZWFjaCByZXF1ZXN0LlxuICovXG52YXIgY3JlYXRlR2VuZXJhdGVJZCA9IGZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRlSWQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcblxuICB2YXIgZ2VuZXJhdGVJZCA9IGZ1bmN0aW9uIGdlbmVyYXRlSWQocnVsZSwgc2hlZXQpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuXG4gICAgaWYgKHJ1bGVDb3VudGVyID4gbWF4UnVsZXMpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4gUnVsZSBjb3VudGVyIGlzIGF0IFwiICsgcnVsZUNvdW50ZXIgKyBcIi5cIikgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdmFyIGpzc0lkID0gJyc7XG4gICAgdmFyIHByZWZpeCA9ICcnO1xuXG4gICAgaWYgKHNoZWV0KSB7XG4gICAgICBpZiAoc2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgpIHtcbiAgICAgICAgcHJlZml4ID0gc2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXg7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGVldC5vcHRpb25zLmpzcy5pZCAhPSBudWxsKSB7XG4gICAgICAgIGpzc0lkID0gU3RyaW5nKHNoZWV0Lm9wdGlvbnMuanNzLmlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5taW5pZnkpIHtcbiAgICAgIC8vIFVzaW5nIFwiY1wiIGJlY2F1c2UgYSBudW1iZXIgY2FuJ3QgYmUgdGhlIGZpcnN0IGNoYXIgaW4gYSBjbGFzcyBuYW1lLlxuICAgICAgcmV0dXJuIFwiXCIgKyAocHJlZml4IHx8ICdjJykgKyBtb2R1bGVJZCArIGpzc0lkICsgcnVsZUNvdW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeCArIHJ1bGUua2V5ICsgXCItXCIgKyBtb2R1bGVJZCArIChqc3NJZCA/IFwiLVwiICsganNzSWQgOiAnJykgKyBcIi1cIiArIHJ1bGVDb3VudGVyO1xuICB9O1xuXG4gIHJldHVybiBnZW5lcmF0ZUlkO1xufTtcblxuLyoqXG4gKiBDYWNoZSB0aGUgdmFsdWUgZnJvbSB0aGUgZmlyc3QgdGltZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZC5cbiAqL1xudmFyIG1lbW9pemUgPSBmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciB2YWx1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXZhbHVlKSB2YWx1ZSA9IGZuKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBHZXQgYSBzdHlsZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xudmFyIGdldFByb3BlcnR5VmFsdWUgPSBmdW5jdGlvbiBnZXRQcm9wZXJ0eVZhbHVlKGNzc1J1bGUsIHByb3ApIHtcbiAgdHJ5IHtcbiAgICAvLyBTdXBwb3J0IENTU1RPTS5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgcmV0dXJuIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuZ2V0KHByb3ApO1xuICAgIH1cblxuICAgIHJldHVybiBjc3NSdWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElFIG1heSB0aHJvdyBpZiBwcm9wZXJ0eSBpcyB1bmtub3duLlxuICAgIHJldHVybiAnJztcbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAqL1xudmFyIHNldFByb3BlcnR5ID0gZnVuY3Rpb24gc2V0UHJvcGVydHkoY3NzUnVsZSwgcHJvcCwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgY3NzVmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgY3NzVmFsdWUgPSB0b0Nzc1ZhbHVlKHZhbHVlLCB0cnVlKTtcblxuICAgICAgaWYgKHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnIWltcG9ydGFudCcpIHtcbiAgICAgICAgY3NzUnVsZS5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wLCBjc3NWYWx1ZSwgJ2ltcG9ydGFudCcpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IC8vIFN1cHBvcnQgQ1NTVE9NLlxuXG5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5zZXQocHJvcCwgY3NzVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElFIG1heSB0aHJvdyBpZiBwcm9wZXJ0eSBpcyB1bmtub3duLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYSBzdHlsZSBwcm9wZXJ0eS5cbiAqL1xudmFyIHJlbW92ZVByb3BlcnR5ID0gZnVuY3Rpb24gcmVtb3ZlUHJvcGVydHkoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIC8vIFN1cHBvcnQgQ1NTVE9NLlxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICBjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwLmRlbGV0ZShwcm9wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzUnVsZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gRE9NRXhjZXB0aW9uIFxcXCJcIiArIGVyci5tZXNzYWdlICsgXCJcXFwiIHdhcyB0aHJvd24uIFRyaWVkIHRvIHJlbW92ZSBwcm9wZXJ0eSBcXFwiXCIgKyBwcm9wICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgdGhlIHNlbGVjdG9yLlxuICovXG52YXIgc2V0U2VsZWN0b3IgPSBmdW5jdGlvbiBzZXRTZWxlY3Rvcihjc3NSdWxlLCBzZWxlY3RvclRleHQpIHtcbiAgY3NzUnVsZS5zZWxlY3RvclRleHQgPSBzZWxlY3RvclRleHQ7IC8vIFJldHVybiBmYWxzZSBpZiBzZXR0ZXIgd2FzIG5vdCBzdWNjZXNzZnVsLlxuICAvLyBDdXJyZW50bHkgd29ya3MgaW4gY2hyb21lIG9ubHkuXG5cbiAgcmV0dXJuIGNzc1J1bGUuc2VsZWN0b3JUZXh0ID09PSBzZWxlY3RvclRleHQ7XG59O1xuLyoqXG4gKiBHZXRzIHRoZSBgaGVhZGAgZWxlbWVudCB1cG9uIHRoZSBmaXJzdCBjYWxsIGFuZCBjYWNoZXMgaXQuXG4gKiBXZSBhc3N1bWUgaXQgY2FuJ3QgYmUgbnVsbC5cbiAqL1xuXG5cbnZhciBnZXRIZWFkID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyk7XG59KTtcbi8qKlxuICogRmluZCBhdHRhY2hlZCBzaGVldCB3aXRoIGFuIGluZGV4IGhpZ2hlciB0aGFuIHRoZSBwYXNzZWQgb25lLlxuICovXG5cbmZ1bmN0aW9uIGZpbmRIaWdoZXJTaGVldChyZWdpc3RyeSwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG5cbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbmRleCA+IG9wdGlvbnMuaW5kZXggJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggdGhlIGhpZ2hlc3QgaW5kZXguXG4gKi9cblxuXG5mdW5jdGlvbiBmaW5kSGlnaGVzdFNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSByZWdpc3RyeS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBzaGVldCA9IHJlZ2lzdHJ5W2ldO1xuXG4gICAgaWYgKHNoZWV0LmF0dGFjaGVkICYmIHNoZWV0Lm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPT09IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICAgIHJldHVybiBzaGVldDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogRmluZCBhIGNvbW1lbnQgd2l0aCBcImpzc1wiIGluc2lkZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbmRDb21tZW50Tm9kZSh0ZXh0KSB7XG4gIHZhciBoZWFkID0gZ2V0SGVhZCgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5vZGUgPSBoZWFkLmNoaWxkTm9kZXNbaV07XG5cbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAmJiBub2RlLm5vZGVWYWx1ZS50cmltKCkgPT09IHRleHQpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEZpbmQgYSBub2RlIGJlZm9yZSB3aGljaCB3ZSBjYW4gaW5zZXJ0IHRoZSBzaGVldC5cbiAqL1xuZnVuY3Rpb24gZmluZFByZXZOb2RlKG9wdGlvbnMpIHtcbiAgdmFyIHJlZ2lzdHJ5JDEgPSByZWdpc3RyeS5yZWdpc3RyeTtcblxuICBpZiAocmVnaXN0cnkkMS5sZW5ndGggPiAwKSB7XG4gICAgLy8gVHJ5IHRvIGluc2VydCBiZWZvcmUgdGhlIG5leHQgaGlnaGVyIHNoZWV0LlxuICAgIHZhciBzaGVldCA9IGZpbmRIaWdoZXJTaGVldChyZWdpc3RyeSQxLCBvcHRpb25zKTtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBzaGVldC5yZW5kZXJlci5lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnRcbiAgICAgIH07XG4gICAgfSAvLyBPdGhlcndpc2UgaW5zZXJ0IGFmdGVyIHRoZSBsYXN0IGF0dGFjaGVkLlxuXG5cbiAgICBzaGVldCA9IGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnkkMSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmVudDogc2hlZXQucmVuZGVyZXIuZWxlbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBzaGVldC5yZW5kZXJlci5lbGVtZW50Lm5leHRTaWJsaW5nXG4gICAgICB9O1xuICAgIH1cbiAgfSAvLyBUcnkgdG8gZmluZCBhIGNvbW1lbnQgcGxhY2Vob2xkZXIgaWYgcmVnaXN0cnkgaXMgZW1wdHkuXG5cblxuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIGNvbW1lbnQgPSBmaW5kQ29tbWVudE5vZGUoaW5zZXJ0aW9uUG9pbnQpO1xuXG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmVudDogY29tbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBjb21tZW50Lm5leHRTaWJsaW5nXG4gICAgICB9O1xuICAgIH0gLy8gSWYgdXNlciBzcGVjaWZpZXMgYW4gaW5zZXJ0aW9uIHBvaW50IGFuZCBpdCBjYW4ndCBiZSBmb3VuZCBpbiB0aGUgZG9jdW1lbnQgLVxuICAgIC8vIGJhZCBzcGVjaWZpY2l0eSBpc3N1ZXMgbWF5IGFwcGVhci5cblxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBJbnNlcnRpb24gcG9pbnQgXFxcIlwiICsgaW5zZXJ0aW9uUG9pbnQgKyBcIlxcXCIgbm90IGZvdW5kLlwiKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogSW5zZXJ0IHN0eWxlIGVsZW1lbnQgaW50byB0aGUgRE9NLlxuICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGUoc3R5bGUsIG9wdGlvbnMpIHtcbiAgdmFyIGluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcbiAgdmFyIG5leHROb2RlID0gZmluZFByZXZOb2RlKG9wdGlvbnMpO1xuXG4gIGlmIChuZXh0Tm9kZSAhPT0gZmFsc2UgJiYgbmV4dE5vZGUucGFyZW50KSB7XG4gICAgbmV4dE5vZGUucGFyZW50Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dE5vZGUubm9kZSk7XG4gICAgcmV0dXJuO1xuICB9IC8vIFdvcmtzIHdpdGggaWZyYW1lcyBhbmQgYW55IG5vZGUgdHlwZXMuXG5cblxuICBpZiAoaW5zZXJ0aW9uUG9pbnQgJiYgdHlwZW9mIGluc2VydGlvblBvaW50Lm5vZGVUeXBlID09PSAnbnVtYmVyJykge1xuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQxMzI4NzI4L2ZvcmNlLWNhc3RpbmctaW4tZmxvd1xuICAgIHZhciBpbnNlcnRpb25Qb2ludEVsZW1lbnQgPSBpbnNlcnRpb25Qb2ludDtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IGluc2VydGlvblBvaW50RWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgaW5zZXJ0aW9uUG9pbnRFbGVtZW50Lm5leHRTaWJsaW5nKTtlbHNlIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBJbnNlcnRpb24gcG9pbnQgaXMgbm90IGluIHRoZSBET00uJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZ2V0SGVhZCgpLmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbi8qKlxuICogUmVhZCBqc3Mgbm9uY2Ugc2V0dGluZyBmcm9tIHRoZSBwYWdlIGlmIHRoZSB1c2VyIGhhcyBzZXQgaXQuXG4gKi9cblxuXG52YXIgZ2V0Tm9uY2UgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW3Byb3BlcnR5PVwiY3NwLW5vbmNlXCJdJyk7XG4gIHJldHVybiBub2RlID8gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKSA6IG51bGw7XG59KTtcblxudmFyIF9pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShjb250YWluZXIsIHJ1bGUsIGluZGV4KSB7XG4gIHRyeSB7XG4gICAgaWYgKCdpbnNlcnRSdWxlJyBpbiBjb250YWluZXIpIHtcbiAgICAgIHZhciBjID0gY29udGFpbmVyO1xuICAgICAgYy5pbnNlcnRSdWxlKHJ1bGUsIGluZGV4KTtcbiAgICB9IC8vIEtleWZyYW1lcyBydWxlLlxuICAgIGVsc2UgaWYgKCdhcHBlbmRSdWxlJyBpbiBjb250YWluZXIpIHtcbiAgICAgICAgdmFyIF9jID0gY29udGFpbmVyO1xuXG4gICAgICAgIF9jLmFwcGVuZFJ1bGUocnVsZSk7XG4gICAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gXCIgKyBlcnIubWVzc2FnZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRhaW5lci5jc3NSdWxlc1tpbmRleF07XG59O1xuXG52YXIgZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXggPSBmdW5jdGlvbiBnZXRWYWxpZFJ1bGVJbnNlcnRpb25JbmRleChjb250YWluZXIsIGluZGV4KSB7XG4gIHZhciBtYXhJbmRleCA9IGNvbnRhaW5lci5jc3NSdWxlcy5sZW5ndGg7IC8vIEluIGNhc2UgcHJldmlvdXMgaW5zZXJ0aW9uIGZhaWxzLCBwYXNzZWQgaW5kZXggbWlnaHQgYmUgd3JvbmdcblxuICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCB8fCBpbmRleCA+IG1heEluZGV4KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgcmV0dXJuIG1heEluZGV4O1xuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufTtcblxudmFyIGNyZWF0ZVN0eWxlID0gZnVuY3Rpb24gY3JlYXRlU3R5bGUoKSB7XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7IC8vIFdpdGhvdXQgaXQsIElFIHdpbGwgaGF2ZSBhIGJyb2tlbiBzb3VyY2Ugb3JkZXIgc3BlY2lmaWNpdHkgaWYgd2VcbiAgLy8gaW5zZXJ0IHJ1bGVzIGFmdGVyIHdlIGluc2VydCB0aGUgc3R5bGUgdGFnLlxuICAvLyBJdCBzZWVtcyB0byBraWNrLW9mZiB0aGUgc291cmNlIG9yZGVyIHNwZWNpZmljaXR5IGFsZ29yaXRobS5cblxuICBlbC50ZXh0Q29udGVudCA9ICdcXG4nO1xuICByZXR1cm4gZWw7XG59O1xuXG52YXIgRG9tUmVuZGVyZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBIVE1MU3R5bGVFbGVtZW50IG5lZWRzIGZpeGluZyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjY5NlxuICAvLyBXaWxsIGJlIGVtcHR5IGlmIGxpbms6IHRydWUgb3B0aW9uIGlzIG5vdCBzZXQsIGJlY2F1c2VcbiAgLy8gaXQgaXMgb25seSBmb3IgdXNlIHRvZ2V0aGVyIHdpdGggaW5zZXJ0UnVsZSBBUEkuXG4gIGZ1bmN0aW9uIERvbVJlbmRlcmVyKHNoZWV0KSB7XG4gICAgdGhpcy5nZXRQcm9wZXJ0eVZhbHVlID0gZ2V0UHJvcGVydHlWYWx1ZTtcbiAgICB0aGlzLnNldFByb3BlcnR5ID0gc2V0UHJvcGVydHk7XG4gICAgdGhpcy5yZW1vdmVQcm9wZXJ0eSA9IHJlbW92ZVByb3BlcnR5O1xuICAgIHRoaXMuc2V0U2VsZWN0b3IgPSBzZXRTZWxlY3RvcjtcbiAgICB0aGlzLmVsZW1lbnQgPSB2b2lkIDA7XG4gICAgdGhpcy5zaGVldCA9IHZvaWQgMDtcbiAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcbiAgICB0aGlzLmNzc1J1bGVzID0gW107XG4gICAgLy8gVGhlcmUgaXMgbm8gc2hlZXQgd2hlbiB0aGUgcmVuZGVyZXIgaXMgdXNlZCBmcm9tIGEgc3RhbmRhbG9uZSBTdHlsZVJ1bGUuXG4gICAgaWYgKHNoZWV0KSByZWdpc3RyeS5hZGQoc2hlZXQpO1xuICAgIHRoaXMuc2hlZXQgPSBzaGVldDtcblxuICAgIHZhciBfcmVmID0gdGhpcy5zaGVldCA/IHRoaXMuc2hlZXQub3B0aW9ucyA6IHt9LFxuICAgICAgICBtZWRpYSA9IF9yZWYubWVkaWEsXG4gICAgICAgIG1ldGEgPSBfcmVmLm1ldGEsXG4gICAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQ7XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50IHx8IGNyZWF0ZVN0eWxlKCk7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1qc3MnLCAnJyk7XG4gICAgaWYgKG1lZGlhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgICBpZiAobWV0YSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1tZXRhJywgbWV0YSk7XG4gICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICBpZiAobm9uY2UpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgbm9uY2UpO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgc3R5bGUgZWxlbWVudCBpbnRvIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBEb21SZW5kZXJlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmF0dGFjaCA9IGZ1bmN0aW9uIGF0dGFjaCgpIHtcbiAgICAvLyBJbiB0aGUgY2FzZSB0aGUgZWxlbWVudCBub2RlIGlzIGV4dGVybmFsIGFuZCBpdCBpcyBhbHJlYWR5IGluIHRoZSBET00uXG4gICAgaWYgKHRoaXMuZWxlbWVudC5wYXJlbnROb2RlIHx8ICF0aGlzLnNoZWV0KSByZXR1cm47XG4gICAgaW5zZXJ0U3R5bGUodGhpcy5lbGVtZW50LCB0aGlzLnNoZWV0Lm9wdGlvbnMpOyAvLyBXaGVuIHJ1bGVzIGFyZSBpbnNlcnRlZCB1c2luZyBgaW5zZXJ0UnVsZWAgQVBJLCBhZnRlciBgc2hlZXQuZGV0YWNoKCkuYXR0YWNoKClgXG4gICAgLy8gbW9zdCBicm93c2VycyBjcmVhdGUgYSBuZXcgQ1NTU3R5bGVTaGVldCwgZXhjZXB0IG9mIGFsbCBJRXMuXG5cbiAgICB2YXIgZGVwbG95ZWQgPSBCb29sZWFuKHRoaXMuc2hlZXQgJiYgdGhpcy5zaGVldC5kZXBsb3llZCk7XG5cbiAgICBpZiAodGhpcy5oYXNJbnNlcnRlZFJ1bGVzICYmIGRlcGxveWVkKSB7XG4gICAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVwbG95KCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgc3R5bGUgZWxlbWVudCBmcm9tIHJlbmRlciB0cmVlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgaWYgKCF0aGlzLnNoZWV0KSByZXR1cm47XG4gICAgdmFyIHBhcmVudE5vZGUgPSB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpOyAvLyBJbiB0aGUgbW9zdCBicm93c2VycywgcnVsZXMgaW5zZXJ0ZWQgdXNpbmcgaW5zZXJ0UnVsZSgpIEFQSSB3aWxsIGJlIGxvc3Qgd2hlbiBzdHlsZSBlbGVtZW50IGlzIHJlbW92ZWQuXG4gICAgLy8gVGhvdWdoIElFIHdpbGwga2VlcCB0aGVtIGFuZCB3ZSBuZWVkIGEgY29uc2lzdGVudCBiZWhhdmlvci5cblxuICAgIGlmICh0aGlzLnNoZWV0Lm9wdGlvbnMubGluaykge1xuICAgICAgdGhpcy5jc3NSdWxlcyA9IFtdO1xuICAgICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gJ1xcbic7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBJbmplY3QgQ1NTIHN0cmluZyBpbnRvIGVsZW1lbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlcGxveSA9IGZ1bmN0aW9uIGRlcGxveSgpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLnNoZWV0O1xuICAgIGlmICghc2hlZXQpIHJldHVybjtcblxuICAgIGlmIChzaGVldC5vcHRpb25zLmxpbmspIHtcbiAgICAgIHRoaXMuaW5zZXJ0UnVsZXMoc2hlZXQucnVsZXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudC50ZXh0Q29udGVudCA9IFwiXFxuXCIgKyBzaGVldC50b1N0cmluZygpICsgXCJcXG5cIjtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IFJ1bGVMaXN0IGludG8gYW4gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZXMgPSBmdW5jdGlvbiBpbnNlcnRSdWxlcyhydWxlcywgbmF0aXZlUGFyZW50KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5pbmRleC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5pbnNlcnRSdWxlKHJ1bGVzLmluZGV4W2ldLCBpLCBuYXRpdmVQYXJlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IGEgcnVsZSBpbnRvIGVsZW1lbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluc2VydFJ1bGUgPSBmdW5jdGlvbiBpbnNlcnRSdWxlKHJ1bGUsIGluZGV4LCBuYXRpdmVQYXJlbnQpIHtcbiAgICBpZiAobmF0aXZlUGFyZW50ID09PSB2b2lkIDApIHtcbiAgICAgIG5hdGl2ZVBhcmVudCA9IHRoaXMuZWxlbWVudC5zaGVldDtcbiAgICB9XG5cbiAgICBpZiAocnVsZS5ydWxlcykge1xuICAgICAgdmFyIHBhcmVudCA9IHJ1bGU7XG4gICAgICB2YXIgbGF0ZXN0TmF0aXZlUGFyZW50ID0gbmF0aXZlUGFyZW50O1xuXG4gICAgICBpZiAocnVsZS50eXBlID09PSAnY29uZGl0aW9uYWwnIHx8IHJ1bGUudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgICAgdmFyIF9pbnNlcnRpb25JbmRleCA9IGdldFZhbGlkUnVsZUluc2VydGlvbkluZGV4KG5hdGl2ZVBhcmVudCwgaW5kZXgpOyAvLyBXZSBuZWVkIHRvIHJlbmRlciB0aGUgY29udGFpbmVyIHdpdGhvdXQgY2hpbGRyZW4gZmlyc3QuXG5cblxuICAgICAgICBsYXRlc3ROYXRpdmVQYXJlbnQgPSBfaW5zZXJ0UnVsZShuYXRpdmVQYXJlbnQsIHBhcmVudC50b1N0cmluZyh7XG4gICAgICAgICAgY2hpbGRyZW46IGZhbHNlXG4gICAgICAgIH0pLCBfaW5zZXJ0aW9uSW5kZXgpO1xuXG4gICAgICAgIGlmIChsYXRlc3ROYXRpdmVQYXJlbnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZWZDc3NSdWxlKHJ1bGUsIF9pbnNlcnRpb25JbmRleCwgbGF0ZXN0TmF0aXZlUGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbnNlcnRSdWxlcyhwYXJlbnQucnVsZXMsIGxhdGVzdE5hdGl2ZVBhcmVudCk7XG4gICAgICByZXR1cm4gbGF0ZXN0TmF0aXZlUGFyZW50O1xuICAgIH1cblxuICAgIHZhciBydWxlU3RyID0gcnVsZS50b1N0cmluZygpO1xuICAgIGlmICghcnVsZVN0cikgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBpbnNlcnRpb25JbmRleCA9IGdldFZhbGlkUnVsZUluc2VydGlvbkluZGV4KG5hdGl2ZVBhcmVudCwgaW5kZXgpO1xuXG4gICAgdmFyIG5hdGl2ZVJ1bGUgPSBfaW5zZXJ0UnVsZShuYXRpdmVQYXJlbnQsIHJ1bGVTdHIsIGluc2VydGlvbkluZGV4KTtcblxuICAgIGlmIChuYXRpdmVSdWxlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IHRydWU7XG4gICAgdGhpcy5yZWZDc3NSdWxlKHJ1bGUsIGluc2VydGlvbkluZGV4LCBuYXRpdmVSdWxlKTtcbiAgICByZXR1cm4gbmF0aXZlUnVsZTtcbiAgfTtcblxuICBfcHJvdG8ucmVmQ3NzUnVsZSA9IGZ1bmN0aW9uIHJlZkNzc1J1bGUocnVsZSwgaW5kZXgsIGNzc1J1bGUpIHtcbiAgICBydWxlLnJlbmRlcmFibGUgPSBjc3NSdWxlOyAvLyBXZSBvbmx5IHdhbnQgdG8gcmVmZXJlbmNlIHRoZSB0b3AgbGV2ZWwgcnVsZXMsIGRlbGV0ZVJ1bGUgQVBJIGRvZXNuJ3Qgc3VwcG9ydCByZW1vdmluZyBuZXN0ZWQgcnVsZXNcbiAgICAvLyBsaWtlIHJ1bGVzIGluc2lkZSBtZWRpYSBxdWVyaWVzIG9yIGtleWZyYW1lc1xuXG4gICAgaWYgKHJ1bGUub3B0aW9ucy5wYXJlbnQgaW5zdGFuY2VvZiBTdHlsZVNoZWV0KSB7XG4gICAgICB0aGlzLmNzc1J1bGVzW2luZGV4XSA9IGNzc1J1bGU7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWxldGVSdWxlID0gZnVuY3Rpb24gZGVsZXRlUnVsZShjc3NSdWxlKSB7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgdGhpcy5jc3NSdWxlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBDU1MgUnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YoY3NzUnVsZSkge1xuICAgIHJldHVybiB0aGlzLmNzc1J1bGVzLmluZGV4T2YoY3NzUnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgbmV3IENTUyBydWxlIGFuZCByZXBsYWNlIHRoZSBleGlzdGluZyBvbmUuXG4gICAqXG4gICAqIE9ubHkgdXNlZCBmb3Igc29tZSBvbGQgYnJvd3NlcnMgYmVjYXVzZSB0aGV5IGNhbid0IHNldCBhIHNlbGVjdG9yLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXBsYWNlUnVsZSA9IGZ1bmN0aW9uIHJlcGxhY2VSdWxlKGNzc1J1bGUsIHJ1bGUpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YoY3NzUnVsZSk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgIHRoaXMuZWxlbWVudC5zaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICB0aGlzLmNzc1J1bGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0UnVsZShydWxlLCBpbmRleCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhbGwgcnVsZXMgZWxlbWVudHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFJ1bGVzID0gZnVuY3Rpb24gZ2V0UnVsZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zaGVldC5jc3NSdWxlcztcbiAgfTtcblxuICByZXR1cm4gRG9tUmVuZGVyZXI7XG59KCk7XG5cbnZhciBpbnN0YW5jZUNvdW50ZXIgPSAwO1xuXG52YXIgSnNzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSnNzKG9wdGlvbnMpIHtcbiAgICB0aGlzLmlkID0gaW5zdGFuY2VDb3VudGVyKys7XG4gICAgdGhpcy52ZXJzaW9uID0gXCIxMC43LjFcIjtcbiAgICB0aGlzLnBsdWdpbnMgPSBuZXcgUGx1Z2luc1JlZ2lzdHJ5KCk7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgaWQ6IHtcbiAgICAgICAgbWluaWZ5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZUdlbmVyYXRlSWQ6IGNyZWF0ZUdlbmVyYXRlSWQsXG4gICAgICBSZW5kZXJlcjogaXNJbkJyb3dzZXIgPyBEb21SZW5kZXJlciA6IG51bGwsXG4gICAgICBwbHVnaW5zOiBbXVxuICAgIH07XG4gICAgdGhpcy5nZW5lcmF0ZUlkID0gY3JlYXRlR2VuZXJhdGVJZCh7XG4gICAgICBtaW5pZnk6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucGx1Z2lucy51c2UocGx1Z2luc1tpXSwge1xuICAgICAgICBxdWV1ZTogJ2ludGVybmFsJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXR1cChvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogUHJlcGFyZXMgdmFyaW91cyBvcHRpb25zLCBhcHBsaWVzIHBsdWdpbnMuXG4gICAqIFNob3VsZCBub3QgYmUgdXNlZCB0d2ljZSBvbiB0aGUgc2FtZSBpbnN0YW5jZSwgYmVjYXVzZSB0aGVyZSBpcyBubyBwbHVnaW5zXG4gICAqIGRlZHVwbGljYXRpb24gbG9naWMuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEpzcy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldHVwID0gZnVuY3Rpb24gc2V0dXAob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCA9IG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pZCkge1xuICAgICAgdGhpcy5vcHRpb25zLmlkID0gX2V4dGVuZHMoe30sIHRoaXMub3B0aW9ucy5pZCwgb3B0aW9ucy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCB8fCBvcHRpb25zLmlkKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlSWQgPSB0aGlzLm9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCh0aGlzLm9wdGlvbnMuaWQpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluc2VydGlvblBvaW50ICE9IG51bGwpIHRoaXMub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG5cbiAgICBpZiAoJ1JlbmRlcmVyJyBpbiBvcHRpb25zKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcblxuXG4gICAgaWYgKG9wdGlvbnMucGx1Z2lucykgdGhpcy51c2UuYXBwbHkodGhpcywgb3B0aW9ucy5wbHVnaW5zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgU3R5bGUgU2hlZXQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZVN0eWxlU2hlZXQgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZVNoZWV0KHN0eWxlcywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgICBpbmRleCA9IF9vcHRpb25zLmluZGV4O1xuXG4gICAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGluZGV4ID0gcmVnaXN0cnkuaW5kZXggPT09IDAgPyAwIDogcmVnaXN0cnkuaW5kZXggKyAxO1xuICAgIH1cblxuICAgIHZhciBzaGVldCA9IG5ldyBTdHlsZVNoZWV0KHN0eWxlcywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIGdlbmVyYXRlSWQ6IG9wdGlvbnMuZ2VuZXJhdGVJZCB8fCB0aGlzLmdlbmVyYXRlSWQsXG4gICAgICBpbnNlcnRpb25Qb2ludDogdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50LFxuICAgICAgUmVuZGVyZXI6IHRoaXMub3B0aW9ucy5SZW5kZXJlcixcbiAgICAgIGluZGV4OiBpbmRleFxuICAgIH0pKTtcbiAgICB0aGlzLnBsdWdpbnMub25Qcm9jZXNzU2hlZXQoc2hlZXQpO1xuICAgIHJldHVybiBzaGVldDtcbiAgfVxuICAvKipcbiAgICogRGV0YWNoIHRoZSBTdHlsZSBTaGVldCBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHJlZ2lzdHJ5LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVTdHlsZVNoZWV0ID0gZnVuY3Rpb24gcmVtb3ZlU3R5bGVTaGVldChzaGVldCkge1xuICAgIHNoZWV0LmRldGFjaCgpO1xuICAgIHJlZ2lzdHJ5LnJlbW92ZShzaGVldCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHJ1bGUgd2l0aG91dCBhIFN0eWxlIFNoZWV0LlxuICAgKiBbRGVwcmVjYXRlZF0gd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZVJ1bGUgPSBmdW5jdGlvbiBjcmVhdGVSdWxlJDEobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoc3R5bGUgPT09IHZvaWQgMCkge1xuICAgICAgc3R5bGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgLy8gRW5hYmxlIHJ1bGUgd2l0aG91dCBuYW1lIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdXG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVSdWxlKHVuZGVmaW5lZCwgbmFtZSwgc3R5bGUpO1xuICAgIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV1cblxuXG4gICAgdmFyIHJ1bGVPcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBqc3M6IHRoaXMsXG4gICAgICBSZW5kZXJlcjogdGhpcy5vcHRpb25zLlJlbmRlcmVyXG4gICAgfSk7XG5cbiAgICBpZiAoIXJ1bGVPcHRpb25zLmdlbmVyYXRlSWQpIHJ1bGVPcHRpb25zLmdlbmVyYXRlSWQgPSB0aGlzLmdlbmVyYXRlSWQ7XG4gICAgaWYgKCFydWxlT3B0aW9ucy5jbGFzc2VzKSBydWxlT3B0aW9ucy5jbGFzc2VzID0ge307XG4gICAgaWYgKCFydWxlT3B0aW9ucy5rZXlmcmFtZXMpIHJ1bGVPcHRpb25zLmtleWZyYW1lcyA9IHt9O1xuXG4gICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKG5hbWUsIHN0eWxlLCBydWxlT3B0aW9ucyk7XG5cbiAgICBpZiAocnVsZSkgdGhpcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIHBsdWdpbi4gUGFzc2VkIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aXRoIGEgcnVsZSBpbnN0YW5jZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXNlID0gZnVuY3Rpb24gdXNlKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGx1Z2lucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIHBsdWdpbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIF90aGlzLnBsdWdpbnMudXNlKHBsdWdpbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcmV0dXJuIEpzcztcbn0oKTtcblxuLyoqXG4gKiBFeHRyYWN0cyBhIHN0eWxlcyBvYmplY3Qgd2l0aCBvbmx5IHByb3BzIHRoYXQgY29udGFpbiBmdW5jdGlvbiB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGdldER5bmFtaWNTdHlsZXMoc3R5bGVzKSB7XG4gIHZhciB0byA9IG51bGw7XG5cbiAgZm9yICh2YXIga2V5IGluIHN0eWxlcykge1xuICAgIHZhciB2YWx1ZSA9IHN0eWxlc1trZXldO1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG4gICAgaWYgKHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICB0b1trZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHZhciBleHRyYWN0ZWQgPSBnZXREeW5hbWljU3R5bGVzKHZhbHVlKTtcblxuICAgICAgaWYgKGV4dHJhY3RlZCkge1xuICAgICAgICBpZiAoIXRvKSB0byA9IHt9O1xuICAgICAgICB0b1trZXldID0gZXh0cmFjdGVkO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0bztcbn1cblxuLyoqXG4gKiBTaGVldHNNYW5hZ2VyIGlzIGxpa2UgYSBXZWFrTWFwIHdoaWNoIGlzIGRlc2lnbmVkIHRvIGNvdW50IFN0eWxlU2hlZXRcbiAqIGluc3RhbmNlcyBhbmQgYXR0YWNoL2RldGFjaCBhdXRvbWF0aWNhbGx5LlxuICovXG52YXIgU2hlZXRzTWFuYWdlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNoZWV0c01hbmFnZXIoKSB7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMuc2hlZXRzID0gbmV3IFdlYWtNYXAoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTaGVldHNNYW5hZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS5zaGVldDtcbiAgfTtcblxuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKGtleSwgc2hlZXQpIHtcbiAgICBpZiAodGhpcy5zaGVldHMuaGFzKGtleSkpIHJldHVybjtcbiAgICB0aGlzLmxlbmd0aCsrO1xuICAgIHRoaXMuc2hlZXRzLnNldChrZXksIHtcbiAgICAgIHNoZWV0OiBzaGVldCxcbiAgICAgIHJlZnM6IDBcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubWFuYWdlID0gZnVuY3Rpb24gbWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkge1xuICAgICAgICBlbnRyeS5zaGVldC5hdHRhY2goKTtcbiAgICAgIH1cblxuICAgICAgZW50cnkucmVmcysrO1xuICAgICAgcmV0dXJuIGVudHJ5LnNoZWV0O1xuICAgIH1cblxuICAgIHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byBtYW5hZ2VcIik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICBfcHJvdG8udW5tYW5hZ2UgPSBmdW5jdGlvbiB1bm1hbmFnZShrZXkpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLnNoZWV0cy5nZXQoa2V5KTtcblxuICAgIGlmIChlbnRyeSkge1xuICAgICAgaWYgKGVudHJ5LnJlZnMgPiAwKSB7XG4gICAgICAgIGVudHJ5LnJlZnMtLTtcbiAgICAgICAgaWYgKGVudHJ5LnJlZnMgPT09IDApIGVudHJ5LnNoZWV0LmRldGFjaCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIlNoZWV0c01hbmFnZXI6IGNhbid0IGZpbmQgc2hlZXQgdG8gdW5tYW5hZ2VcIik7XG4gICAgfVxuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhTaGVldHNNYW5hZ2VyLCBbe1xuICAgIGtleTogXCJzaXplXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5sZW5ndGg7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNoZWV0c01hbmFnZXI7XG59KCk7XG5cbi8qKlxuICogQSBiZXR0ZXIgYWJzdHJhY3Rpb24gb3ZlciBDU1MuXG4gKlxuICogQGNvcHlyaWdodCBPbGVnIElzb25lbiAoU2xvYm9kc2tvaSkgLyBJc29uZW4gMjAxNC1wcmVzZW50XG4gKiBAd2Vic2l0ZSBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3NcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbi8qKlxuICogRXhwb3J0IGEgY29uc3RhbnQgaW5kaWNhdGluZyBpZiB0aGlzIGJyb3dzZXIgaGFzIENTU1RPTSBzdXBwb3J0LlxuICogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3VwZGF0ZXMvMjAxOC8wMy9jc3NvbVxuICovXG52YXIgaGFzQ1NTVE9NU3VwcG9ydCA9IHR5cGVvZiBDU1MgPT09ICdvYmplY3QnICYmIENTUyAhPSBudWxsICYmICdudW1iZXInIGluIENTUztcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBKc3MuXG4gKi9cblxudmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgSnNzKG9wdGlvbnMpO1xufTtcbi8qKlxuICogQSBnbG9iYWwgSnNzIGluc3RhbmNlLlxuICovXG5cbnZhciBqc3MgPSBjcmVhdGUoKTtcblxuZXhwb3J0IGRlZmF1bHQganNzO1xuZXhwb3J0IHsgUnVsZUxpc3QsIFNoZWV0c01hbmFnZXIsIFNoZWV0c1JlZ2lzdHJ5LCBjcmVhdGUsIGNyZWF0ZUdlbmVyYXRlSWQsIGNyZWF0ZVJ1bGUsIGdldER5bmFtaWNTdHlsZXMsIGhhc0NTU1RPTVN1cHBvcnQsIHJlZ2lzdHJ5IGFzIHNoZWV0cywgdG9Dc3NWYWx1ZSB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlID0gT2JqZWN0LmNyZWF0ZShtb2R1bGUpO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsICdleHBvcnRzJywge1xuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0c2V0OiAoKSA9PiB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0VTIE1vZHVsZXMgbWF5IG5vdCBhc3NpZ24gbW9kdWxlLmV4cG9ydHMgb3IgZXhwb3J0cy4qLCBVc2UgRVNNIGV4cG9ydCBzeW50YXgsIGluc3RlYWQ6ICcgKyBtb2R1bGUuaWQpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgeyBjcmVhdGUgfSBmcm9tICdqc3MnXG5pbXBvcnQgcHJlc2V0IGZyb20gJ2pzcy1wcmVzZXQtZGVmYXVsdCdcbmNvbnN0IGpzcyA9IGNyZWF0ZShwcmVzZXQuZGVmYXVsdCgpKVxuXG5jb25zdCBzaGVldCA9IGpzcy5jcmVhdGVTdHlsZVNoZWV0KHsgcHJpbWFyeToge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTAwJSdcbn19LCB7IGdlbmVyYXRlSWQ6ICgpID0+ICdwcmltYXJ5JywgUmVuZGVyZXI6IG51bGwgfSkudG9TdHJpbmcoKVxuY29uc29sZS5sb2coc2hlZXQpIl0sInNvdXJjZVJvb3QiOiIifQ==